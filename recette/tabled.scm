
(module
  memoed
  (library bkanren)
  (import (ascript "cases.scm")))

(define _eqv?_17 eqv?)
(define _cons_31 cons)
(define _append_32 append)
(define _list_33 list)
(define _vector_34 vector)
(define _list->vector_35 list->vector)
(define _map_36 map)

(define match-failure
  (lambda (val)
     (error 'match-failure "failed match" val)))

(define lcurry
  (lambda (f . args)
     (lambda x (apply f (append args x)))))

(define rcurry
  (lambda (f . args)
     (lambda x (apply f (append x args)))))

(define value (lambda (x) x))
(define ref-list (lambda (k l) (list-ref l k)))
(define ref-struct
  (lambda (k s) (struct-ref s k)))

(define ref-vector
  (lambda (k v) (vector-ref v k)))

(define ref-string
  (lambda (k s) (string-ref s k)))

(define ref-ucs2-string
  (lambda (k s) (ucs2-string-ref s k)))

(define ref-utf8-string
  (lambda (k s) (utf8-string-ref s k)))

(define is-struct?
  (lambda (t s)
     (if (struct? s)
       ((lambda (sk)
           ((lambda (st)
               ((lambda (lt)
                   ((lambda (ts)
                       ((lambda (ls)
                           ((lambda (x)
                               (if x
                                 x
                                 (begin
                                   (if (if (string-prefix? "<" st)
                                         (string-suffix? ">" st)
                                         #f)
                                     (set! st (substring st 1 (- lt 1))))
                                   (if (if (string-prefix? "<" ts)
                                         (string-suffix? ">" ts)
                                         #f)
                                     (set! ts (substring ts 1 (- ls 1))))
                                   (string=? ts st))))
                            (eq? t sk)))
                        (string-length ts)))
                    (symbol->string t)))
                (string-length st)))
            (symbol->string sk)))
        (struct-key s))
       #f)))


(define-record-type
  data
  (make-data queue answers resumers)
  data?
  (queue data-queue data-queue-set!)
  (answers data-answers data-answers-set!)
  (resumers data-resumers data-resumers-set!))
(define add-answer!
  (lambda (data ansv)
     (data-answers-set!
       data
       (_cons_31 ansv (data-answers data)))))

(define add-resumer!
  (lambda (data k)
     (data-resumers-set!
       data
       (_cons_31 k (data-resumers data)))))

(define-record-type
  var
  (make-var s)
  var?
  (s var-s))
(define reify-name
  (lambda (n)
     (string->symbol
       (string-append "_." (number->string n)))))

(define reify-var
  (lambda (s) (lambda (n) (make-var s))))

(define fail '())
(define subunify
  (lambda (arg ans s)
     ((lambda (arg)
         (if (eq? arg ans)
           s
           (if (var? arg)
             (ext-s-no-check arg ans s)
             (if (pair? arg)
               (subunify
                 (cdr arg)
                 (cdr ans)
                 (subunify (car arg) (car ans) s))
               s))))
      (stored-shrink-walk arg s))))

(define reuse
  (lambda (argv ansv s)
     (subunify argv ((reify (reify-var s)) ansv s) s)))

(define subsumed
  (lambda (arg ans s)
     ((lambda (arg ans)
         (if (eq? arg ans)
           s
           (if (var? ans)
             (ext-s ans arg s)
             (if (if (pair? arg) (pair? ans) #f)
               ((lambda (s)
                   (if s (subsumed (cdr arg) (cdr ans) s) #f))
                (subsumed (car arg) (car ans) s))
               (if (equal? arg ans) s #f)))))
      (stored-shrink-walk arg s)
      (stored-shrink-walk ans s))))

(define master
  (lambda (data argv)
     ((lambda (queue)
         (if (null? queue)
           fail
           (begin
             (data-queue-set! data '())
             (_list_33
               (_cons_31
                 (lambda (queue) (data-queue-set! data queue))
                 (lambda () (master data argv)))
               queue))))
      (data-queue data))))

(define consume
  (lambda (argv s sk data)
     ((lambda (resumer)
         (begin
           (add-resumer! data resumer)
           (_cons_31
             '#f
             (_cons_31
               (master data argv)
               (map resumer (data-answers data))))))
      (lambda (ansv)
         (lambda () (sk (reuse argv ansv s)))))))

(define installing-sk
  (lambda (argv data)
     (lambda (s)
        (if (any (lambda (ansv) (subsumed argv ansv s))
                 (data-answers data))
          fail
          ((lambda (ansv)
              (begin
                (add-answer! data ansv)
                (_cons_31
                  '#f
                  (map (lambda (k) (k ansv)) (data-resumers data)))))
           ((reify (reify-var s)) argv s))))))

(define empty-s '())
(define ==
  (lambda (u v)
     (lambda (s sk)
        (lambda ()
           ((lambda (tmp) (if tmp (sk tmp) fail))
            (unify u v s))))))

(define taker
  (lambda (queue sk fk)
     (if (null? queue)
       '()
       ((lambda (th queue)
           (if (if (pair? th) (pair? (car th)) #f)
             ((lambda (finish! old restart new)
                 (if (null? old)
                   ((lambda (wen)
                       (begin
                         (finish! wen)
                         (if (null? wen)
                           (fk queue)
                           (fk (_append_32 queue (_list_33 restart))))))
                    (reverse new))
                   (taker (_list_33 (car old))
                          (lambda (a new+)
                             (sk a
                                 (_cons_31
                                   (_cons_31
                                     (car th)
                                     (_cons_31 (cdr old) (_append_32 new+ new)))
                                   queue)))
                          (lambda (new+)
                             (fk (_cons_31
                                   (_cons_31
                                     (car th)
                                     (_cons_31 (cdr old) (_append_32 new+ new)))
                                   queue))))))
              (caar th)
              (cadr th)
              (cdar th)
              (cddr th))
             (if (if (pair? th) (car th) #f)
               (sk (cdr th) queue)
               (fk (if (null? th)
                     queue
                     (if (pair? th)
                       (_append_32 (cdr th) queue)
                       (_append_32 queue (_list_33 (th)))))))))
        (car queue)
        (cdr queue)))))

(define |take'|
  (lambda (n)
     (lambda (ths)
        (if (zero? n)
          '()
          (taker ths
                 (lambda (a ths)
                    (_cons_31 a ((|take'| (- n 1)) ths)))
                 (|take'| n))))))

(define take*
  (lambda (ths)
     (taker ths
            (lambda (a ths) (_cons_31 a (take* ths)))
            take*)))

(define take+
  (lambda (ths)
     (taker ths
            (lambda (a ths)
               (_cons_31 a (lambda () (take+ ths))))
            take+)))

(define stored-shrink-walk
  (lambda (v start)
     ((letrec ((loop (lambda (v s end)
                        (if ((lambda (x)
                                (if x
                                  x
                                  ((lambda (x) (if x x (eq? s end)))
                                   (eq? s (var-s v)))))
                             (not (var? v)))
                          v
                          (if (eq? (caar s) v)
                            (loop (cdar s) start (cdr s))
                            (loop v (cdr s) end))))))
        loop)
      v
      start
      '())))

(define shrink-walk
  (lambda (v start)
     ((letrec ((loop (lambda (v s end)
                        (if ((lambda (x) (if x x (eq? s end)))
                             (not (var? v)))
                          v
                          (if (eq? (caar s) v)
                            (loop (cdar s) start (cdr s))
                            (loop v (cdr s) end))))))
        loop)
      v
      start
      '())))

(define assq-walk
  (lambda (v s)
     ((lambda (tmp)
         (if tmp
           ((lambda (p) (assq-walk (cdr p) s)) tmp)
           v))
      (if (var? v) (assq v s) #f))))

(define walk*
  (lambda (walk)
     (lambda (t s)
        ((letrec ((walk* (lambda (t)
                            ((lambda (t)
                                (if (pair? t)
                                  (cons (walk* (car t)) (walk* (cdr t)))
                                  t))
                             (walk t s)))))
           walk*)
         t))))

(define reify
  (lambda (rep)
     (lambda (t s)
        ((lambda (t)
            ((lambda (s) ((walk* shrink-walk) t s))
             (reify-vars rep t)))
         ((walk* stored-shrink-walk) t s)))))

(define reify-vars
  (lambda (rep t)
     ((letrec ((rec (lambda (t s)
                       (if (if (var? t) (not (assq t s)) #f)
                         (cons (cons t (rep (length s))) s)
                         (if (pair? t) (rec (cdr t) (rec (car t) s)) s)))))
        rec)
      t
      '())))

(define occurs?
  (lambda (x t)
     ((lambda (_x_58)
         (if _x_58
           _x_58
           (if (pair? t)
             ((lambda (_x_59)
                 (if _x_59 _x_59 (occurs? x (cdr t))))
              (occurs? x (car t)))
             #f)))
      (eq? x t))))

(define ext-s-no-check
  (lambda (x v s) (cons (cons x v) s)))

(define ext-s-check
  (lambda (x v s)
     (if (not (occurs? x v))
       (ext-s-no-check x v s)
       #f)))

(define ext-s ext-s-check)
(define occurs-check
  ((lambda (f)
      (lambda args
         ((letrec ((matcher
                     (lambda (vals)
                        ((lambda (mfail) (if (null? vals) f (mfail)))
                         (lambda ()
                            ((lambda (mfail)
                                (if (pair? vals)
                                  ((lambda (valx valy)
                                      ((lambda (b)
                                          (if (null? valy)
                                            (begin
                                              (unless
                                                (boolean? b)
                                                (error 'occurs-check
                                                       "not a boolean"
                                                       b))
                                              (set! f b)
                                              (set! ext-s
                                                (if f
                                                  ext-s-check
                                                  ext-s-no-check)))
                                            (mfail)))
                                       valx))
                                   (car vals)
                                   (cdr vals))
                                  (mfail)))
                             (lambda () (match-failure vals))))))))
            matcher)
          args)))
   #t))

(define unify
  (lambda (v w s)
     ((lambda (v w)
         (if (eq? v w)
           s
           (if (var? v)
             (ext-s v w s)
             (if (var? w)
               (ext-s w v s)
               (if (if (pair? v) (pair? w) #f)
                 ((lambda (s) (if s (unify (cdr v) (cdr w) s) #f))
                  (unify (car v) (car w) s))
                 (if (equal? v w) s #f))))))
      (stored-shrink-walk v s)
      (stored-shrink-walk w s))))

; (define do-dtest
;   (lambda (thunk error)
;      (letrec ((max-ticks 9999999))
;        ((make-engine thunk)
;         max-ticks
;         (lambda (t v)
;            (error "failed to diverge" (- max-ticks t) v))
;         not))))

(define skipped-tests
  ((lambda (ls)
      (lambda args
         ((letrec ((matcher
                     (lambda (vals)
                        ((lambda (mfail)
                            (if (null? vals) (map list ls) (mfail)))
                         (lambda ()
                            ((lambda (mfail)
                                (if (pair? vals)
                                  ((lambda (valx valy)
                                      ((lambda (t)
                                          (if (null? valy)
                                            (set! ls (cons t ls))
                                            (mfail)))
                                       valx))
                                   (car vals)
                                   (cdr vals))
                                  (mfail)))
                             (lambda () (match-failure vals))))))))
            matcher)
          args)))
   '()))

(define do-test
  (lambda (expected equal? computed error)
     (unless
       (equal? expected computed)
       (begin
         (newline)
         (begin
           (display "expected: ")
           (begin (display expected) (if #f #f))))
       (begin
         (newline)
         (begin
           (display "computed: ")
           (begin
             (display computed)
             (begin (newline) (if #f #f)))))
       (error "failed"))))

(define remove-1
  (lambda (x ls)
     (if (null? ls)
       '()
       (if (equal? (car ls) x)
         (cdr ls)
         (cons (car ls) (remove-1 x (cdr ls)))))))

(define do-ftest
  (lambda (th expe error)
     (unless
       (null? expe)
       ((lambda (p)
           (if (null? p)
             (error "failed to produce answers" expe)
             (if (member (car p) expe)
               (do-ftest (cdr p) (remove-1 (car p) expe) error)
               (do-ftest (cdr p) expe error))))
        (th)))))

(define do-vtest
  (lambda (th pred? error)
     (when ((lambda (x)
               (if x
                 x
                 (error "failed" "to produce appropriate error" x)))
            (pred? 'x))
           (th))))

(define multiset-equal?
  (lambda (ls1 ls2)
     (if (null? ls1)
       (null? ls2)
       (if (member (car ls1) ls2)
         (multiset-equal?
           (cdr ls1)
           (remove-1 (car ls1) ls2))
         #f))))

(display "Testing ")
(display "no duplicates")
(display "...")
(if #f #f)
(do-test
  '(2)
  multiset-equal?
  (letrec ((g ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((g x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((g 2 q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"no duplicates"
            string
            '(letrec ((g (tabled (x y) (conde ((g x y)) ((== x y))))))
               (run* (q) (g 2 q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "simple recursion")
(display "...")
(if #f #f)
(do-test
  '(0)
  equal?
  (letrec ((f ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        0)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((f x)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((f q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     1))
  (lambda (string . irr)
     (apply error
            '"simple recursion"
            string
            '(letrec ((f (tabled (x) (conde ((== x 0)) ((f x))))))
               (run 1 (q) (f q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "skipped recursion")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((g ((lambda (table)
                     (lambda (x y)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((== x
                                                                                           y)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((g x
                                                                                          y)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x y))))
                  '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((g 2 q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(2)
  (lambda (string . irr)
     (apply error
            '"skipped recursion"
            string
            '(letrec ((g (tabled (x y) (conde ((== x y)) ((g x y))))))
               (run+ (q) (g 2 q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm1)
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (multiset-equal? '() '())
  (lambda (string . irr)
     (apply error
            ''m1
            string
            '(multiset-equal? '() '())
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm2)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '(a) '())
  (lambda (string . irr)
     (apply error
            ''m2
            string
            '(multiset-equal? '(a) '())
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm3)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '() '(a))
  (lambda (string . irr)
     (apply error
            ''m3
            string
            '(multiset-equal? '() '(a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm4)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '(a) '(a a))
  (lambda (string . irr)
     (apply error
            ''m4
            string
            '(multiset-equal? '(a) '(a a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm5)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '(a a) '(a))
  (lambda (string . irr)
     (apply error
            ''m5
            string
            '(multiset-equal? '(a a) '(a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm6)
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (multiset-equal? '(a a) '(a a))
  (lambda (string . irr)
     (apply error
            ''m6
            string
            '(multiset-equal? '(a a) '(a a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm7)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '(a b a) '(a b))
  (lambda (string . irr)
     (apply error
            ''m7
            string
            '(multiset-equal? '(a b a) '(a b))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm8)
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (multiset-equal? '(a b a) '(b a a))
  (lambda (string . irr)
     (apply error
            ''m8
            string
            '(multiset-equal? '(a b a) '(b a a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm9)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal? '(a b) '(a b a))
  (lambda (string . irr)
     (apply error
            ''m9
            string
            '(multiset-equal? '(a b) '(a b a))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm10)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal?
    '((c a) (a a) (a b) (a c) (b a) (b b) (b c))
    '((a c) (c a)))
  (lambda (string . irr)
     (apply error
            ''m10
            string
            '(multiset-equal?
               '((c a) (a a) (a b) (a c) (b a) (b b) (b c))
               '((a c) (c a)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'm11)
(display "...")
(if #f #f)
(do-test
  #f
  equal?
  (multiset-equal?
    '((a c) (b a) (c a))
    '((c a) (a c)))
  (lambda (string . irr)
     (apply error
            ''m11
            string
            '(multiset-equal?
               '((a c) (b a) (c a))
               '((c a) (a c)))
            irr)))
(display " done")
(newline)
(if #f #f)
((lambda (f)
    (begin
      (begin
        (display "Testing ")
        (begin
          (display "simple f")
          (begin (display "...") (if #f #f))))
      (do-test
        '(2)
        multiset-equal?
        ((lambda (n)
            (begin
              (unless
                ((lambda (x)
                    (if x
                      x
                      (if (integer? n)
                        (if (exact? n) (positive? n) #f)
                        #f)))
                 (boolean? n))
                (error 'run "not an exact positive integer" n))
              ((if (number? n) (|take'| n) (if n take+ take*))
               (list ((lambda (s sk)
                         (lambda ()
                            ((lambda (q)
                                ((lambda (s sk)
                                    (lambda ()
                                       ((f 2 q)
                                        s
                                        (lambda (s)
                                           (lambda ()
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (sk ((reify reify-name)
                                                              q
                                                              s)))
                                                      s
                                                      sk)))
                                               s
                                               sk))))))
                                 s
                                 sk))
                             (make-var s))))
                      empty-s
                      (lambda (a) (_cons_31 '#t a)))))))
         #f)
        (lambda (string . irr)
           (apply error
                  '"simple f"
                  string
                  '(run* (q) (f 2 q))
                  irr)))
      (begin
        (display " done")
        (begin (newline) (if #f #f)))))
 ((lambda (table)
     (lambda (x y)
        ((lambda (argv)
            (lambda (s sk)
               ((lambda (key)
                   (consume
                     argv
                     s
                     sk
                     ((lambda (tmp)
                         (if tmp
                           (cdr tmp)
                           ((lambda (data)
                               (begin
                                 (data-queue-set!
                                   data
                                   (_list_33
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (lambda () ((== x y) s sk)))
                                                s
                                                sk)))
                                         s
                                         (installing-sk argv data)))))
                                 (set! table
                                   (_cons_31 (_cons_31 key data) table))
                                 data))
                            (make-data '() '() '()))))
                      (assoc key table))))
                ((reify reify-name) argv s))))
         (_list_33 x y))))
  '()))
((lambda (f)
    (begin
      (begin
        (display "Testing ")
        (begin
          (display "simple f conde")
          (begin (display "...") (if #f #f))))
      (do-test
        '(#t #f)
        multiset-equal?
        ((lambda (n)
            (begin
              (unless
                ((lambda (x)
                    (if x
                      x
                      (if (integer? n)
                        (if (exact? n) (positive? n) #f)
                        #f)))
                 (boolean? n))
                (error 'run "not an exact positive integer" n))
              ((if (number? n) (|take'| n) (if n take+ take*))
               (list ((lambda (s sk)
                         (lambda ()
                            ((lambda (q)
                                ((lambda (s sk)
                                    (lambda ()
                                       ((f q #t)
                                        s
                                        (lambda (s)
                                           (lambda ()
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (sk ((reify reify-name)
                                                              q
                                                              s)))
                                                      s
                                                      sk)))
                                               s
                                               sk))))))
                                 s
                                 sk))
                             (make-var s))))
                      empty-s
                      (lambda (a) (_cons_31 '#t a)))))))
         #f)
        (lambda (string . irr)
           (apply error
                  '"simple f conde"
                  string
                  '(run* (q) (f q #t))
                  irr)))
      (begin
        (display " done")
        (begin (newline) (if #f #f)))))
 ((lambda (table)
     (lambda (x y)
        ((lambda (argv)
            (lambda (s sk)
               ((lambda (key)
                   (consume
                     argv
                     s
                     sk
                     ((lambda (tmp)
                         (if tmp
                           (cdr tmp)
                           ((lambda (data)
                               (begin
                                 (data-queue-set!
                                   data
                                   (_list_33
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (_list_33
                                                            '#f
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((== x y)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((== x #f)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))))
                                                       s
                                                       sk)))
                                                s
                                                sk)))
                                         s
                                         (installing-sk argv data)))))
                                 (set! table
                                   (_cons_31 (_cons_31 key data) table))
                                 data))
                            (make-data '() '() '()))))
                      (assoc key table))))
                ((reify reify-name) argv s))))
         (_list_33 x y))))
  '()))
(display "Testing ")
(display "serious call")
(display "...")
(if #f #f)
(do-test
  '(0 1 2)
  multiset-equal?
  (letrec ((f ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        0)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((g x)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '()))
           (g ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        1)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        2)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((f q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"serious call"
            string
            '(letrec ((f (tabled (x) (conde ((== x 0)) ((g x)))))
                      (g (tabled (x) (conde ((== x 1)) ((== x 2))))))
               (run* (q) (f q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "tabled definition")
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (letrec ((g ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((g x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '())))
    #t)
  (lambda (string . irr)
     (apply error
            '"tabled definition"
            string
            '(letrec ((g (tabled (x y) (conde ((== x y)) ((g x y))))))
               #t)
            irr)))
(display " done")
(newline)
(if #f #f)
(letrec ((g ((lambda (table)
                (lambda (x y)
                   ((lambda (argv)
                       (lambda (s sk)
                          ((lambda (key)
                              (consume
                                argv
                                s
                                sk
                                ((lambda (tmp)
                                    (if tmp
                                      (cdr tmp)
                                      ((lambda (data)
                                          (begin
                                            (data-queue-set!
                                              data
                                              (_list_33
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (_list_33
                                                                       '#f
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== x
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((g x
                                                                                     y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))
                                                    s
                                                    (installing-sk
                                                      argv
                                                      data)))))
                                            (set! table
                                              (_cons_31
                                                (_cons_31 key data)
                                                table))
                                            data))
                                       (make-data '() '() '()))))
                                 (assoc key table))))
                           ((reify reify-name) argv s))))
                    (_list_33 x y))))
             '())))
  (begin
    (begin
      (display "Testing ")
      (begin
        (display "simple g")
        (begin (display "...") (if #f #f))))
    (do-test
      '(2)
      multiset-equal?
      ((lambda (n)
          (begin
            (unless
              ((lambda (x)
                  (if x
                    x
                    (if (integer? n)
                      (if (exact? n) (positive? n) #f)
                      #f)))
               (boolean? n))
              (error 'run "not an exact positive integer" n))
            ((if (number? n) (|take'| n) (if n take+ take*))
             (list ((lambda (s sk)
                       (lambda ()
                          ((lambda (q)
                              ((lambda (s sk)
                                  (lambda ()
                                     ((g 2 q)
                                      s
                                      (lambda (s)
                                         (lambda ()
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (sk ((reify reify-name)
                                                            q
                                                            s)))
                                                    s
                                                    sk)))
                                             s
                                             sk))))))
                               s
                               sk))
                           (make-var s))))
                    empty-s
                    (lambda (a) (_cons_31 '#t a)))))))
       2)
      (lambda (string . irr)
         (apply error
                '"simple g"
                string
                '(run 2 (q) (g 2 q))
                irr)))
    (begin
      (display " done")
      (begin (newline) (if #f #f)))))
(display "Testing ")
(display "mutual recursion")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((f ((lambda (table)
                     (lambda (x)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((== x
                                                                                           0)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((g x)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x))))
                  '()))
              (g ((lambda (table)
                     (lambda (x)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((== x
                                                                                           1)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((f x)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x))))
                  '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((f q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(0 1)
  (lambda (string . irr)
     (apply error
            '"mutual recursion"
            string
            '(letrec ((f (tabled (x) (conde ((== x 0)) ((g x)))))
                      (g (tabled (x) (conde ((== x 1)) ((f x))))))
               (run+ (q) (f q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "simple listo")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((listo ((lambda (table)
                         (lambda (ls)
                            ((lambda (argv)
                                (lambda (s sk)
                                   ((lambda (key)
                                       (consume
                                         argv
                                         s
                                         sk
                                         ((lambda (tmp)
                                             (if tmp
                                               (cdr tmp)
                                               ((lambda (data)
                                                   (begin
                                                     (data-queue-set!
                                                       data
                                                       (_list_33
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (_list_33
                                                                                '#f
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== ls
                                                                                               '())
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lambda (a d)
                                                                                                     ((lambda (s sk)
                                                                                                         (lambda ()
                                                                                                            ((== ls
                                                                                                                 (_cons_31
                                                                                                                   a
                                                                                                                   d))
                                                                                                             s
                                                                                                             (lambda (s)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (lambda ()
                                                                                                                          ((listo d)
                                                                                                                           s
                                                                                                                           sk)))
                                                                                                                    s
                                                                                                                    sk))))))
                                                                                                      s
                                                                                                      sk))
                                                                                                  (make-var
                                                                                                    s)
                                                                                                  (make-var
                                                                                                    s))))
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))))
                                                                           s
                                                                           sk)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             (installing-sk
                                                               argv
                                                               data)))))
                                                     (set! table
                                                       (_cons_31
                                                         (_cons_31 key data)
                                                         table))
                                                     data))
                                                (make-data '() '() '()))))
                                          (assoc key table))))
                                    ((reify reify-name) argv s))))
                             (_list_33 ls))))
                      '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((listo q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(())
  (lambda (string . irr)
     (apply error
            '"simple listo"
            string
            '(letrec ((listo (tabled
                               (ls)
                               (conde ((== ls '()))
                                      ((exist (a d)
                                              (== ls `(,a unquote d))
                                              (listo d)))))))
               (run+ (q) (listo q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "listo")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((listo ((lambda (table)
                         (lambda (ls)
                            ((lambda (argv)
                                (lambda (s sk)
                                   ((lambda (key)
                                       (consume
                                         argv
                                         s
                                         sk
                                         ((lambda (tmp)
                                             (if tmp
                                               (cdr tmp)
                                               ((lambda (data)
                                                   (begin
                                                     (data-queue-set!
                                                       data
                                                       (_list_33
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (_list_33
                                                                                '#f
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== ls
                                                                                               '())
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lambda (a d)
                                                                                                     ((lambda (s sk)
                                                                                                         (lambda ()
                                                                                                            ((== ls
                                                                                                                 (_cons_31
                                                                                                                   a
                                                                                                                   d))
                                                                                                             s
                                                                                                             (lambda (s)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (lambda ()
                                                                                                                          ((listo d)
                                                                                                                           s
                                                                                                                           sk)))
                                                                                                                    s
                                                                                                                    sk))))))
                                                                                                      s
                                                                                                      sk))
                                                                                                  (make-var
                                                                                                    s)
                                                                                                  (make-var
                                                                                                    s))))
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))))
                                                                           s
                                                                           sk)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             (installing-sk
                                                               argv
                                                               data)))))
                                                     (set! table
                                                       (_cons_31
                                                         (_cons_31 key data)
                                                         table))
                                                     data))
                                                (make-data '() '() '()))))
                                          (assoc key table))))
                                    ((reify reify-name) argv s))))
                             (_list_33 ls))))
                      '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((listo q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(()
    (_.0)
    (_.0 _.1)
    (_.0 _.1 _.2)
    (_.0 _.1 _.2 _.3)
    (_.0 _.1 _.2 _.3 _.4))
  (lambda (string . irr)
     (apply error
            '"listo"
            string
            '(letrec ((listo (tabled
                               (ls)
                               (conde ((== ls '()))
                                      ((exist (a d)
                                              (== ls `(,a unquote d))
                                              (listo d)))))))
               (run+ (q) (listo q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(letrec ((g ((lambda (table)
                (lambda (x y)
                   ((lambda (argv)
                       (lambda (s sk)
                          ((lambda (key)
                              (consume
                                argv
                                s
                                sk
                                ((lambda (tmp)
                                    (if tmp
                                      (cdr tmp)
                                      ((lambda (data)
                                          (begin
                                            (data-queue-set!
                                              data
                                              (_list_33
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (_list_33
                                                                       '#f
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== x
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((g x
                                                                                     y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))
                                                    s
                                                    (installing-sk
                                                      argv
                                                      data)))))
                                            (set! table
                                              (_cons_31
                                                (_cons_31 key data)
                                                table))
                                            data))
                                       (make-data '() '() '()))))
                                 (assoc key table))))
                           ((reify reify-name) argv s))))
                    (_list_33 x y))))
             '())))
  (begin
    (begin
      (display "Testing ")
      (begin
        (display "simple g 3")
        (begin (display "...") (if #f #f))))
    (do-test
      '(2)
      multiset-equal?
      ((lambda (n)
          (begin
            (unless
              ((lambda (x)
                  (if x
                    x
                    (if (integer? n)
                      (if (exact? n) (positive? n) #f)
                      #f)))
               (boolean? n))
              (error 'run "not an exact positive integer" n))
            ((if (number? n) (|take'| n) (if n take+ take*))
             (list ((lambda (s sk)
                       (lambda ()
                          ((lambda (q)
                              ((lambda (s sk)
                                  (lambda ()
                                     ((g 2 q)
                                      s
                                      (lambda (s)
                                         (lambda ()
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (sk ((reify reify-name)
                                                            q
                                                            s)))
                                                    s
                                                    sk)))
                                             s
                                             sk))))))
                               s
                               sk))
                           (make-var s))))
                    empty-s
                    (lambda (a) (_cons_31 '#t a)))))))
       3)
      (lambda (string . irr)
         (apply error
                '"simple g 3"
                string
                '(run 3 (q) (g 2 q))
                irr)))
    (begin
      (display " done")
      (begin (newline) (if #f #f)))))
(display "Testing ")
(display "Guo Gupta 2008 CLSS Example 1")
(display "...")
(if #f #f)
(do-test
  '(a c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((r x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((p z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b a)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (x)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a x)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          x
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2008 CLSS Example 1"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (r x z) (p z y))) ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b a)))
                                   ((== `(,x ,y) `(b c)))))))
               (run* (x) (r 'a x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Guo Gupta 2008 CLSS Example 1 Extra Tabling")
(display "...")
(if #f #f)
(do-test
  '(a c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((r x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((p z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(a b))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(b a))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(b c))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (x)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a x)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          x
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2008 CLSS Example 1 Extra Tabling"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (r x z) (p z y))) ((p x y)))))
                      (p (tabled
                           (x y)
                           (conde ((== `(,x ,y) `(a b)))
                                  ((== `(,x ,y) `(b a)))
                                  ((== `(,x ,y) `(b c)))))))
               (run* (x) (r 'a x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Guo Gupta 2001 LNCS Example 3")
(display "...")
(if #f #f)
(do-test
  '(c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((r x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((r z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((q y)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a d)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                          s
                          sk))))))
           (q (lambda (y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== y 'b) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== y 'c) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2001 LNCS Example 3"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (r x z) (r z y)))
                                  ((p x y) (q y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(a d)))
                                   ((== `(,x ,y) `(b c))))))
                      (q (lambda (y) (conde ((== y 'b)) ((== y 'c))))))
               (run* (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Sagonas Swift Example")
(display "...")
(if #f #f)
(do-test
  '(b c)
  multiset-equal?
  (letrec ((p ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((p x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((|e| z
                                                                                                                         y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((|e| x
                                                                                         y)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((q y)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (|e| (lambda (x y)
                   (lambda (s sk)
                      (_list_33
                        '#f
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                            s
                            sk))
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(a d)) s sk)))
                            s
                            sk))
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                            s
                            sk))))))
           (q (lambda (x)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'a) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'b) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'c) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (z)
                            ((lambda (s sk)
                                (lambda ()
                                   ((p 'a z)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          z
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Example"
            string
            '(letrec ((p (tabled
                           (x y)
                           (conde ((exist (z) (p x z) (|e| z y)))
                                  ((|e| x y) (q y)))))
                      (|e| (lambda (x y)
                              (conde ((== `(,x ,y) `(a b)))
                                     ((== `(,x ,y) `(a d)))
                                     ((== `(,x ,y) `(b c))))))
                      (q (lambda (x)
                            (conde ((== x 'a)) ((== x 'b)) ((== x 'c))))))
               (run* (z) (p 'a z)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Fig 21 non-tabled run 10")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((p (lambda (x y)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((q x)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((r y) s sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(c a)) s sk)))
                             s
                             sk))))))
              (q (lambda (x)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'a) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'b) s sk)))
                             s
                             sk))))))
              (r (lambda (x)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'c) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (y)
                                              ((lambda (s sk)
                                                  (lambda () ((p x y) s sk)))
                                               s
                                               sk))
                                           (make-var s))))
                                    s
                                    sk)))
                             s
                             sk)))))))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (x y)
                                                 ((lambda (s sk)
                                                     (lambda ()
                                                        ((== q (_list_33 x y))
                                                         s
                                                         (lambda (s)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((p x y)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))))))
                                                  s
                                                  sk))
                                              (make-var s)
                                              (make-var s))))
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((c a) (a a) (a b) (a c) (b a) (b b) (b c))
  (lambda (string . irr)
     (apply error
            '"Fig 21 non-tabled run 10"
            string
            '(letrec ((p (lambda (x y)
                            (conde ((q x) (r y)) ((== `(,x ,y) '(c a))))))
                      (q (lambda (x) (conde ((== x 'a)) ((== x 'b)))))
                      (r (lambda (x)
                            (conde ((== x 'c)) ((exist (y) (p x y)))))))
               (run+ (q) (exist (x y) (== q `(,x ,y)) (p x y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Sagonas Swift Fig 21 no tabling")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((p (lambda (x y)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((q x)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((r y) s sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(c a)) s sk)))
                             s
                             sk))))))
              (q (lambda (x)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'a) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'b) s sk)))
                             s
                             sk))))))
              (r (lambda (x)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'c) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (y)
                                              ((lambda (s sk)
                                                  (lambda () ((p x y) s sk)))
                                               s
                                               sk))
                                           (make-var s))))
                                    s
                                    sk)))
                             s
                             sk)))))))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (x y)
                                                 ((lambda (s sk)
                                                     (lambda ()
                                                        ((== q (_list_33 x y))
                                                         s
                                                         (lambda (s)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((p x y)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))))))
                                                  s
                                                  sk))
                                              (make-var s)
                                              (make-var s))))
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((a c) (a a))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Fig 21 no tabling"
            string
            '(letrec ((p (lambda (x y)
                            (conde ((q x) (r y)) ((== `(,x ,y) '(c a))))))
                      (q (lambda (x) (conde ((== x 'a)) ((== x 'b)))))
                      (r (lambda (x)
                            (conde ((== x 'c)) ((exist (y) (p x y)))))))
               (run+ (q) (exist (x y) (== q `(,x ,y)) (p x y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'a1)
(display "...")
(if #f #f)
(do-test
  '(5)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== q 5)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== q 5)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   3)
  (lambda (string . irr)
     (apply error
            ''a1
            string
            '(run 3 (q) (== q 5) (== q 5))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'a2)
(display "...")
(if #f #f)
(do-test
  '(5)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== q 3)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== q 4) s sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((== q 5) s sk)))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   5)
  (lambda (string . irr)
     (apply error
            ''a2
            string
            '(run 5
                  (q)
                  (conde ((== q 3) (== q 4)) ((== q 5))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'a3)
(display "...")
(if #f #f)
(do-test
  '(3 5)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== q 3)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== q 3) s sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((== q 5) s sk)))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   5)
  (lambda (string . irr)
     (apply error
            ''a3
            string
            '(run 5
                  (q)
                  (conde ((== q 3) (== q 3)) ((== q 5))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display 'a4)
(display "...")
(if #f #f)
(do-test
  '(3 3 4)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((== q 3) s sk)))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda () ((== q q) s sk)))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (_list_33
                                                     '#f
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== q 3) s sk)))
                                                         s
                                                         sk))
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== q 4) s sk)))
                                                         s
                                                         sk))))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   10)
  (lambda (string . irr)
     (apply error
            ''a4
            string
            '(run 10
                  (q)
                  (conde ((== q 3)) ((== q q)))
                  (conde ((== q 3)) ((== q 4))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Simplified^2 non-tabled Guo Gupta 2001 LNCS Example 3")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((r (lambda (x y)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (z)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((r x z)
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((r z y)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    s
                                    sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                             s
                             sk)))))))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (y)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((r 'a y)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             y
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(c b)
  (lambda (string . irr)
     (apply error
            '"Simplified^2 non-tabled Guo Gupta 2001 LNCS Example 3"
            string
            '(letrec ((r (lambda (x y)
                            (conde ((exist (z) (r x z) (r z y)))
                                   ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b c)))))))
               (run+ (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Simplified^2 tabled Guo Gupta 2001 LNCS Example 3")
(display "...")
(if #f #f)
(do-test
  '(c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((r x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((r z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(a b))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(b c))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Simplified^2 tabled Guo Gupta 2001 LNCS Example 3"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (r x z) (r z y)))
                                  ((== `(,x ,y) `(a b)))
                                  ((== `(,x ,y) `(b c)))))))
               (run* (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Fig 21 really simplified")
(display "...")
(if #f #f)
(do-test
  '(c)
  multiset-equal?
  (letrec ((r (lambda (x)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'c) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk) (lambda () ((r x) s sk))) s sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     1))
  (lambda (string . irr)
     (apply error
            '"Fig 21 really simplified"
            string
            '(letrec ((r (lambda (x) (conde ((== x 'c)) ((r x))))))
               (run 1 (q) (r q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Fig 21 simplified tabled")
(display "...")
(if #f #f)
(do-test
  '((a c) (b c))
  multiset-equal?
  (letrec ((q ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'a)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'b)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '()))
           (r ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'c)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((r x)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (p)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== p (_list_33 x y))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((q x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((r y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          p
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Fig 21 simplified tabled"
            string
            '(letrec ((q (tabled (x) (conde ((== x 'a)) ((== x 'b)))))
                      (r (tabled (x) (conde ((== x 'c)) ((r x))))))
               (run* (p)
                     (exist (x y) (== p `(,x ,y)) (q x) (r y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Simplified Guo Gupta 2001 LNCS Example 3")
(display "...")
(if #f #f)
(do-test
  '(c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((r x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((r z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Simplified Guo Gupta 2001 LNCS Example 3"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (r x z) (r z y))) ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b c)))))))
               (run* (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Simplified non-tabled Guo Gupta 2001 LNCS Example 3")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((r (lambda (x y)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (z)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((r x z)
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((r z y)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    s
                                    sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk) (lambda () ((p x y) s sk)))
                             s
                             sk))))))
              (p (lambda (x y)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                             s
                             sk)))))))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (y)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((r 'a y)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             y
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(c b)
  (lambda (string . irr)
     (apply error
            '"Simplified non-tabled Guo Gupta 2001 LNCS Example 3"
            string
            '(letrec ((r (lambda (x y)
                            (conde ((exist (z) (r x z) (r z y))) ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b c)))))))
               (run+ (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Guo Gupta 2001 LNCS Example 2")
(display "...")
(if #f #f)
(do-test
  '(d c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (_list_33
                                                                                                           '#f
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((r x
                                                                                                                         z)
                                                                                                                      s
                                                                                                                      (lambda (s)
                                                                                                                         (lambda ()
                                                                                                                            ((lambda (s sk)
                                                                                                                                (lambda ()
                                                                                                                                   ((p z
                                                                                                                                       y)
                                                                                                                                    s
                                                                                                                                    sk)))
                                                                                                                             s
                                                                                                                             sk))))))
                                                                                                               s
                                                                                                               sk))
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((r x
                                                                                                                         z)
                                                                                                                      s
                                                                                                                      (lambda (s)
                                                                                                                         (lambda ()
                                                                                                                            ((lambda (s sk)
                                                                                                                                (lambda ()
                                                                                                                                   ((q z
                                                                                                                                       y)
                                                                                                                                    s
                                                                                                                                    sk)))
                                                                                                                             s
                                                                                                                             sk))))))
                                                                                                               s
                                                                                                               sk))))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                          s
                          sk))))))
           (q (lambda (x y) (== (_list_33 x y) '(c d)))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2001 LNCS Example 2"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z)
                                          (conde ((r x z) (p z y))
                                                 ((r x z) (q z y)))))
                                  ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b c))))))
                      (q (lambda (x y) (== `(,x ,y) `(c d)))))
               (run* (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Guo Gupta 2001 LNCS Example 4")
(display "...")
(if #f #f)
(do-test
  '(a b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((p x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((r z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(b a)) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2001 LNCS Example 4"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z) (p x z) (r z y))) ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(b a)))))))
               (run 10 (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Warren Figure 4")
(display "...")
(if #f #f)
(do-test
  '(b a d)
  multiset-equal?
  (letrec ((path ((lambda (table)
                     (lambda (x y)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((arc x
                                                                                            y)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (z)
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((arc x
                                                                                                              z)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((path z
                                                                                                                             y)
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))
                                                                                              (make-var
                                                                                                s))))
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x y))))
                  '()))
           (arc (lambda (x y)
                   (lambda (s sk)
                      (_list_33
                        '#f
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                            s
                            sk))
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(b a)) s sk)))
                            s
                            sk))
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(b d)) s sk)))
                            s
                            sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (a)
                            ((lambda (s sk)
                                (lambda ()
                                   ((path 'a a)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          a
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Warren Figure 4"
            string
            '(letrec ((path (tabled
                              (x y)
                              (conde ((arc x y))
                                     ((exist (z) (arc x z) (path z y))))))
                      (arc (lambda (x y)
                              (conde ((== `(,x ,y) `(a b)))
                                     ((== `(,x ,y) `(b a)))
                                     ((== `(,x ,y) `(b d)))))))
               (run* (a) (path 'a a)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Guo Gupta 2008 CLSS Example 4")
(display "...")
(if #f #f)
(do-test
  '(d c b)
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (_list_33
                                                                                                           '#f
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((r x
                                                                                                                         z)
                                                                                                                      s
                                                                                                                      (lambda (s)
                                                                                                                         (lambda ()
                                                                                                                            ((lambda (s sk)
                                                                                                                                (lambda ()
                                                                                                                                   ((q z
                                                                                                                                       y)
                                                                                                                                    s
                                                                                                                                    sk)))
                                                                                                                             s
                                                                                                                             sk))))))
                                                                                                               s
                                                                                                               sk))
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((r x
                                                                                                                         z)
                                                                                                                      s
                                                                                                                      (lambda (s)
                                                                                                                         (lambda ()
                                                                                                                            ((lambda (s sk)
                                                                                                                                (lambda ()
                                                                                                                                   ((p z
                                                                                                                                       y)
                                                                                                                                    s
                                                                                                                                    sk)))
                                                                                                                             s
                                                                                                                             sk))))))
                                                                                                               s
                                                                                                               sk))))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((p x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(c d)) s sk)))
                          s
                          sk))))))
           (q (lambda (x y) (== (_list_33 x y) '(b c)))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (y)
                            ((lambda (s sk)
                                (lambda ()
                                   ((r 'a y)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          y
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Guo Gupta 2008 CLSS Example 4"
            string
            '(letrec ((r (tabled
                           (x y)
                           (conde ((exist (z)
                                          (conde ((r x z) (q z y))
                                                 ((r x z) (p z y)))))
                                  ((p x y)))))
                      (p (lambda (x y)
                            (conde ((== `(,x ,y) `(a b)))
                                   ((== `(,x ,y) `(c d))))))
                      (q (lambda (x y) (== `(,x ,y) `(b c)))))
               (run* (y) (r 'a y)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Zhou Sato Example")
(display "...")
(if #f #f)
(do-test
  '(b c)
  multiset-equal?
  (letrec ((p ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((p x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((|e| z
                                                                                                                         y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((|e| x
                                                                                         y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (|e| (lambda (x y)
                   (lambda (s sk)
                      (_list_33
                        '#f
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(a b)) s sk)))
                            s
                            sk))
                        (lambda ()
                           ((lambda (s sk)
                               (lambda () ((== (_list_33 x y) '(b c)) s sk)))
                            s
                            sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((p 'a q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"Zhou Sato Example"
            string
            '(letrec ((p (tabled
                           (x y)
                           (conde ((exist (z) (p x z) (|e| z y)))
                                  ((|e| x y)))))
                      (|e| (lambda (x y)
                              (conde ((== `(,x ,y) `(a b)))
                                     ((== `(,x ,y) `(b c)))))))
               (run 10 (q) (p 'a q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Sagonas Swift Fig 12")
(display "...")
(if #f #f)
(do-test
  '(1 2)
  multiset-equal?
  (letrec ((a ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((c x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((b x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((c z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (b ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((d x
                                                                                       y)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((a x
                                                                                                         z)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((c z
                                                                                                                       y)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (c (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(0 1)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(1 2)) s sk)))
                          s
                          sk))))))
           (d (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(0 1)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(1 2)) s sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (x)
                            ((lambda (s sk)
                                (lambda ()
                                   ((a 0 x)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          x
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Fig 12"
            string
            '(letrec ((a (tabled
                           (x y)
                           (conde ((c x y)) ((exist (z) (b x z) (c z y))))))
                      (b (tabled
                           (x y)
                           (conde ((d x y)) ((exist (z) (a x z) (c z y))))))
                      (c (lambda (x y)
                            (conde ((== `(,x ,y) '(0 1)))
                                   ((== `(,x ,y) `(1 2))))))
                      (d (lambda (x y)
                            (conde ((== `(,x ,y) '(0 1)))
                                   ((== `(,x ,y) `(1 2)))))))
               (run* (x) (a 0 x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Sagonas Swift Fig 21 no tabling no recursion")
(display "...")
(if #f #f)
(do-test
  '((a c) (b c) (c a))
  multiset-equal?
  (letrec ((p (lambda (x y)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda ()
                                ((q x)
                                 s
                                 (lambda (s)
                                    (lambda ()
                                       ((lambda (s sk) (lambda () ((r y) s sk)))
                                        s
                                        sk))))))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== (_list_33 x y) '(c a)) s sk)))
                          s
                          sk))))))
           (q (lambda (x)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'a) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk) (lambda () ((== x 'b) s sk)))
                          s
                          sk))))))
           (r (lambda (x) (== x 'c))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 x y))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((p x y)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Fig 21 no tabling no recursion"
            string
            '(letrec ((p (lambda (x y)
                            (conde ((q x) (r y)) ((== `(,x ,y) '(c a))))))
                      (q (lambda (x) (conde ((== x 'a)) ((== x 'b)))))
                      (r (lambda (x) (== x 'c))))
               (run 10
                    (q)
                    (exist (x y) (== q `(,x ,y)) (p x y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display
  "Sagonas Swift Fig 21 no tabling simplified")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((p (lambda (x y)
                    (lambda (s sk)
                       (lambda ()
                          ((lambda (s sk)
                              (lambda ()
                                 ((q x)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda () ((r y) s sk)))
                                         s
                                         sk))))))
                           s
                           sk)))))
              (q (lambda (x) (== x 'a)))
              (r (lambda (x)
                    (lambda (s sk)
                       (_list_33
                         '#f
                         (lambda ()
                            ((lambda (s sk) (lambda () ((== x 'c) s sk)))
                             s
                             sk))
                         (lambda ()
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (y)
                                              ((lambda (s sk)
                                                  (lambda () ((p x y) s sk)))
                                               s
                                               sk))
                                           (make-var s))))
                                    s
                                    sk)))
                             s
                             sk)))))))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (x y)
                                                 ((lambda (s sk)
                                                     (lambda ()
                                                        ((== q (_list_33 x y))
                                                         s
                                                         (lambda (s)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((p x y)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))))))
                                                  s
                                                  sk))
                                              (make-var s)
                                              (make-var s))))
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((a c))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Fig 21 no tabling simplified"
            string
            '(letrec ((p (lambda (x y) (exist () (q x) (r y))))
                      (q (lambda (x) (== x 'a)))
                      (r (lambda (x)
                            (conde ((== x 'c)) ((exist (y) (p x y)))))))
               (run+ (q) (exist (x y) (== q `(,x ,y)) (p x y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "Sagonas Swift Fig 21")
(display "...")
(if #f #f)
(do-test
  '((c a) (a a) (a b) (a c) (b a) (b b) (b c))
  multiset-equal?
  (letrec ((p ((lambda (table)
                  (lambda (x y)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((q x)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((r y)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (_list_33
                                                                                          x
                                                                                          y)
                                                                                        '(c a))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x y))))
               '()))
           (q ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'a)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'b)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '()))
           (r ((lambda (table)
                  (lambda (x)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        'c)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (y)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((p x
                                                                                                         y)
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 x y))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((p x y)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"Sagonas Swift Fig 21"
            string
            '(letrec ((p (tabled
                           (x y)
                           (conde ((q x) (r y)) ((== `(,x ,y) '(c a))))))
                      (q (tabled (x) (conde ((== x 'a)) ((== x 'b)))))
                      (r (tabled
                           (x)
                           (conde ((== x 'c)) ((exist (y) (p x y)))))))
               (run 10
                    (q)
                    (exist (x y) (== q `(,x ,y)) (p x y))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "farmer")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((state ((lambda (table)
                         (lambda (farmer wolf goat cabbage path)
                            ((lambda (argv)
                                (lambda (s sk)
                                   ((lambda (key)
                                       (consume
                                         argv
                                         s
                                         sk
                                         ((lambda (tmp)
                                             (if tmp
                                               (cdr tmp)
                                               ((lambda (data)
                                                   (begin
                                                     (data-queue-set!
                                                       data
                                                       (_list_33
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (_list_33
                                                                                '#f
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== farmer
                                                                                               'north)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== wolf
                                                                                                             'north)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== goat
                                                                                                                           'north)
                                                                                                                       s
                                                                                                                       (lambda (s)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (s sk)
                                                                                                                                 (lambda ()
                                                                                                                                    ((== cabbage
                                                                                                                                         'north)
                                                                                                                                     s
                                                                                                                                     (lambda (s)
                                                                                                                                        (lambda ()
                                                                                                                                           ((lambda (s sk)
                                                                                                                                               (lambda ()
                                                                                                                                                  ((== path
                                                                                                                                                       '())
                                                                                                                                                   s
                                                                                                                                                   sk)))
                                                                                                                                            s
                                                                                                                                            sk))))))
                                                                                                                              s
                                                                                                                              sk))))))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== farmer
                                                                                               wolf)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((safe farmer
                                                                                                               wolf
                                                                                                               goat
                                                                                                               cabbage)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (newpath crossed)
                                                                                                                                 ((lambda (s sk)
                                                                                                                                     (lambda ()
                                                                                                                                        ((== path
                                                                                                                                             (_cons_31
                                                                                                                                               'FW
                                                                                                                                               newpath))
                                                                                                                                         s
                                                                                                                                         (lambda (s)
                                                                                                                                            (lambda ()
                                                                                                                                               ((lambda (s sk)
                                                                                                                                                   (lambda ()
                                                                                                                                                      ((opposite
                                                                                                                                                         farmer
                                                                                                                                                         crossed)
                                                                                                                                                       s
                                                                                                                                                       (lambda (s)
                                                                                                                                                          (lambda ()
                                                                                                                                                             ((lambda (s sk)
                                                                                                                                                                 (lambda ()
                                                                                                                                                                    ((state crossed
                                                                                                                                                                            crossed
                                                                                                                                                                            goat
                                                                                                                                                                            cabbage
                                                                                                                                                                            newpath)
                                                                                                                                                                     s
                                                                                                                                                                     sk)))
                                                                                                                                                              s
                                                                                                                                                              sk))))))
                                                                                                                                                s
                                                                                                                                                sk))))))
                                                                                                                                  s
                                                                                                                                  sk))
                                                                                                                              (make-var
                                                                                                                                s)
                                                                                                                              (make-var
                                                                                                                                s))))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== farmer
                                                                                               goat)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((safe farmer
                                                                                                               wolf
                                                                                                               goat
                                                                                                               cabbage)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (crossed newpath)
                                                                                                                                 ((lambda (s sk)
                                                                                                                                     (lambda ()
                                                                                                                                        ((== path
                                                                                                                                             (_cons_31
                                                                                                                                               'FG
                                                                                                                                               newpath))
                                                                                                                                         s
                                                                                                                                         (lambda (s)
                                                                                                                                            (lambda ()
                                                                                                                                               ((lambda (s sk)
                                                                                                                                                   (lambda ()
                                                                                                                                                      ((opposite
                                                                                                                                                         farmer
                                                                                                                                                         crossed)
                                                                                                                                                       s
                                                                                                                                                       (lambda (s)
                                                                                                                                                          (lambda ()
                                                                                                                                                             ((lambda (s sk)
                                                                                                                                                                 (lambda ()
                                                                                                                                                                    ((state crossed
                                                                                                                                                                            wolf
                                                                                                                                                                            crossed
                                                                                                                                                                            cabbage
                                                                                                                                                                            newpath)
                                                                                                                                                                     s
                                                                                                                                                                     sk)))
                                                                                                                                                              s
                                                                                                                                                              sk))))))
                                                                                                                                                s
                                                                                                                                                sk))))))
                                                                                                                                  s
                                                                                                                                  sk))
                                                                                                                              (make-var
                                                                                                                                s)
                                                                                                                              (make-var
                                                                                                                                s))))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((== farmer
                                                                                               cabbage)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((safe farmer
                                                                                                               wolf
                                                                                                               goat
                                                                                                               cabbage)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (crossed newpath)
                                                                                                                                 ((lambda (s sk)
                                                                                                                                     (lambda ()
                                                                                                                                        ((== path
                                                                                                                                             (_cons_31
                                                                                                                                               'FC
                                                                                                                                               newpath))
                                                                                                                                         s
                                                                                                                                         (lambda (s)
                                                                                                                                            (lambda ()
                                                                                                                                               ((lambda (s sk)
                                                                                                                                                   (lambda ()
                                                                                                                                                      ((opposite
                                                                                                                                                         farmer
                                                                                                                                                         crossed)
                                                                                                                                                       s
                                                                                                                                                       (lambda (s)
                                                                                                                                                          (lambda ()
                                                                                                                                                             ((lambda (s sk)
                                                                                                                                                                 (lambda ()
                                                                                                                                                                    ((state crossed
                                                                                                                                                                            wolf
                                                                                                                                                                            goat
                                                                                                                                                                            crossed
                                                                                                                                                                            newpath)
                                                                                                                                                                     s
                                                                                                                                                                     sk)))
                                                                                                                                                              s
                                                                                                                                                              sk))))))
                                                                                                                                                s
                                                                                                                                                sk))))))
                                                                                                                                  s
                                                                                                                                  sk))
                                                                                                                              (make-var
                                                                                                                                s)
                                                                                                                              (make-var
                                                                                                                                s))))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((safe farmer
                                                                                                 wolf
                                                                                                 goat
                                                                                                 cabbage)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((lambda (crossed newpath)
                                                                                                                   ((lambda (s sk)
                                                                                                                       (lambda ()
                                                                                                                          ((== path
                                                                                                                               (_cons_31
                                                                                                                                 'FF
                                                                                                                                 newpath))
                                                                                                                           s
                                                                                                                           (lambda (s)
                                                                                                                              (lambda ()
                                                                                                                                 ((lambda (s sk)
                                                                                                                                     (lambda ()
                                                                                                                                        ((opposite
                                                                                                                                           farmer
                                                                                                                                           crossed)
                                                                                                                                         s
                                                                                                                                         (lambda (s)
                                                                                                                                            (lambda ()
                                                                                                                                               ((lambda (s sk)
                                                                                                                                                   (lambda ()
                                                                                                                                                      ((state crossed
                                                                                                                                                              wolf
                                                                                                                                                              goat
                                                                                                                                                              cabbage
                                                                                                                                                              newpath)
                                                                                                                                                       s
                                                                                                                                                       sk)))
                                                                                                                                                s
                                                                                                                                                sk))))))
                                                                                                                                  s
                                                                                                                                  sk))))))
                                                                                                                    s
                                                                                                                    sk))
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s))))
                                                                                                         s
                                                                                                         sk)))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))))
                                                                           s
                                                                           sk)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             (installing-sk
                                                               argv
                                                               data)))))
                                                     (set! table
                                                       (_cons_31
                                                         (_cons_31 key data)
                                                         table))
                                                     data))
                                                (make-data '() '() '()))))
                                          (assoc key table))))
                                    ((reify reify-name) argv s))))
                             (_list_33 farmer wolf goat cabbage path))))
                      '()))
              (opposite
                ((lambda (table)
                    (lambda (s1 s2)
                       ((lambda (argv)
                           (lambda (s sk)
                              ((lambda (key)
                                  (consume
                                    argv
                                    s
                                    sk
                                    ((lambda (tmp)
                                        (if tmp
                                          (cdr tmp)
                                          ((lambda (data)
                                              (begin
                                                (data-queue-set!
                                                  data
                                                  (_list_33
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((lambda (s sk)
                                                                         (_list_33
                                                                           '#f
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== s1
                                                                                          'north)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== s2
                                                                                                        'south)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== s1
                                                                                          'south)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== s2
                                                                                                        'north)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk)))
                                                        s
                                                        (installing-sk
                                                          argv
                                                          data)))))
                                                (set! table
                                                  (_cons_31
                                                    (_cons_31 key data)
                                                    table))
                                                data))
                                           (make-data '() '() '()))))
                                     (assoc key table))))
                               ((reify reify-name) argv s))))
                        (_list_33 s1 s2))))
                 '()))
              (safe ((lambda (table)
                        (lambda (farmer wolf goat cabbage)
                           ((lambda (argv)
                               (lambda (s sk)
                                  ((lambda (key)
                                      (consume
                                        argv
                                        s
                                        sk
                                        ((lambda (tmp)
                                            (if tmp
                                              (cdr tmp)
                                              ((lambda (data)
                                                  (begin
                                                    (data-queue-set!
                                                      data
                                                      (_list_33
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (s sk)
                                                                             (_list_33
                                                                               '#f
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== farmer
                                                                                              goat)
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== farmer
                                                                                              wolf)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== farmer
                                                                                                            cabbage)
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((opposite
                                                                                                                        farmer
                                                                                                                        goat)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk)))
                                                            s
                                                            (installing-sk
                                                              argv
                                                              data)))))
                                                    (set! table
                                                      (_cons_31
                                                        (_cons_31 key data)
                                                        table))
                                                    data))
                                               (make-data '() '() '()))))
                                         (assoc key table))))
                                   ((reify reify-name) argv s))))
                            (_list_33 farmer wolf goat cabbage))))
                     '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((state 'south 'south 'south 'south q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((FG FF FW FG FC FF FG) (FG FF FC FG FW FF FG))
  (lambda (string . irr)
     (apply error
            '"farmer"
            string
            '(letrec ((state (tabled
                               (farmer wolf goat cabbage path)
                               (conde ((== farmer 'north)
                                       (== wolf 'north)
                                       (== goat 'north)
                                       (== cabbage 'north)
                                       (== path '()))
                                      ((== farmer wolf)
                                       (safe farmer wolf goat cabbage)
                                       (exist (newpath crossed)
                                              (== path `(FW unquote newpath))
                                              (opposite farmer crossed)
                                              (state crossed
                                                     crossed
                                                     goat
                                                     cabbage
                                                     newpath)))
                                      ((== farmer goat)
                                       (safe farmer wolf goat cabbage)
                                       (exist (crossed newpath)
                                              (== path `(FG unquote newpath))
                                              (opposite farmer crossed)
                                              (state crossed
                                                     wolf
                                                     crossed
                                                     cabbage
                                                     newpath)))
                                      ((== farmer cabbage)
                                       (safe farmer wolf goat cabbage)
                                       (exist (crossed newpath)
                                              (== path `(FC unquote newpath))
                                              (opposite farmer crossed)
                                              (state crossed
                                                     wolf
                                                     goat
                                                     crossed
                                                     newpath)))
                                      ((safe farmer wolf goat cabbage)
                                       (exist (crossed newpath)
                                              (== path `(FF unquote newpath))
                                              (opposite farmer crossed)
                                              (state crossed
                                                     wolf
                                                     goat
                                                     cabbage
                                                     newpath))))))
                      (opposite
                        (tabled
                          (s1 s2)
                          (conde ((== s1 'north) (== s2 'south))
                                 ((== s1 'south) (== s2 'north)))))
                      (safe (tabled
                              (farmer wolf goat cabbage)
                              (conde ((== farmer goat))
                                     ((== farmer wolf)
                                      (== farmer cabbage)
                                      (opposite farmer goat))))))
               (run+ (q) (state 'south 'south 'south 'south q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "alternative farmer")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((valid ((lambda (table)
                         (lambda (farmer wolf goat cabbage path)
                            ((lambda (argv)
                                (lambda (s sk)
                                   ((lambda (key)
                                       (consume
                                         argv
                                         s
                                         sk
                                         ((lambda (tmp)
                                             (if tmp
                                               (cdr tmp)
                                               ((lambda (data)
                                                   (begin
                                                     (data-queue-set!
                                                       data
                                                       (_list_33
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((safe farmer
                                                                                 wolf
                                                                                 goat
                                                                                 cabbage)
                                                                           s
                                                                           (lambda (s)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (_list_33
                                                                                              '#f
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== (_list_33
                                                                                                               farmer
                                                                                                               wolf
                                                                                                               goat
                                                                                                               cabbage)
                                                                                                             '(north north
                                                                                                                     north
                                                                                                                     north))
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== path
                                                                                                                           '())
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((lambda (which new-farmer new-wolf new-goat new-cabbage new-path)
                                                                                                                   ((lambda (s sk)
                                                                                                                       (lambda ()
                                                                                                                          ((== path
                                                                                                                               (_cons_31
                                                                                                                                 which
                                                                                                                                 new-path))
                                                                                                                           s
                                                                                                                           (lambda (s)
                                                                                                                              (lambda ()
                                                                                                                                 ((lambda (s sk)
                                                                                                                                     (lambda ()
                                                                                                                                        ((opposite
                                                                                                                                           farmer
                                                                                                                                           new-farmer)
                                                                                                                                         s
                                                                                                                                         (lambda (s)
                                                                                                                                            (lambda ()
                                                                                                                                               ((lambda (s sk)
                                                                                                                                                   (lambda ()
                                                                                                                                                      ((one-with
                                                                                                                                                         farmer
                                                                                                                                                         new-farmer
                                                                                                                                                         which
                                                                                                                                                         (_list_33
                                                                                                                                                           (_list_33
                                                                                                                                                             'FW
                                                                                                                                                             wolf
                                                                                                                                                             new-wolf)
                                                                                                                                                           (_list_33
                                                                                                                                                             'FG
                                                                                                                                                             goat
                                                                                                                                                             new-goat)
                                                                                                                                                           (_list_33
                                                                                                                                                             'FC
                                                                                                                                                             cabbage
                                                                                                                                                             new-cabbage)))
                                                                                                                                                       s
                                                                                                                                                       (lambda (s)
                                                                                                                                                          (lambda ()
                                                                                                                                                             ((lambda (s sk)
                                                                                                                                                                 (lambda ()
                                                                                                                                                                    ((valid new-farmer
                                                                                                                                                                            new-wolf
                                                                                                                                                                            new-goat
                                                                                                                                                                            new-cabbage
                                                                                                                                                                            new-path)
                                                                                                                                                                     s
                                                                                                                                                                     sk)))
                                                                                                                                                              s
                                                                                                                                                              sk))))))
                                                                                                                                                s
                                                                                                                                                sk))))))
                                                                                                                                  s
                                                                                                                                  sk))))))
                                                                                                                    s
                                                                                                                    sk))
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s)
                                                                                                                (make-var
                                                                                                                  s))))
                                                                                                         s
                                                                                                         sk)))
                                                                                                  s
                                                                                                  sk))))
                                                                                         s
                                                                                         sk)))
                                                                                  s
                                                                                  sk))))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             (installing-sk
                                                               argv
                                                               data)))))
                                                     (set! table
                                                       (_cons_31
                                                         (_cons_31 key data)
                                                         table))
                                                     data))
                                                (make-data '() '() '()))))
                                          (assoc key table))))
                                    ((reify reify-name) argv s))))
                             (_list_33 farmer wolf goat cabbage path))))
                      '()))
              (one-with
                ((lambda (table)
                    (lambda (oldf newf which choices)
                       ((lambda (argv)
                           (lambda (s sk)
                              ((lambda (key)
                                  (consume
                                    argv
                                    s
                                    sk
                                    ((lambda (tmp)
                                        (if tmp
                                          (cdr tmp)
                                          ((lambda (data)
                                              (begin
                                                (data-queue-set!
                                                  data
                                                  (_list_33
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((lambda (s sk)
                                                                         (_list_33
                                                                           '#f
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== choices
                                                                                          '())
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== which
                                                                                                        'FF)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (choice rest)
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== choices
                                                                                                            (_cons_31
                                                                                                              choice
                                                                                                              rest))
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((lambda (s sk)
                                                                                                                         (_list_33
                                                                                                                           '#f
                                                                                                                           (lambda ()
                                                                                                                              ((lambda (s sk)
                                                                                                                                  (lambda ()
                                                                                                                                     ((== choice
                                                                                                                                          (_list_33
                                                                                                                                            which
                                                                                                                                            oldf
                                                                                                                                            newf))
                                                                                                                                      s
                                                                                                                                      (lambda (s)
                                                                                                                                         (lambda ()
                                                                                                                                            ((lambda (s sk)
                                                                                                                                                (lambda ()
                                                                                                                                                   ((stay rest)
                                                                                                                                                    s
                                                                                                                                                    sk)))
                                                                                                                                             s
                                                                                                                                             sk))))))
                                                                                                                               s
                                                                                                                               sk))
                                                                                                                           (lambda ()
                                                                                                                              ((lambda (s sk)
                                                                                                                                  (lambda ()
                                                                                                                                     ((stay (_list_33
                                                                                                                                              choice))
                                                                                                                                      s
                                                                                                                                      (lambda (s)
                                                                                                                                         (lambda ()
                                                                                                                                            ((lambda (s sk)
                                                                                                                                                (lambda ()
                                                                                                                                                   ((one-with
                                                                                                                                                      oldf
                                                                                                                                                      newf
                                                                                                                                                      which
                                                                                                                                                      rest)
                                                                                                                                                    s
                                                                                                                                                    sk)))
                                                                                                                                             s
                                                                                                                                             sk))))))
                                                                                                                               s
                                                                                                                               sk))))
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s))))
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk)))
                                                        s
                                                        (installing-sk
                                                          argv
                                                          data)))))
                                                (set! table
                                                  (_cons_31
                                                    (_cons_31 key data)
                                                    table))
                                                data))
                                           (make-data '() '() '()))))
                                     (assoc key table))))
                               ((reify reify-name) argv s))))
                        (_list_33 oldf newf which choices))))
                 '()))
              (stay ((lambda (table)
                        (lambda (choices)
                           ((lambda (argv)
                               (lambda (s sk)
                                  ((lambda (key)
                                      (consume
                                        argv
                                        s
                                        sk
                                        ((lambda (tmp)
                                            (if tmp
                                              (cdr tmp)
                                              ((lambda (data)
                                                  (begin
                                                    (data-queue-set!
                                                      data
                                                      (_list_33
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (s sk)
                                                                             (_list_33
                                                                               '#f
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== choices
                                                                                              '())
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((lambda (tag pos rest)
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== choices
                                                                                                                (_cons_31
                                                                                                                  (_list_33
                                                                                                                    tag
                                                                                                                    pos
                                                                                                                    pos)
                                                                                                                  rest))
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((stay rest)
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))
                                                                                                 (make-var
                                                                                                   s)
                                                                                                 (make-var
                                                                                                   s)
                                                                                                 (make-var
                                                                                                   s))))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk)))
                                                            s
                                                            (installing-sk
                                                              argv
                                                              data)))))
                                                    (set! table
                                                      (_cons_31
                                                        (_cons_31 key data)
                                                        table))
                                                    data))
                                               (make-data '() '() '()))))
                                         (assoc key table))))
                                   ((reify reify-name) argv s))))
                            (_list_33 choices))))
                     '()))
              (opposite
                ((lambda (table)
                    (lambda (pos1 pos2)
                       ((lambda (argv)
                           (lambda (s sk)
                              ((lambda (key)
                                  (consume
                                    argv
                                    s
                                    sk
                                    ((lambda (tmp)
                                        (if tmp
                                          (cdr tmp)
                                          ((lambda (data)
                                              (begin
                                                (data-queue-set!
                                                  data
                                                  (_list_33
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((lambda (s sk)
                                                                         (_list_33
                                                                           '#f
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== pos1
                                                                                          'north)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== pos2
                                                                                                        'south)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== pos1
                                                                                          'south)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== pos2
                                                                                                        'north)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk)))
                                                        s
                                                        (installing-sk
                                                          argv
                                                          data)))))
                                                (set! table
                                                  (_cons_31
                                                    (_cons_31 key data)
                                                    table))
                                                data))
                                           (make-data '() '() '()))))
                                     (assoc key table))))
                               ((reify reify-name) argv s))))
                        (_list_33 pos1 pos2))))
                 '()))
              (safe ((lambda (table)
                        (lambda (farmer wolf goat cabbage)
                           ((lambda (argv)
                               (lambda (s sk)
                                  ((lambda (key)
                                      (consume
                                        argv
                                        s
                                        sk
                                        ((lambda (tmp)
                                            (if tmp
                                              (cdr tmp)
                                              ((lambda (data)
                                                  (begin
                                                    (data-queue-set!
                                                      data
                                                      (_list_33
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (s sk)
                                                                             (_list_33
                                                                               '#f
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== farmer
                                                                                              goat)
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== farmer
                                                                                              wolf)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== farmer
                                                                                                            cabbage)
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((opposite
                                                                                                                        farmer
                                                                                                                        goat)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk)))
                                                            s
                                                            (installing-sk
                                                              argv
                                                              data)))))
                                                    (set! table
                                                      (_cons_31
                                                        (_cons_31 key data)
                                                        table))
                                                    data))
                                               (make-data '() '() '()))))
                                         (assoc key table))))
                                   ((reify reify-name) argv s))))
                            (_list_33 farmer wolf goat cabbage))))
                     '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((valid 'south 'south 'south 'south q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((FG FF FW FG FC FF FG) (FG FF FC FG FW FF FG))
  (lambda (string . irr)
     (apply error
            '"alternative farmer"
            string
            '(letrec ((valid (tabled
                               (farmer wolf goat cabbage path)
                               (safe farmer wolf goat cabbage)
                               (conde ((== `(,farmer ,wolf ,goat ,cabbage)
                                           '(north north north north))
                                       (== path '()))
                                      ((exist (which new-farmer
                                                     new-wolf
                                                     new-goat
                                                     new-cabbage
                                                     new-path)
                                              (== path
                                                  `(,which unquote new-path))
                                              (opposite farmer new-farmer)
                                              (one-with
                                                farmer
                                                new-farmer
                                                which
                                                `((FW ,wolf ,new-wolf)
                                                  (FG ,goat ,new-goat)
                                                  (FC ,cabbage ,new-cabbage)))
                                              (valid new-farmer
                                                     new-wolf
                                                     new-goat
                                                     new-cabbage
                                                     new-path))))))
                      (one-with
                        (tabled
                          (oldf newf which choices)
                          (conde ((== choices '()) (== which 'FF))
                                 ((exist (choice rest)
                                         (== choices `(,choice unquote rest))
                                         (conde ((== choice
                                                     `(,which ,oldf ,newf))
                                                 (stay rest))
                                                ((stay `(,choice))
                                                 (one-with
                                                   oldf
                                                   newf
                                                   which
                                                   rest))))))))
                      (stay (tabled
                              (choices)
                              (conde ((== choices '()))
                                     ((exist (tag pos rest)
                                             (== choices
                                                 `((,tag ,pos ,pos)
                                                   unquote
                                                   rest))
                                             (stay rest))))))
                      (opposite
                        (tabled
                          (pos1 pos2)
                          (conde ((== pos1 'north) (== pos2 'south))
                                 ((== pos1 'south) (== pos2 'north)))))
                      (safe (tabled
                              (farmer wolf goat cabbage)
                              (conde ((== farmer goat))
                                     ((== farmer wolf)
                                      (== farmer cabbage)
                                      (opposite farmer goat))))))
               (run+ (q) (valid 'south 'south 'south 'south q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "fg1")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  (letrec ((f ((lambda (table)
                  (lambda (x p)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        0)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== p
                                                                                                      '())
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (q)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((g x
                                                                                                         q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== p
                                                                                                                        (_cons_31
                                                                                                                          '1
                                                                                                                          q))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x p))))
               '()))
           (g ((lambda (table)
                  (lambda (x q)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== x
                                                                                        1)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== q
                                                                                                      '())
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((f x
                                                                                       q)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x q))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((f 2 q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"fg1"
            string
            '(letrec ((f (tabled
                           (x p)
                           (conde ((== x 0) (== p '()))
                                  ((exist (q) (g x q) (== p `(1 unquote q)))))))
                      (g (tabled
                           (x q)
                           (conde ((== x 1) (== q '())) ((f x q))))))
               (run 10 (q) (f 2 q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "fg2")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  (letrec ((f ((lambda (table)
                  (lambda (x p)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (q)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (_list_33
                                                                                           '#f
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== x
                                                                                                          0)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== p
                                                                                                                        (_cons_31
                                                                                                                          'z
                                                                                                                          q))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((g x
                                                                                                         q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== p
                                                                                                                        (_cons_31
                                                                                                                          'g
                                                                                                                          q))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x p))))
               '()))
           (g ((lambda (table)
                  (lambda (x p)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (q)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (_list_33
                                                                                           '#f
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== x
                                                                                                          1)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== p
                                                                                                                        (_cons_31
                                                                                                                          'o
                                                                                                                          q))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((f x
                                                                                                         q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== p
                                                                                                                        (_cons_31
                                                                                                                          'f
                                                                                                                          q))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 x p))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((f 2 q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"fg2"
            string
            '(letrec ((f (tabled
                           (x p)
                           (exist (q)
                                  (conde ((== x 0) (== p `(z unquote q)))
                                         ((g x q) (== p `(g unquote q)))))))
                      (g (tabled
                           (x p)
                           (exist (q)
                                  (conde ((== x 1) (== p `(o unquote q)))
                                         ((f x q) (== p `(f unquote q))))))))
               (run* (q) (f 2 q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "fg3")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((f ((lambda (table)
                     (lambda (x p)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (q)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (_list_33
                                                                                              '#f
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== x
                                                                                                             0)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== p
                                                                                                                           (_cons_31
                                                                                                                             'z
                                                                                                                             q))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((g x
                                                                                                            q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== p
                                                                                                                           (_cons_31
                                                                                                                             'g
                                                                                                                             q))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))
                                                                                         s
                                                                                         sk)))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x p))))
                  '()))
              (g ((lambda (table)
                     (lambda (x p)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (q)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (_list_33
                                                                                              '#f
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== x
                                                                                                             1)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== p
                                                                                                                           (_cons_31
                                                                                                                             'o
                                                                                                                             q))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((f x
                                                                                                            q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((== p
                                                                                                                           (_cons_31
                                                                                                                             'f
                                                                                                                             q))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))
                                                                                         s
                                                                                         sk)))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 x p))))
                  '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((f 1 q)
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '((g o . _.0) (g f g o . _.0) (g f g f g o . _.0))
  (lambda (string . irr)
     (apply error
            '"fg3"
            string
            '(letrec ((f (tabled
                           (x p)
                           (exist (q)
                                  (conde ((== x 0) (== p `(z unquote q)))
                                         ((g x q) (== p `(g unquote q)))))))
                      (g (tabled
                           (x p)
                           (exist (q)
                                  (conde ((== x 1) (== p `(o unquote q)))
                                         ((f x q) (== p `(f unquote q))))))))
               (run+ (q) (f 1 q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "ab1")
(display "...")
(if #f #f)
(do-ftest
  (lambda ()
     (letrec ((b ((lambda (table)
                     (lambda (i o r)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((== i
                                                                                           (_cons_31
                                                                                             '0
                                                                                             o))
                                                                                       s
                                                                                       (lambda (s)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (lambda ()
                                                                                                    ((== r
                                                                                                         'z)
                                                                                                     s
                                                                                                     sk)))
                                                                                              s
                                                                                              sk))))))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (bo br ar)
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== r
                                                                                                             (_list_33
                                                                                                               'ba
                                                                                                               br
                                                                                                               ar))
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((b i
                                                                                                                          bo
                                                                                                                          br)
                                                                                                                       s
                                                                                                                       (lambda (s)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (s sk)
                                                                                                                                 (lambda ()
                                                                                                                                    ((a bo
                                                                                                                                        o
                                                                                                                                        ar)
                                                                                                                                     s
                                                                                                                                     sk)))
                                                                                                                              s
                                                                                                                              sk))))))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))
                                                                                              (make-var
                                                                                                s)
                                                                                              (make-var
                                                                                                s)
                                                                                              (make-var
                                                                                                s))))
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 i o r))))
                  '()))
              (a ((lambda (table)
                     (lambda (i o r)
                        ((lambda (argv)
                            (lambda (s sk)
                               ((lambda (key)
                                   (consume
                                     argv
                                     s
                                     sk
                                     ((lambda (tmp)
                                         (if tmp
                                           (cdr tmp)
                                           ((lambda (data)
                                               (begin
                                                 (data-queue-set!
                                                   data
                                                   (_list_33
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (_list_33
                                                                            '#f
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((a i
                                                                                          o
                                                                                          r)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((b i
                                                                                          o
                                                                                          r)
                                                                                       s
                                                                                       sk)))
                                                                                s
                                                                                sk))))
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk)))
                                                         s
                                                         (installing-sk
                                                           argv
                                                           data)))))
                                                 (set! table
                                                   (_cons_31
                                                     (_cons_31 key data)
                                                     table))
                                                 data))
                                            (make-data '() '() '()))))
                                      (assoc key table))))
                                ((reify reify-name) argv s))))
                         (_list_33 i o r))))
                  '())))
       ((lambda (n)
           (begin
             (unless
               ((lambda (x)
                   (if x
                     x
                     (if (integer? n)
                       (if (exact? n) (positive? n) #f)
                       #f)))
                (boolean? n))
               (error 'run "not an exact positive integer" n))
             ((if (number? n) (|take'| n) (if n take+ take*))
              (list ((lambda (s sk)
                        (lambda ()
                           ((lambda (q)
                               ((lambda (s sk)
                                   (lambda ()
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (i o r)
                                                 ((lambda (s sk)
                                                     (lambda ()
                                                        ((== q (_list_33 i o r))
                                                         s
                                                         (lambda (s)
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((b i o r)
                                                                       s
                                                                       sk)))
                                                                s
                                                                sk))))))
                                                  s
                                                  sk))
                                              (make-var s)
                                              (make-var s)
                                              (make-var s))))
                                       s
                                       (lambda (s)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (sk ((reify reify-name)
                                                             q
                                                             s)))
                                                     s
                                                     sk)))
                                              s
                                              sk))))))
                                s
                                sk))
                            (make-var s))))
                     empty-s
                     (lambda (a) (_cons_31 '#t a)))))))
        #t)))
  '(((0 . _.0) _.0 z))
  (lambda (string . irr)
     (apply error
            '"ab1"
            string
            '(letrec ((b (tabled
                           (i o r)
                           (conde ((== i `(0 unquote o)) (== r 'z))
                                  ((exist (bo br ar)
                                          (== r `(ba ,br ,ar))
                                          (b i bo br)
                                          (a bo o ar))))))
                      (a (tabled (i o r) (conde ((a i o r)) ((b i o r))))))
               (run+ (q)
                     (exist (i o r) (== q `(,i ,o ,r)) (b i o r))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "bobo0nt")
(display "...")
(if #f #f)
(do-test
  '(((0 . _.0) _.0) ((0 0 . _.0) (0 . _.0)))
  multiset-equal?
  (letrec ((b (lambda (i o)
                 (lambda (s sk)
                    (_list_33
                      '#f
                      (lambda ()
                         ((lambda (s sk)
                             (lambda () ((== i (_cons_31 '0 o)) s sk)))
                          s
                          sk))
                      (lambda ()
                         ((lambda (s sk)
                             (lambda ()
                                ((lambda (s sk)
                                    (lambda ()
                                       ((lambda (bo)
                                           ((lambda (s sk)
                                               (lambda ()
                                                  ((b i o)
                                                   s
                                                   (lambda (s)
                                                      (lambda ()
                                                         ((lambda (s sk)
                                                             (lambda ()
                                                                ((b o bo)
                                                                 s
                                                                 sk)))
                                                          s
                                                          sk))))))
                                            s
                                            sk))
                                        (make-var s))))
                                 s
                                 sk)))
                          s
                          sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (i o)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 i o))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((b i o)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     2))
  (lambda (string . irr)
     (apply error
            '"bobo0nt"
            string
            '(letrec ((b (lambda (i o)
                            (conde ((== i `(0 unquote o)))
                                   ((exist (bo) (b i o) (b o bo)))))))
               (run 2 (q) (exist (i o) (== q `(,i ,o)) (b i o))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "WARNING: SKIPPING ")
(display "bobo0")
(newline)
(if #f #f)
(skipped-tests "bobo0")
(display "Testing ")
(display "bio0")
(display "...")
(if #f #f)
(do-test
  '(((0 . _.0) _.0) ((0 0 . _.0) _.0))
  multiset-equal?
  (letrec ((b ((lambda (table)
                  (lambda (i o)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== i
                                                                                        (_cons_31
                                                                                          '0
                                                                                          o))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (bo)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((b i
                                                                                                         bo)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((b bo
                                                                                                                       o)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (i o)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 i o))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((b i o)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     2))
  (lambda (string . irr)
     (apply error
            '"bio0"
            string
            '(letrec ((b (tabled
                           (i o)
                           (conde ((== i `(0 unquote o)))
                                  ((exist (bo) (b i bo) (b bo o)))))))
               (run 2 (q) (exist (i o) (== q `(,i ,o)) (b i o))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "ab0")
(display "...")
(if #f #f)
(do-test
  '(((0 . _.0) _.0) ((0 0 . _.0) _.0))
  multiset-equal?
  (letrec ((b ((lambda (table)
                  (lambda (i o)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== i
                                                                                        (_cons_31
                                                                                          '0
                                                                                          o))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (bo)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((b i
                                                                                                         bo)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((a bo
                                                                                                                       o)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o))))
               '()))
           (a ((lambda (table)
                  (lambda (i o)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((a i
                                                                                       o)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((b i
                                                                                       o)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (i o)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 i o))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((b i o)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     2))
  (lambda (string . irr)
     (apply error
            '"ab0"
            string
            '(letrec ((b (tabled
                           (i o)
                           (conde ((== i `(0 unquote o)))
                                  ((exist (bo) (b i bo) (a bo o))))))
                      (a (tabled (i o) (conde ((a i o)) ((b i o))))))
               (run 2 (q) (exist (i o) (== q `(,i ,o)) (b i o))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "ab2")
(display "...")
(if #f #f)
(do-test
  '(((0 . _.0) _.0 z))
  multiset-equal?
  (letrec ((b ((lambda (table)
                  (lambda (i o r)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== i
                                                                                        (_cons_31
                                                                                          '0
                                                                                          o))
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== r
                                                                                                      'z)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (bo br ar)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== r
                                                                                                          (_list_33
                                                                                                            'ba
                                                                                                            br
                                                                                                            ar))
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((b i
                                                                                                                       bo
                                                                                                                       br)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((a bo
                                                                                                                                     o
                                                                                                                                     ar)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o r))))
               '()))
           (a ((lambda (table)
                  (lambda (i o r)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((a i
                                                                                       o
                                                                                       r)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((b i
                                                                                       o
                                                                                       r)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o r))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (i o r)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 i o r))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((b i o r)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     1))
  (lambda (string . irr)
     (apply error
            '"ab2"
            string
            '(letrec ((b (tabled
                           (i o r)
                           (conde ((== i `(0 unquote o)) (== r 'z))
                                  ((exist (bo br ar)
                                          (== r `(ba ,br ,ar))
                                          (b i bo br)
                                          (a bo o ar))))))
                      (a (tabled (i o r) (conde ((a i o r)) ((b i o r))))))
               (run 1
                    (q)
                    (exist (i o r) (== q `(,i ,o ,r)) (b i o r))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "ab3")
(display "...")
(if #f #f)
(do-test
  '(((0 0 . _.0) (0 . _.0) z))
  multiset-equal?
  (letrec ((b ((lambda (table)
                  (lambda (i o r)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== i
                                                                                        (_cons_31
                                                                                          '0
                                                                                          o))
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== r
                                                                                                      'z)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (bo br ar)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== r
                                                                                                          (_list_33
                                                                                                            'ba
                                                                                                            br
                                                                                                            ar))
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((b i
                                                                                                                       bo
                                                                                                                       br)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((a bo
                                                                                                                                     o
                                                                                                                                     ar)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o r))))
               '()))
           (a ((lambda (table)
                  (lambda (i o r)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((a i
                                                                                       o
                                                                                       r)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((b i
                                                                                       o
                                                                                       r)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 i o r))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (i o r __.0_)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((== q (_list_33 i o r))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((b i o r)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== q
                                                                                      (_cons_31
                                                                                        (_cons_31
                                                                                          '0
                                                                                          (_cons_31
                                                                                            '0
                                                                                            __.0_))
                                                                                        (_cons_31
                                                                                          (_cons_31
                                                                                            '0
                                                                                            __.0_)
                                                                                          '(z))))
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s)
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     1))
  (lambda (string . irr)
     (apply error
            '"ab3"
            string
            '(letrec ((b (tabled
                           (i o r)
                           (conde ((== i `(0 unquote o)) (== r 'z))
                                  ((exist (bo br ar)
                                          (== r `(ba ,br ,ar))
                                          (b i bo br)
                                          (a bo o ar))))))
                      (a (tabled (i o r) (conde ((a i o r)) ((b i o r))))))
               (run 1
                    (q)
                    (exist (i o r _.0)
                           (== q `(,i ,o ,r))
                           (b i o r)
                           (== q `((0 0 unquote _.0) (0 unquote _.0) z)))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "structural alwayso 2 non-tabled")
(display "...")
(if #f #f)
(do-test
  '(_.0 _.0)
  multiset-equal?
  (letrec ((alwayso
             (lambda (x)
                (lambda (s sk)
                   (_list_33
                     '#f
                     (lambda ()
                        ((lambda (s sk) (lambda () ((== #f #f) s sk)))
                         s
                         sk))
                     (lambda ()
                        ((lambda (s sk)
                            (lambda () ((alwayso (_list_33 x)) s sk)))
                         s
                         sk)))))))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((alwayso q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     2))
  (lambda (string . irr)
     (apply error
            '"structural alwayso 2 non-tabled"
            string
            '(letrec ((alwayso
                        (lambda (x)
                           (conde ((== #f #f)) ((alwayso `(,x)))))))
               (run 2 (q) (alwayso q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "structural alwayso 1")
(display "...")
(if #f #f)
(do-test
  '(_.0)
  multiset-equal?
  (letrec ((alwayso
             ((lambda (table)
                 (lambda (x)
                    ((lambda (argv)
                        (lambda (s sk)
                           ((lambda (key)
                               (consume
                                 argv
                                 s
                                 sk
                                 ((lambda (tmp)
                                     (if tmp
                                       (cdr tmp)
                                       ((lambda (data)
                                           (begin
                                             (data-queue-set!
                                               data
                                               (_list_33
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (_list_33
                                                                        '#f
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((== #f
                                                                                       #f)
                                                                                   s
                                                                                   sk)))
                                                                            s
                                                                            sk))
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((alwayso
                                                                                     (_list_33
                                                                                       x))
                                                                                   s
                                                                                   sk)))
                                                                            s
                                                                            sk))))
                                                                   s
                                                                   sk)))
                                                            s
                                                            sk)))
                                                     s
                                                     (installing-sk
                                                       argv
                                                       data)))))
                                             (set! table
                                               (_cons_31
                                                 (_cons_31 key data)
                                                 table))
                                             data))
                                        (make-data '() '() '()))))
                                  (assoc key table))))
                            ((reify reify-name) argv s))))
                     (_list_33 x))))
              '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((alwayso q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     1))
  (lambda (string . irr)
     (apply error
            '"structural alwayso 1"
            string
            '(letrec ((alwayso
                        (tabled
                          (x)
                          (conde ((== #f #f)) ((alwayso `(,x)))))))
               (run 1 (q) (alwayso q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "appendo gt 6")
(display "...")
(if #f #f)
(do-test
  '((() (cake with ice d t))
    ((cake) (with ice d t))
    ((cake with) (ice d t))
    ((cake with ice) (d t))
    ((cake with ice d) (t))
    ((cake with ice d t) ()))
  multiset-equal?
  (letrec ((appendo
             ((lambda (table)
                 (lambda (l s out)
                    ((lambda (argv)
                        (lambda (_s_62 sk)
                           ((lambda (key)
                               (consume
                                 argv
                                 _s_62
                                 sk
                                 ((lambda (tmp)
                                     (if tmp
                                       (cdr tmp)
                                       ((lambda (data)
                                           (begin
                                             (data-queue-set!
                                               data
                                               (_list_33
                                                 (lambda ()
                                                    ((lambda (_s_67 sk)
                                                        (lambda ()
                                                           ((lambda (_s_69 sk)
                                                               (lambda ()
                                                                  ((lambda (_s_71 sk)
                                                                      (_list_33
                                                                        '#f
                                                                        (lambda ()
                                                                           ((lambda (_s_73 sk)
                                                                               (lambda ()
                                                                                  ((== '()
                                                                                       l)
                                                                                   _s_73
                                                                                   (lambda (_s_75)
                                                                                      (lambda ()
                                                                                         ((lambda (_s_76 sk)
                                                                                             (lambda ()
                                                                                                ((== s
                                                                                                     out)
                                                                                                 _s_76
                                                                                                 sk)))
                                                                                          _s_75
                                                                                          sk))))))
                                                                            _s_71
                                                                            sk))
                                                                        (lambda ()
                                                                           ((lambda (_s_73 sk)
                                                                               (lambda ()
                                                                                  ((lambda (_s_75 sk)
                                                                                      (lambda ()
                                                                                         ((lambda (a d res)
                                                                                             ((lambda (_s_80 sk)
                                                                                                 (lambda ()
                                                                                                    ((== l
                                                                                                         (_cons_31
                                                                                                           a
                                                                                                           d))
                                                                                                     _s_80
                                                                                                     (lambda (_s_82)
                                                                                                        (lambda ()
                                                                                                           ((lambda (_s_83 sk)
                                                                                                               (lambda ()
                                                                                                                  ((appendo
                                                                                                                     d
                                                                                                                     s
                                                                                                                     res)
                                                                                                                   _s_83
                                                                                                                   (lambda (s)
                                                                                                                      (lambda ()
                                                                                                                         ((lambda (s sk)
                                                                                                                             (lambda ()
                                                                                                                                ((== out
                                                                                                                                     (_cons_31
                                                                                                                                       a
                                                                                                                                       res))
                                                                                                                                 s
                                                                                                                                 sk)))
                                                                                                                          s
                                                                                                                          sk))))))
                                                                                                            _s_82
                                                                                                            sk))))))
                                                                                              _s_75
                                                                                              sk))
                                                                                          (make-var
                                                                                            _s_75)
                                                                                          (make-var
                                                                                            _s_75)
                                                                                          (make-var
                                                                                            _s_75))))
                                                                                   _s_73
                                                                                   sk)))
                                                                            _s_71
                                                                            sk))))
                                                                   _s_69
                                                                   sk)))
                                                            _s_67
                                                            sk)))
                                                     _s_62
                                                     (installing-sk
                                                       argv
                                                       data)))))
                                             (set! table
                                               (_cons_31
                                                 (_cons_31 key data)
                                                 table))
                                             data))
                                        (make-data '() '() '()))))
                                  (assoc key table))))
                            ((reify reify-name) argv _s_62))))
                     (_list_33 l s out))))
              '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((appendo
                                                        x
                                                        y
                                                        '(cake with ice d t))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== q
                                                                        (_list_33
                                                                          x
                                                                          y))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     6))
  (lambda (string . irr)
     (apply error
            '"appendo gt 6"
            string
            '(letrec ((appendo
                        (tabled
                          (l s out)
                          (conde ((== '() l) (== s out))
                                 ((exist (a d res)
                                         (== l `(,a unquote d))
                                         (appendo d s res)
                                         (== out `(,a unquote res))))))))
               (run 6
                    (q)
                    (exist (x y)
                           (appendo x y '(cake with ice d t))
                           (== q `(,x ,y)))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "WARNING: SKIPPING ")
(display "appendo gt 7")
(newline)
(if #f #f)
(skipped-tests "appendo gt 7")
(display "Testing ")
(display "alwayso many answers")
(display "...")
(if #f #f)
(do-test
  '(()
    (())
    ((()))
    (((())))
    ((((()))))
    (((((())))))
    ((((((()))))))
    (((((((())))))))
    ((((((((()))))))))
    (((((((((()))))))))))
  multiset-equal?
  (letrec ((alwayso
             ((lambda (table)
                 (lambda (x)
                    ((lambda (argv)
                        (lambda (s sk)
                           ((lambda (key)
                               (consume
                                 argv
                                 s
                                 sk
                                 ((lambda (tmp)
                                     (if tmp
                                       (cdr tmp)
                                       ((lambda (data)
                                           (begin
                                             (data-queue-set!
                                               data
                                               (_list_33
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (_list_33
                                                                        '#f
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((== '()
                                                                                       x)
                                                                                   s
                                                                                   sk)))
                                                                            s
                                                                            sk))
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (y)
                                                                                             ((lambda (s sk)
                                                                                                 (lambda ()
                                                                                                    ((== (_list_33
                                                                                                           y)
                                                                                                         x)
                                                                                                     s
                                                                                                     (lambda (s)
                                                                                                        (lambda ()
                                                                                                           ((lambda (s sk)
                                                                                                               (lambda ()
                                                                                                                  ((alwayso
                                                                                                                     y)
                                                                                                                   s
                                                                                                                   sk)))
                                                                                                            s
                                                                                                            sk))))))
                                                                                              s
                                                                                              sk))
                                                                                          (make-var
                                                                                            s))))
                                                                                   s
                                                                                   sk)))
                                                                            s
                                                                            sk))))
                                                                   s
                                                                   sk)))
                                                            s
                                                            sk)))
                                                     s
                                                     (installing-sk
                                                       argv
                                                       data)))))
                                             (set! table
                                               (_cons_31
                                                 (_cons_31 key data)
                                                 table))
                                             data))
                                        (make-data '() '() '()))))
                                  (assoc key table))))
                            ((reify reify-name) argv s))))
                     (_list_33 x))))
              '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (q)
                            ((lambda (s sk)
                                (lambda ()
                                   ((alwayso q)
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          q
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     10))
  (lambda (string . irr)
     (apply error
            '"alwayso many answers"
            string
            '(letrec ((alwayso
                        (tabled
                          (x)
                          (conde ((== '() x))
                                 ((exist (y) (== `(,y) x) (alwayso y)))))))
               (run 10 (q) (alwayso q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "subsumption 1")
(display "...")
(if #f #f)
(do-test
  '((#t _.0) (#f _.0))
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (a b o)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (_list_33
                                                                         '#f
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== a
                                                                                        #t)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== a
                                                                                        #f)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((r b
                                                                                       a
                                                                                       o)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== o
                                                                                      (_list_33
                                                                                        a
                                                                                        b))
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 a b o))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (z)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda () ((r x y z) s sk)))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          z
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"subsumption 1"
            string
            '(letrec ((r (tabled
                           (a b o)
                           (conde ((== a #t)) ((== a #f)) ((r b a o)))
                           (== o `(,a ,b)))))
               (run* (z) (exist (x y) (r x y z))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "subsumption 2")
(display "...")
(if #f #f)
(do-test
  '((#t _.0) (#f _.0))
  multiset-equal?
  (letrec ((r ((lambda (table)
                  (lambda (a b o)
                     ((lambda (argv)
                         (lambda (s sk)
                            ((lambda (key)
                                (consume
                                  argv
                                  s
                                  sk
                                  ((lambda (tmp)
                                      (if tmp
                                        (cdr tmp)
                                        ((lambda (data)
                                            (begin
                                              (data-queue-set!
                                                data
                                                (_list_33
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== o
                                                                        (_list_33
                                                                          a
                                                                          b))
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (_list_33
                                                                                       '#f
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== a
                                                                                                      #t)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== a
                                                                                                      #f)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((r b
                                                                                                     a
                                                                                                     o)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk)))
                                                      s
                                                      (installing-sk
                                                        argv
                                                        data)))))
                                              (set! table
                                                (_cons_31
                                                  (_cons_31 key data)
                                                  table))
                                              data))
                                         (make-data '() '() '()))))
                                   (assoc key table))))
                             ((reify reify-name) argv s))))
                      (_list_33 a b o))))
               '())))
    ((lambda (n)
        (begin
          (unless
            ((lambda (x)
                (if x
                  x
                  (if (integer? n)
                    (if (exact? n) (positive? n) #f)
                    #f)))
             (boolean? n))
            (error 'run "not an exact positive integer" n))
          ((if (number? n) (|take'| n) (if n take+ take*))
           (list ((lambda (s sk)
                     (lambda ()
                        ((lambda (z)
                            ((lambda (s sk)
                                (lambda ()
                                   ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x y)
                                              ((lambda (s sk)
                                                  (lambda () ((r x y z) s sk)))
                                               s
                                               sk))
                                           (make-var s)
                                           (make-var s))))
                                    s
                                    (lambda (s)
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((lambda (s sk)
                                                     (sk ((reify reify-name)
                                                          z
                                                          s)))
                                                  s
                                                  sk)))
                                           s
                                           sk))))))
                             s
                             sk))
                         (make-var s))))
                  empty-s
                  (lambda (a) (_cons_31 '#t a)))))))
     #f))
  (lambda (string . irr)
     (apply error
            '"subsumption 2"
            string
            '(letrec ((r (tabled
                           (a b o)
                           (== o `(,a ,b))
                           (conde ((== a #t)) ((== a #f)) ((r b a o))))))
               (run* (z) (exist (x y) (r x y z))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-1")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #f #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-1"
            string
            '(run* (q) (== #f #t))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-2")
(display "...")
(if #f #f)
(do-test
  '(#t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t q)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-2"
            string
            '(run* (q) (== #t q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-3")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #f #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #t q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-3"
            string
            '(run* (q) (== #f #t) (== #t q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-4")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #t q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-4"
            string
            '(run* (q) (== #t #t) (== #t q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-5")
(display "...")
(if #f #f)
(do-test
  '(#t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #t q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-5"
            string
            '(run* (q) (== #t #t) (== #t q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-6")
(display "...")
(if #f #f)
(do-test
  (list 'corn)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== 'corn r)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      r
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-6"
            string
            '(run* (r) (== #t #t) (== 'corn r))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-7")
(display "...")
(if #f #f)
(do-test
  '(corn)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== 'corn r)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      r
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-7"
            string
            '(run* (r) (== #t #t) (== 'corn r))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-8")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #f #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== 'corn r)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      r
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-8"
            string
            '(run* (r) (== #f #t) (== 'corn r))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-9")
(display "...")
(if #f #f)
(do-test
  '(#f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #f q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-9"
            string
            '(run* (q) (== #t #t) (== #f q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-10")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (x) (== #t x)) #f)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-10"
            string
            '(run* (x) (let ((x #f)) (== #t x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-11")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== #t x)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #t q)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-11"
            string
            '(run* (q) (exist (x) (== #t x) (== #t q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-12")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== x #t)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #t q)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-12"
            string
            '(run* (q) (exist (x) (== x #t) (== #t q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-13")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== x #t)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== q #t)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-13"
            string
            '(run* (q) (exist (x) (== x #t) (== q #t)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-14")
(display "...")
(if #f #f)
(do-test
  (list '_.0)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #t #t)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-14"
            string
            '(run* (x) (== #t #t))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-15")
(display "...")
(if #f #f)
(do-test
  '(_.0)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (x)
                                      (lambda (s sk)
                                         (lambda ()
                                            ((lambda (x)
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((== #t x) s sk)))
                                                 s
                                                 sk))
                                             (make-var s)))))
                                   #f)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-15"
            string
            '(run* (x) (let ((x #f)) (exist (x) (== #t x))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-16")
(display "...")
(if #f #f)
(do-test
  (list '(_.0 _.1))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== (cons x (cons y '())) r)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-16"
            string
            '(run* (r)
                   (exist (x y) (== (cons x (cons y '())) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-17")
(display "...")
(if #f #f)
(do-test
  (list '(_.0 _.1))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (_s_59)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (t u)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== (cons t (cons u '()))
                                                        _s_59)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        _s_59
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-17"
            string
            '(run* (s)
                   (exist (t u) (== (cons t (cons u '())) s)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-18")
(display "...")
(if #f #f)
(do-test
  (list '(_.0 _.1 _.0))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   (((lambda (y)
                                                        (lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (x)
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== (cons y
                                                                                    (cons x
                                                                                          (cons y
                                                                                                '())))
                                                                              r)
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))
                                                               (make-var s)))))
                                                     x)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-18"
            string
            '(run* (r)
                   (exist (x)
                          (let ((y x))
                            (exist (x) (== (cons y (cons x (cons y '()))) r)))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-19")
(display "...")
(if #f #f)
(do-test
  (list '(_.0 _.1 _.0))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   (((lambda (y)
                                                        (lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (x)
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== (cons x
                                                                                    (cons y
                                                                                          (cons x
                                                                                                '())))
                                                                              r)
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))
                                                               (make-var s)))))
                                                     x)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-19"
            string
            '(run* (r)
                   (exist (x)
                          (let ((y x))
                            (exist (x) (== (cons x (cons y (cons x '()))) r)))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-20")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #f q)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #t q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-20"
            string
            '(run* (q) (== #f q) (== #t q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-21")
(display "...")
(if #f #f)
(do-test
  '(#f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((== #f q)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((== #f q)
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      q
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-21"
            string
            '(run* (q) (== #f q) (== #f q))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-22")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (x) (== #t x)) q)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-22"
            string
            '(run* (q) (let ((x q)) (== #t x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-23")
(display "...")
(if #f #f)
(do-test
  (list '_.0)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda () ((== x r) s sk)))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-23"
            string
            '(run* (r) (exist (x) (== x r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-24")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== #t x)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== x q)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-24"
            string
            '(run* (q) (exist (x) (== #t x) (== x q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-25")
(display "...")
(if #f #f)
(do-test
  (list #t)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== x q)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #t x)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-25"
            string
            '(run* (q) (exist (x) (== x q) (== #t x)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-26")
(display "...")
(if #f #f)
(do-test
  (list #f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== (eq? x q) q) s sk)))
                                             s
                                             sk))
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-26"
            string
            '(run* (q) (exist (x) (== (eq? x q) q)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-27")
(display "...")
(if #f #f)
(do-test
  (list #f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (x)
                                      (lambda (s sk)
                                         (lambda ()
                                            ((lambda (q)
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((== (eq? x q) x) s sk)))
                                                 s
                                                 sk))
                                             (make-var s)))))
                                   q)
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-27"
            string
            '(run* (q)
                   (let ((x q)) (exist (q) (== (eq? x q) x))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc13.tex-fail1")
(display "...")
(if #f #f)
(do-test
  '()
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== #t #f)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== #f #f)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc13.tex-fail1"
            string
            '(run* (q)
                   (conde ((== #t #f) (== #f #f))
                          ((== #f #f) (== #t #f))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc13.tex-succeed1")
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (not (null? ((lambda (n)
                  (begin
                    (unless
                      ((lambda (x)
                          (if x
                            x
                            (if (integer? n)
                              (if (exact? n) (positive? n) #f)
                              #f)))
                       (boolean? n))
                      (error 'run "not an exact positive integer" n))
                    ((if (number? n) (|take'| n) (if n take+ take*))
                     (list ((lambda (s sk)
                               (lambda ()
                                  ((lambda (q)
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (_list_33
                                                   '#f
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((== #t #f)
                                                              s
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((== #t
                                                                                #f)
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       s
                                                       sk))
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((== #t #t)
                                                              s
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((== #t
                                                                                #t)
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       s
                                                       sk))))
                                              s
                                              (lambda (s)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (sk ((reify reify-name)
                                                                    q
                                                                    s)))
                                                            s
                                                            sk)))
                                                     s
                                                     sk))))))
                                       s
                                       sk))
                                   (make-var s))))
                            empty-s
                            (lambda (a) (_cons_31 '#t a)))))))
               #f)))
  (lambda (string . irr)
     (apply error
            '"testc13.tex-succeed1"
            string
            '(not (null? (run* (q)
                               (conde ((== #t #f) (== #t #f))
                                      ((== #t #t) (== #t #t))))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc13.tex-succeed2")
(display "...")
(if #f #f)
(do-test
  #t
  equal?
  (not (null? ((lambda (n)
                  (begin
                    (unless
                      ((lambda (x)
                          (if x
                            x
                            (if (integer? n)
                              (if (exact? n) (positive? n) #f)
                              #f)))
                       (boolean? n))
                      (error 'run "not an exact positive integer" n))
                    ((if (number? n) (|take'| n) (if n take+ take*))
                     (list ((lambda (s sk)
                               (lambda ()
                                  ((lambda (q)
                                      ((lambda (s sk)
                                          (lambda ()
                                             ((lambda (s sk)
                                                 (_list_33
                                                   '#f
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((== #t #t)
                                                              s
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((== #t
                                                                                #t)
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       s
                                                       sk))
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((== #t #t)
                                                              s
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((== #t
                                                                                #f)
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       s
                                                       sk))))
                                              s
                                              (lambda (s)
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (sk ((reify reify-name)
                                                                    q
                                                                    s)))
                                                            s
                                                            sk)))
                                                     s
                                                     sk))))))
                                       s
                                       sk))
                                   (make-var s))))
                            empty-s
                            (lambda (a) (_cons_31 '#t a)))))))
               #f)))
  (lambda (string . irr)
     (apply error
            '"testc13.tex-succeed2"
            string
            '(not (null? (run* (q)
                               (conde ((== #t #t) (== #t #t))
                                      ((== #t #t) (== #t #f))))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-30")
(display "...")
(if #f #f)
(do-test
  '(olive oil)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'olive x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #t)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'oil x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #t)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-30"
            string
            '(run* (x)
                   (conde ((== 'olive x) (== #t #t))
                          ((== 'oil x) (== #t #t))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-31")
(display "...")
(if #f #f)
(do-test
  '(olive)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'olive x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #t)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'oil x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #t)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   1)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-31"
            string
            '(run 1
                  (x)
                  (conde ((== 'olive x) (== #t #t))
                         ((== 'oil x) (== #t #t))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-32")
(display "...")
(if #f #f)
(do-test
  '(olive _.0 oil)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'virgin x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'olive x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== #f #f)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'oil x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-32"
            string
            '(run* (x)
                   (conde ((== 'virgin x) (== #t #f))
                          ((== 'olive x) (== #f #f))
                          ((== #f #f) (== #f #f))
                          ((== 'oil x) (== #f #f))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc13.tex-conde1")
(display "...")
(if #f #f)
(do-test
  '(olive _.0 oil)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'olive x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== #f #f)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'oil x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc13.tex-conde1"
            string
            '(run* (x)
                   (conde ((== 'olive x) (== #f #f))
                          ((== #f #f) (== #f #f))
                          ((== 'oil x) (== #f #f))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-33")
(display "...")
(if #f #f)
(do-test
  '(extra olive)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (x)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (_list_33
                                       '#f
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'extra x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'virgin x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #t #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'olive x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))
                                       (lambda ()
                                          ((lambda (s sk)
                                              (lambda ()
                                                 ((== 'oil x)
                                                  s
                                                  (lambda (s)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((== #f #f)
                                                                s
                                                                sk)))
                                                         s
                                                         sk))))))
                                           s
                                           sk))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        x
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   2)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-33"
            string
            '(run 2
                  (x)
                  (conde ((== 'extra x) (== #f #f))
                         ((== 'virgin x) (== #t #f))
                         ((== 'olive x) (== #f #f))
                         ((== 'oil x) (== #f #f))))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-34")
(display "...")
(if #f #f)
(do-test
  (list '(split pea))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== 'split x)
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== 'pea y)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== (cons x
                                                                                          (cons y
                                                                                                '()))
                                                                                    r)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-34"
            string
            '(run* (r)
                   (exist (x y)
                          (== 'split x)
                          (== 'pea y)
                          (== (cons x (cons y '())) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-35")
(display "...")
(if #f #f)
(do-test
  '((split pea) (navy bean))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (_list_33
                                                         '#f
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== 'split
                                                                        x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'pea
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== 'navy x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'bean
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== (cons x
                                                                            (cons y
                                                                                  '()))
                                                                      r)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-35"
            string
            '(run* (r)
                   (exist (x y)
                          (conde ((== 'split x) (== 'pea y))
                                 ((== 'navy x) (== 'bean y)))
                          (== (cons x (cons y '())) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-36")
(display "...")
(if #f #f)
(do-test
  '((split pea soup) (navy bean soup))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (_list_33
                                                         '#f
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== 'split
                                                                        x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'pea
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== 'navy x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'bean
                                                                                      y)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== (cons x
                                                                            (cons y
                                                                                  (cons 'soup
                                                                                        '())))
                                                                      r)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-36"
            string
            '(run* (r)
                   (exist (x y)
                          (conde ((== 'split x) (== 'pea y))
                                 ((== 'navy x) (== 'bean y)))
                          (== (cons x (cons y (cons 'soup '()))) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
((lambda (teacupo)
    (begin
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc11.tex-37")
            (begin (display "...") (if #f #f))))
        (do-test
          '(tea cup)
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (x)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((teacupo x)
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (sk ((reify reify-name)
                                                                x
                                                                s)))
                                                        s
                                                        sk)))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc11.tex-37"
                    string
                    '(run* (x) (teacupo x))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc11.tex-38")
            (begin (display "...") (if #f #f))))
        (do-test
          '((#f #t) (tea #t) (cup #t))
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (r)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (x y)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (_list_33
                                                                 '#f
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((teacupo
                                                                              x)
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              y)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== #f
                                                                                                            #f)
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((== #f
                                                                                x)
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              y)
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))))
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== (cons x
                                                                                    (cons y
                                                                                          '()))
                                                                              r)
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s)
                                                 (make-var s))))
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (sk ((reify reify-name)
                                                                r
                                                                s)))
                                                        s
                                                        sk)))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc11.tex-38"
                    string
                    '(run* (r)
                           (exist (x y)
                                  (conde ((teacupo x) (== #t y) (== #f #f))
                                         ((== #f x) (== #t y)))
                                  (== (cons x (cons y '())) r)))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))))
 (lambda (x)
    (lambda (s sk)
       (_list_33
         '#f
         (lambda ()
            ((lambda (s sk)
                (lambda ()
                   ((== 'tea x)
                    s
                    (lambda (s)
                       (lambda ()
                          ((lambda (s sk) (lambda () ((== #f #f) s sk)))
                           s
                           sk))))))
             s
             sk))
         (lambda ()
            ((lambda (s sk)
                (lambda ()
                   ((== 'cup x)
                    s
                    (lambda (s)
                       (lambda ()
                          ((lambda (s sk) (lambda () ((== #f #f) s sk)))
                           s
                           sk))))))
             s
             sk))))))
(display "Testing ")
(display "testc11.tex-39")
(display "...")
(if #f #f)
(do-test
  '((_.0 _.1) (_.0 _.1))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y z)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (_list_33
                                                         '#f
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== y x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== z
                                                                                                        x)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (x)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== y
                                                                                          x)
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== z
                                                                                      x)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== (cons y
                                                                            (cons z
                                                                                  '()))
                                                                      r)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-39"
            string
            '(run* (r)
                   (exist (x y z)
                          (conde ((== y x) (exist (x) (== z x)))
                                 ((exist (x) (== y x)) (== z x)))
                          (== (cons y (cons z '())) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-40")
(display "...")
(if #f #f)
(do-test
  '((#f _.0) (_.0 #f))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (x y z)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((lambda (s sk)
                                                       (_list_33
                                                         '#f
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== y x)
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== z
                                                                                                        x)
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (x)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== y
                                                                                          x)
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    s
                                                                    (lambda (s)
                                                                       (lambda ()
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== z
                                                                                      x)
                                                                                  s
                                                                                  sk)))
                                                                           s
                                                                           sk))))))
                                                             s
                                                             sk))))
                                                    s
                                                    (lambda (s)
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #f x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== (cons y
                                                                                          (cons z
                                                                                                '()))
                                                                                    r)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))))))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-40"
            string
            '(run* (r)
                   (exist (x y z)
                          (conde ((== y x) (exist (x) (== z x)))
                                 ((exist (x) (== y x)) (== z x)))
                          (== #f x)
                          (== (cons y (cons z '())) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-41")
(display "...")
(if #f #f)
(do-test
  '(#f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (a b) b) (== #t q) (== #f q))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-41"
            string
            '(run* (q) (let ((a (== #t q)) (b (== #f q))) b))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc11.tex-42")
(display "...")
(if #f #f)
(do-test
  '(#f)
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (q)
                          ((lambda (s sk)
                              (lambda ()
                                 (((lambda (a b c) b)
                                   (== #t q)
                                   (lambda (s sk)
                                      (lambda ()
                                         ((lambda (x)
                                             ((lambda (s sk)
                                                 (lambda ()
                                                    ((== x q)
                                                     s
                                                     (lambda (s)
                                                        (lambda ()
                                                           ((lambda (s sk)
                                                               (lambda ()
                                                                  ((== #f x)
                                                                   s
                                                                   sk)))
                                                            s
                                                            sk))))))
                                              s
                                              sk))
                                          (make-var s))))
                                   (lambda (s sk)
                                      (_list_33
                                        '#f
                                        (lambda ()
                                           ((lambda (s sk)
                                               (lambda ()
                                                  ((== #t q)
                                                   s
                                                   (lambda (s)
                                                      (lambda ()
                                                         ((lambda (s sk)
                                                             (lambda ()
                                                                ((== #f #f)
                                                                 s
                                                                 sk)))
                                                          s
                                                          sk))))))
                                            s
                                            sk))
                                        (lambda ()
                                           ((lambda (s sk)
                                               (lambda ()
                                                  ((== #f #f)
                                                   s
                                                   (lambda (s)
                                                      (lambda ()
                                                         ((lambda (s sk)
                                                             (lambda ()
                                                                ((== #f q)
                                                                 s
                                                                 sk)))
                                                          s
                                                          sk))))))
                                            s
                                            sk)))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        q
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc11.tex-42"
            string
            '(run* (q)
                   (let ((a (== #t q))
                         (b (exist (x) (== x q) (== #f x)))
                         (c (conde ((== #t q) (== #f #f))
                                   ((== #f #f) (== #f q)))))
                     b))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc12.tex-2")
(display "...")
(if #f #f)
(do-test
  (list '(_.0 _.1))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (y x)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== (_list_33 x y) r)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc12.tex-2"
            string
            '(run* (r) (exist (y x) (== `(,x ,y) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
(display "Testing ")
(display "testc12.tex-3")
(display "...")
(if #f #f)
(do-test
  '((_.0 _.1))
  multiset-equal?
  ((lambda (n)
      (begin
        (unless
          ((lambda (x)
              (if x
                x
                (if (integer? n)
                  (if (exact? n) (positive? n) #f)
                  #f)))
           (boolean? n))
          (error 'run "not an exact positive integer" n))
        ((if (number? n) (|take'| n) (if n take+ take*))
         (list ((lambda (s sk)
                   (lambda ()
                      ((lambda (r)
                          ((lambda (s sk)
                              (lambda ()
                                 ((lambda (s sk)
                                     (lambda ()
                                        ((lambda (v w)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((== ((lambda (x y)
                                                            (_list_33 x y))
                                                         v
                                                         w)
                                                        r)
                                                    s
                                                    sk)))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))
                                  s
                                  (lambda (s)
                                     (lambda ()
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (sk ((reify reify-name)
                                                        r
                                                        s)))
                                                s
                                                sk)))
                                         s
                                         sk))))))
                           s
                           sk))
                       (make-var s))))
                empty-s
                (lambda (a) (_cons_31 '#t a)))))))
   #f)
  (lambda (string . irr)
     (apply error
            '"testc12.tex-3"
            string
            '(run* (r)
                   (exist (v w) (== (let ((x v) (y w)) `(,x ,y)) r)))
            irr)))
(display " done")
(newline)
(if #f #f)
((lambda (caro)
    (begin
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-6")
            (begin (display "...") (if #f #f))))
        (do-test
          (list 'a)
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (r)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((caro '(a c o r n) r)
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (sk ((reify reify-name)
                                                                r
                                                                s)))
                                                        s
                                                        sk)))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-6"
                    string
                    '(run* (r) (caro `(a c o r n) r))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-8")
            (begin (display "...") (if #f #f))))
        (do-test
          (list #t)
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (q)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((caro '(a c o r n) 'a)
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((== #t q)
                                                        s
                                                        (lambda (s)
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((lambda (s sk)
                                                                         (sk ((reify reify-name)
                                                                              q
                                                                              s)))
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk))))))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-8"
                    string
                    '(run* (q) (caro `(a c o r n) 'a) (== #t q))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-10")
            (begin (display "...") (if #f #f))))
        (do-test
          (list 'pear)
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (r)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (x y)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((caro (_list_33 r y)
                                                                  x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 'pear
                                                                              x)
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s)
                                                 (make-var s))))
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (sk ((reify reify-name)
                                                                r
                                                                s)))
                                                        s
                                                        sk)))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-10"
                    string
                    '(run* (r)
                           (exist (x y) (caro `(,r ,y) x) (== 'pear x)))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-11")
            (begin (display "...") (if #f #f))))
        (do-test
          '(grape a)
          multiset-equal?
          (cons (car '(grape raisin pear))
                (car '((a) (b) (c))))
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-11"
                    string
                    '(cons (car `(grape raisin pear))
                           (car `((a) (b) (c))))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-12")
            (begin (display "...") (if #f #f))))
        (do-test
          (list '(grape a))
          multiset-equal?
          ((lambda (n)
              (begin
                (unless
                  ((lambda (x)
                      (if x
                        x
                        (if (integer? n)
                          (if (exact? n) (positive? n) #f)
                          #f)))
                   (boolean? n))
                  (error 'run "not an exact positive integer" n))
                ((if (number? n) (|take'| n) (if n take+ take*))
                 (list ((lambda (s sk)
                           (lambda ()
                              ((lambda (r)
                                  ((lambda (s sk)
                                      (lambda ()
                                         ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (x y)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((caro '(grape raisin
                                                                          pear)
                                                                  x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((caro '((a)
                                                                                  (b)
                                                                                  (c))
                                                                                y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== (cons x
                                                                                                  y)
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s)
                                                 (make-var s))))
                                          s
                                          (lambda (s)
                                             (lambda ()
                                                ((lambda (s sk)
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (sk ((reify reify-name)
                                                                r
                                                                s)))
                                                        s
                                                        sk)))
                                                 s
                                                 sk))))))
                                   s
                                   sk))
                               (make-var s))))
                        empty-s
                        (lambda (a) (_cons_31 '#t a)))))))
           #f)
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-12"
                    string
                    '(run* (r)
                           (exist (x y)
                                  (caro `(grape raisin pear) x)
                                  (caro `((a) (b) (c)) y)
                                  (== (cons x y) r)))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      (begin
        (begin
          (display "Testing ")
          (begin
            (display "testc12.tex-13")
            (begin (display "...") (if #f #f))))
        (do-test
          '(raisin pear)
          multiset-equal?
          (cdr '(grape raisin pear))
          (lambda (string . irr)
             (apply error
                    '"testc12.tex-13"
                    string
                    '(cdr `(grape raisin pear))
                    irr)))
        (begin
          (display " done")
          (begin (newline) (if #f #f))))
      ((lambda (cdro)
          (begin
            (begin
              (begin
                (display "Testing ")
                (begin
                  (display "testc12.tex-15")
                  (begin (display "...") (if #f #f))))
              (do-test
                (list 'c)
                multiset-equal?
                ((lambda (n)
                    (begin
                      (unless
                        ((lambda (x)
                            (if x
                              x
                              (if (integer? n)
                                (if (exact? n) (positive? n) #f)
                                #f)))
                         (boolean? n))
                        (error 'run "not an exact positive integer" n))
                      ((if (number? n) (|take'| n) (if n take+ take*))
                       (list ((lambda (s sk)
                                 (lambda ()
                                    ((lambda (r)
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (v)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((cdro '(a c
                                                                            o
                                                                            r
                                                                            n)
                                                                        v)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((caro v
                                                                                      r)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s))))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      r
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))
                                     (make-var s))))
                              empty-s
                              (lambda (a) (_cons_31 '#t a)))))))
                 #f)
                (lambda (string . irr)
                   (apply error
                          '"testc12.tex-15"
                          string
                          '(run* (r)
                                 (exist (v) (cdro `(a c o r n) v) (caro v r)))
                          irr)))
              (begin
                (display " done")
                (begin (newline) (if #f #f))))
            (begin
              (begin
                (display "Testing ")
                (begin
                  (display "testc12.tex-17")
                  (begin (display "...") (if #f #f))))
              (do-test
                (list '((raisin pear) a))
                multiset-equal?
                ((lambda (n)
                    (begin
                      (unless
                        ((lambda (x)
                            (if x
                              x
                              (if (integer? n)
                                (if (exact? n) (positive? n) #f)
                                #f)))
                         (boolean? n))
                        (error 'run "not an exact positive integer" n))
                      ((if (number? n) (|take'| n) (if n take+ take*))
                       (list ((lambda (s sk)
                                 (lambda ()
                                    ((lambda (r)
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (x y)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((cdro '(grape raisin
                                                                                pear)
                                                                        x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((caro '((a)
                                                                                        (b)
                                                                                        (c))
                                                                                      y)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((== (cons x
                                                                                                        y)
                                                                                                  r)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s)
                                                       (make-var s))))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      r
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))
                                     (make-var s))))
                              empty-s
                              (lambda (a) (_cons_31 '#t a)))))))
                 #f)
                (lambda (string . irr)
                   (apply error
                          '"testc12.tex-17"
                          string
                          '(run* (r)
                                 (exist (x y)
                                        (cdro `(grape raisin pear) x)
                                        (caro `((a) (b) (c)) y)
                                        (== (cons x y) r)))
                          irr)))
              (begin
                (display " done")
                (begin (newline) (if #f #f))))
            (begin
              (begin
                (display "Testing ")
                (begin
                  (display "testc12.tex-18")
                  (begin (display "...") (if #f #f))))
              (do-test
                (list #t)
                multiset-equal?
                ((lambda (n)
                    (begin
                      (unless
                        ((lambda (x)
                            (if x
                              x
                              (if (integer? n)
                                (if (exact? n) (positive? n) #f)
                                #f)))
                         (boolean? n))
                        (error 'run "not an exact positive integer" n))
                      ((if (number? n) (|take'| n) (if n take+ take*))
                       (list ((lambda (s sk)
                                 (lambda ()
                                    ((lambda (q)
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((cdro '(a c o r n) '(c o r n))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((== #t q)
                                                              s
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (sk ((reify reify-name)
                                                                                    q
                                                                                    s)))
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       s
                                                       sk))))))
                                         s
                                         sk))
                                     (make-var s))))
                              empty-s
                              (lambda (a) (_cons_31 '#t a)))))))
                 #f)
                (lambda (string . irr)
                   (apply error
                          '"testc12.tex-18"
                          string
                          '(run* (q)
                                 (cdro '(a c o r n) '(c o r n))
                                 (== #t q))
                          irr)))
              (begin
                (display " done")
                (begin (newline) (if #f #f))))
            (begin
              (begin
                (display "Testing ")
                (begin
                  (display "testc12.tex-20")
                  (begin (display "...") (if #f #f))))
              (do-test
                (list 'o)
                multiset-equal?
                ((lambda (n)
                    (begin
                      (unless
                        ((lambda (x)
                            (if x
                              x
                              (if (integer? n)
                                (if (exact? n) (positive? n) #f)
                                #f)))
                         (boolean? n))
                        (error 'run "not an exact positive integer" n))
                      ((if (number? n) (|take'| n) (if n take+ take*))
                       (list ((lambda (s sk)
                                 (lambda ()
                                    ((lambda (x)
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((cdro '(c o r n)
                                                      (_cons_31 x '(r n)))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      x
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))
                                     (make-var s))))
                              empty-s
                              (lambda (a) (_cons_31 '#t a)))))))
                 #f)
                (lambda (string . irr)
                   (apply error
                          '"testc12.tex-20"
                          string
                          '(run* (x) (cdro '(c o r n) `(,x r n)))
                          irr)))
              (begin
                (display " done")
                (begin (newline) (if #f #f))))
            (begin
              (begin
                (display "Testing ")
                (begin
                  (display "testc12.tex-22")
                  (begin (display "...") (if #f #f))))
              (do-test
                (list '(a c o r n))
                multiset-equal?
                ((lambda (n)
                    (begin
                      (unless
                        ((lambda (x)
                            (if x
                              x
                              (if (integer? n)
                                (if (exact? n) (positive? n) #f)
                                #f)))
                         (boolean? n))
                        (error 'run "not an exact positive integer" n))
                      ((if (number? n) (|take'| n) (if n take+ take*))
                       (list ((lambda (s sk)
                                 (lambda ()
                                    ((lambda (l)
                                        ((lambda (s sk)
                                            (lambda ()
                                               ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (x)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((cdro l
                                                                        '(c o
                                                                            r
                                                                            n))
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((caro l
                                                                                      x)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((== 'a
                                                                                                  x)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s))))
                                                s
                                                (lambda (s)
                                                   (lambda ()
                                                      ((lambda (s sk)
                                                          (lambda ()
                                                             ((lambda (s sk)
                                                                 (sk ((reify reify-name)
                                                                      l
                                                                      s)))
                                                              s
                                                              sk)))
                                                       s
                                                       sk))))))
                                         s
                                         sk))
                                     (make-var s))))
                              empty-s
                              (lambda (a) (_cons_31 '#t a)))))))
                 #f)
                (lambda (string . irr)
                   (apply error
                          '"testc12.tex-22"
                          string
                          '(run* (l)
                                 (exist (x)
                                        (cdro l '(c o r n))
                                        (caro l x)
                                        (== 'a x)))
                          irr)))
              (begin
                (display " done")
                (begin (newline) (if #f #f))))
            ((lambda (conso)
                (begin
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-23")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list '((a b c) d |e|))
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (l)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((conso '(a b c)
                                                             '(d |e|)
                                                             l)
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            l
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-23"
                                string
                                '(run* (l) (conso '(a b c) '(d |e|) l))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-24")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list 'd)
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((conso x
                                                             '(a b c)
                                                             '(d a b c))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            x
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-24"
                                string
                                '(run* (x) (conso x '(a b c) '(d a b c)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-26")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list '(|e| a d c))
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (r)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (x y z)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((== (_list_33
                                                                              '|e|
                                                                              'a
                                                                              'd
                                                                              x)
                                                                            r)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((conso y
                                                                                             (_cons_31
                                                                                               'a
                                                                                               (_cons_31
                                                                                                 z
                                                                                                 '(c)))
                                                                                             r)
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s)
                                                             (make-var s)
                                                             (make-var s))))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            r
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-26"
                                string
                                '(run* (r)
                                       (exist (x y z)
                                              (== `(|e| a d ,x) r)
                                              (conso y `(a ,z c) r)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-27")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list 'd)
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (x)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((conso x
                                                             (_cons_31
                                                               'a
                                                               (_cons_31
                                                                 x
                                                                 '(c)))
                                                             (_cons_31
                                                               'd
                                                               (_cons_31
                                                                 'a
                                                                 (_cons_31
                                                                   x
                                                                   '(c)))))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            x
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-27"
                                string
                                '(run* (x) (conso x `(a ,x c) `(d a ,x c)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-29")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list '(d a d c))
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (l)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (x)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((== (_cons_31
                                                                              'd
                                                                              (_cons_31
                                                                                'a
                                                                                (_cons_31
                                                                                  x
                                                                                  '(c))))
                                                                            l)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((conso x
                                                                                             (_cons_31
                                                                                               'a
                                                                                               (_cons_31
                                                                                                 x
                                                                                                 '(c)))
                                                                                             l)
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            l
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-29"
                                string
                                '(run* (l)
                                       (exist (x)
                                              (== `(d a ,x c) l)
                                              (conso x `(a ,x c) l)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-30")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list '(d a d c))
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (l)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (x)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((conso x
                                                                               (_cons_31
                                                                                 'a
                                                                                 (_cons_31
                                                                                   x
                                                                                   '(c)))
                                                                               l)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== (_cons_31
                                                                                            'd
                                                                                            (_cons_31
                                                                                              'a
                                                                                              (_cons_31
                                                                                                x
                                                                                                '(c))))
                                                                                          l)
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            l
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-30"
                                string
                                '(run* (l)
                                       (exist (x)
                                              (conso x `(a ,x c) l)
                                              (== `(d a ,x c) l)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  (begin
                    (begin
                      (display "Testing ")
                      (begin
                        (display "testc12.tex-31")
                        (begin (display "...") (if #f #f))))
                    (do-test
                      (list '(b |e| a n s))
                      multiset-equal?
                      ((lambda (n)
                          (begin
                            (unless
                              ((lambda (x)
                                  (if x
                                    x
                                    (if (integer? n)
                                      (if (exact? n) (positive? n) #f)
                                      #f)))
                               (boolean? n))
                              (error 'run "not an exact positive integer" n))
                            ((if (number? n) (|take'| n) (if n take+ take*))
                             (list ((lambda (s sk)
                                       (lambda ()
                                          ((lambda (l)
                                              ((lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (d x y w _s_71)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((conso w
                                                                               '(a n
                                                                                   s)
                                                                               _s_71)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((cdro l
                                                                                            _s_71)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((caro l
                                                                                                          x)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== 'b
                                                                                                                      x)
                                                                                                                  s
                                                                                                                  (lambda (s)
                                                                                                                     (lambda ()
                                                                                                                        ((lambda (s sk)
                                                                                                                            (lambda ()
                                                                                                                               ((cdro l
                                                                                                                                      d)
                                                                                                                                s
                                                                                                                                (lambda (s)
                                                                                                                                   (lambda ()
                                                                                                                                      ((lambda (s sk)
                                                                                                                                          (lambda ()
                                                                                                                                             ((caro d
                                                                                                                                                    y)
                                                                                                                                              s
                                                                                                                                              (lambda (s)
                                                                                                                                                 (lambda ()
                                                                                                                                                    ((lambda (s sk)
                                                                                                                                                        (lambda ()
                                                                                                                                                           ((== '|e|
                                                                                                                                                                y)
                                                                                                                                                            s
                                                                                                                                                            sk)))
                                                                                                                                                     s
                                                                                                                                                     sk))))))
                                                                                                                                       s
                                                                                                                                       sk))))))
                                                                                                                         s
                                                                                                                         sk))))))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s)
                                                             (make-var s)
                                                             (make-var s)
                                                             (make-var s)
                                                             (make-var s))))
                                                      s
                                                      (lambda (s)
                                                         (lambda ()
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (s sk)
                                                                       (sk ((reify reify-name)
                                                                            l
                                                                            s)))
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))))))
                                               s
                                               sk))
                                           (make-var s))))
                                    empty-s
                                    (lambda (a) (_cons_31 '#t a)))))))
                       #f)
                      (lambda (string . irr)
                         (apply error
                                '"testc12.tex-31"
                                string
                                '(run* (l)
                                       (exist (d x y w s)
                                              (conso w '(a n s) s)
                                              (cdro l s)
                                              (caro l x)
                                              (== 'b x)
                                              (cdro l d)
                                              (caro d y)
                                              (== '|e| y)))
                                irr)))
                    (begin
                      (display " done")
                      (begin (newline) (if #f #f))))
                  ((lambda (nullo)
                      (begin
                        (begin
                          (begin
                            (display "Testing ")
                            (begin
                              (display "testc12.tex-34")
                              (begin (display "...") (if #f #f))))
                          (do-test
                            '()
                            multiset-equal?
                            ((lambda (n)
                                (begin
                                  (unless
                                    ((lambda (x)
                                        (if x
                                          x
                                          (if (integer? n)
                                            (if (exact? n) (positive? n) #f)
                                            #f)))
                                     (boolean? n))
                                    (error 'run
                                           "not an exact positive integer"
                                           n))
                                  ((if (number? n)
                                     (|take'| n)
                                     (if n take+ take*))
                                   (list ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (q)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((nullo '(grape raisin
                                                                           pear))
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== #t
                                                                              q)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (sk ((reify reify-name)
                                                                                                q
                                                                                                s)))
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s))))
                                          empty-s
                                          (lambda (a) (_cons_31 '#t a)))))))
                             #f)
                            (lambda (string . irr)
                               (apply error
                                      '"testc12.tex-34"
                                      string
                                      '(run* (q)
                                             (nullo `(grape raisin pear))
                                             (== #t q))
                                      irr)))
                          (begin
                            (display " done")
                            (begin (newline) (if #f #f))))
                        (begin
                          (begin
                            (display "Testing ")
                            (begin
                              (display "testc12.tex-35")
                              (begin (display "...") (if #f #f))))
                          (do-test
                            '(#t)
                            multiset-equal?
                            ((lambda (n)
                                (begin
                                  (unless
                                    ((lambda (x)
                                        (if x
                                          x
                                          (if (integer? n)
                                            (if (exact? n) (positive? n) #f)
                                            #f)))
                                     (boolean? n))
                                    (error 'run
                                           "not an exact positive integer"
                                           n))
                                  ((if (number? n)
                                     (|take'| n)
                                     (if n take+ take*))
                                   (list ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (q)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((nullo '())
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== #t
                                                                              q)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (sk ((reify reify-name)
                                                                                                q
                                                                                                s)))
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s))))
                                          empty-s
                                          (lambda (a) (_cons_31 '#t a)))))))
                             #f)
                            (lambda (string . irr)
                               (apply error
                                      '"testc12.tex-35"
                                      string
                                      '(run* (q) (nullo '()) (== #t q))
                                      irr)))
                          (begin
                            (display " done")
                            (begin (newline) (if #f #f))))
                        (begin
                          (begin
                            (display "Testing ")
                            (begin
                              (display "testc12.tex-36")
                              (begin (display "...") (if #f #f))))
                          (do-test
                            '(())
                            multiset-equal?
                            ((lambda (n)
                                (begin
                                  (unless
                                    ((lambda (x)
                                        (if x
                                          x
                                          (if (integer? n)
                                            (if (exact? n) (positive? n) #f)
                                            #f)))
                                     (boolean? n))
                                    (error 'run
                                           "not an exact positive integer"
                                           n))
                                  ((if (number? n)
                                     (|take'| n)
                                     (if n take+ take*))
                                   (list ((lambda (s sk)
                                             (lambda ()
                                                ((lambda (x)
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((nullo x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (s sk)
                                                                             (sk ((reify reify-name)
                                                                                  x
                                                                                  s)))
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (make-var s))))
                                          empty-s
                                          (lambda (a) (_cons_31 '#t a)))))))
                             #f)
                            (lambda (string . irr)
                               (apply error
                                      '"testc12.tex-36"
                                      string
                                      '(run* (x) (nullo x))
                                      irr)))
                          (begin
                            (display " done")
                            (begin (newline) (if #f #f))))
                        ((lambda (eqo)
                            (begin
                              (begin
                                (begin
                                  (display "Testing ")
                                  (begin
                                    (display "testc12.tex-39")
                                    (begin (display "...") (if #f #f))))
                                (do-test
                                  '()
                                  multiset-equal?
                                  ((lambda (n)
                                      (begin
                                        (unless
                                          ((lambda (x)
                                              (if x
                                                x
                                                (if (integer? n)
                                                  (if (exact? n)
                                                    (positive? n)
                                                    #f)
                                                  #f)))
                                           (boolean? n))
                                          (error 'run
                                                 "not an exact positive integer"
                                                 n))
                                        ((if (number? n)
                                           (|take'| n)
                                           (if n take+ take*))
                                         (list ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (q)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((eqo 'pear
                                                                       'plum)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== #t
                                                                                    q)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      q
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s))))
                                                empty-s
                                                (lambda (a)
                                                   (_cons_31 '#t a)))))))
                                   #f)
                                  (lambda (string . irr)
                                     (apply error
                                            '"testc12.tex-39"
                                            string
                                            '(run* (q)
                                                   (eqo 'pear 'plum)
                                                   (== #t q))
                                            irr)))
                                (begin
                                  (display " done")
                                  (begin (newline) (if #f #f))))
                              (begin
                                (begin
                                  (display "Testing ")
                                  (begin
                                    (display "testc12.tex-40")
                                    (begin (display "...") (if #f #f))))
                                (do-test
                                  '(#t)
                                  multiset-equal?
                                  ((lambda (n)
                                      (begin
                                        (unless
                                          ((lambda (x)
                                              (if x
                                                x
                                                (if (integer? n)
                                                  (if (exact? n)
                                                    (positive? n)
                                                    #f)
                                                  #f)))
                                           (boolean? n))
                                          (error 'run
                                                 "not an exact positive integer"
                                                 n))
                                        ((if (number? n)
                                           (|take'| n)
                                           (if n take+ take*))
                                         (list ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (q)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((eqo 'plum
                                                                       'plum)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== #t
                                                                                    q)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      q
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s))))
                                                empty-s
                                                (lambda (a)
                                                   (_cons_31 '#t a)))))))
                                   #f)
                                  (lambda (string . irr)
                                     (apply error
                                            '"testc12.tex-40"
                                            string
                                            '(run* (q)
                                                   (eqo 'plum 'plum)
                                                   (== #t q))
                                            irr)))
                                (begin
                                  (display " done")
                                  (begin (newline) (if #f #f))))
                              (begin
                                (begin
                                  (display "Testing ")
                                  (begin
                                    (display "testc12.tex-46")
                                    (begin (display "...") (if #f #f))))
                                (do-test
                                  (list '(_.0 _.1 . salad))
                                  multiset-equal?
                                  ((lambda (n)
                                      (begin
                                        (unless
                                          ((lambda (x)
                                              (if x
                                                x
                                                (if (integer? n)
                                                  (if (exact? n)
                                                    (positive? n)
                                                    #f)
                                                  #f)))
                                           (boolean? n))
                                          (error 'run
                                                 "not an exact positive integer"
                                                 n))
                                        ((if (number? n)
                                           (|take'| n)
                                           (if n take+ take*))
                                         (list ((lambda (s sk)
                                                   (lambda ()
                                                      ((lambda (r)
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (x y)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== (cons x
                                                                                              (cons y
                                                                                                    'salad))
                                                                                        r)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s)
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (sk ((reify reify-name)
                                                                                        r
                                                                                        s)))
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (make-var s))))
                                                empty-s
                                                (lambda (a)
                                                   (_cons_31 '#t a)))))))
                                   #f)
                                  (lambda (string . irr)
                                     (apply error
                                            '"testc12.tex-46"
                                            string
                                            '(run* (r)
                                                   (exist (x y)
                                                          (== (cons x
                                                                    (cons y
                                                                          'salad))
                                                              r)))
                                            irr)))
                                (begin
                                  (display " done")
                                  (begin (newline) (if #f #f))))
                              ((lambda (pairo)
                                  (begin
                                    (begin
                                      (begin
                                        (display "Testing ")
                                        (begin
                                          (display "testc12.tex-47")
                                          (begin (display "...") (if #f #f))))
                                      (do-test
                                        '(#t)
                                        multiset-equal?
                                        ((lambda (n)
                                            (begin
                                              (unless
                                                ((lambda (x)
                                                    (if x
                                                      x
                                                      (if (integer? n)
                                                        (if (exact? n)
                                                          (positive? n)
                                                          #f)
                                                        #f)))
                                                 (boolean? n))
                                                (error 'run
                                                       "not an exact positive integer"
                                                       n))
                                              ((if (number? n)
                                                 (|take'| n)
                                                 (if n take+ take*))
                                               (list ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (q)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((pairo (cons q
                                                                                     q))
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== #t
                                                                                          q)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            q
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      empty-s
                                                      (lambda (a)
                                                         (_cons_31 '#t a)))))))
                                         #f)
                                        (lambda (string . irr)
                                           (apply error
                                                  '"testc12.tex-47"
                                                  string
                                                  '(run* (q)
                                                         (pairo (cons q q))
                                                         (== #t q))
                                                  irr)))
                                      (begin
                                        (display " done")
                                        (begin (newline) (if #f #f))))
                                    (begin
                                      (begin
                                        (display "Testing ")
                                        (begin
                                          (display "testc12.tex-48")
                                          (begin (display "...") (if #f #f))))
                                      (do-test
                                        '()
                                        multiset-equal?
                                        ((lambda (n)
                                            (begin
                                              (unless
                                                ((lambda (x)
                                                    (if x
                                                      x
                                                      (if (integer? n)
                                                        (if (exact? n)
                                                          (positive? n)
                                                          #f)
                                                        #f)))
                                                 (boolean? n))
                                                (error 'run
                                                       "not an exact positive integer"
                                                       n))
                                              ((if (number? n)
                                                 (|take'| n)
                                                 (if n take+ take*))
                                               (list ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (q)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((pairo '())
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== #t
                                                                                          q)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            q
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      empty-s
                                                      (lambda (a)
                                                         (_cons_31 '#t a)))))))
                                         #f)
                                        (lambda (string . irr)
                                           (apply error
                                                  '"testc12.tex-48"
                                                  string
                                                  '(run* (q)
                                                         (pairo '())
                                                         (== #t q))
                                                  irr)))
                                      (begin
                                        (display " done")
                                        (begin (newline) (if #f #f))))
                                    (begin
                                      (begin
                                        (display "Testing ")
                                        (begin
                                          (display "testc12.tex-49")
                                          (begin (display "...") (if #f #f))))
                                      (do-test
                                        '()
                                        multiset-equal?
                                        ((lambda (n)
                                            (begin
                                              (unless
                                                ((lambda (x)
                                                    (if x
                                                      x
                                                      (if (integer? n)
                                                        (if (exact? n)
                                                          (positive? n)
                                                          #f)
                                                        #f)))
                                                 (boolean? n))
                                                (error 'run
                                                       "not an exact positive integer"
                                                       n))
                                              ((if (number? n)
                                                 (|take'| n)
                                                 (if n take+ take*))
                                               (list ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (q)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((pairo 'pair)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((== #t
                                                                                          q)
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            q
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      empty-s
                                                      (lambda (a)
                                                         (_cons_31 '#t a)))))))
                                         #f)
                                        (lambda (string . irr)
                                           (apply error
                                                  '"testc12.tex-49"
                                                  string
                                                  '(run* (q)
                                                         (pairo 'pair)
                                                         (== #t q))
                                                  irr)))
                                      (begin
                                        (display " done")
                                        (begin (newline) (if #f #f))))
                                    (begin
                                      (begin
                                        (display "Testing ")
                                        (begin
                                          (display "testc12.tex-50")
                                          (begin (display "...") (if #f #f))))
                                      (do-test
                                        (list '(_.0 . _.1))
                                        multiset-equal?
                                        ((lambda (n)
                                            (begin
                                              (unless
                                                ((lambda (x)
                                                    (if x
                                                      x
                                                      (if (integer? n)
                                                        (if (exact? n)
                                                          (positive? n)
                                                          #f)
                                                        #f)))
                                                 (boolean? n))
                                                (error 'run
                                                       "not an exact positive integer"
                                                       n))
                                              ((if (number? n)
                                                 (|take'| n)
                                                 (if n take+ take*))
                                               (list ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (x)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((pairo x)
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (sk ((reify reify-name)
                                                                                              x
                                                                                              s)))
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      empty-s
                                                      (lambda (a)
                                                         (_cons_31 '#t a)))))))
                                         #f)
                                        (lambda (string . irr)
                                           (apply error
                                                  '"testc12.tex-50"
                                                  string
                                                  '(run* (x) (pairo x))
                                                  irr)))
                                      (begin
                                        (display " done")
                                        (begin (newline) (if #f #f))))
                                    (begin
                                      (begin
                                        (display "Testing ")
                                        (begin
                                          (display "testc12.tex-51")
                                          (begin (display "...") (if #f #f))))
                                      (do-test
                                        (list '_.0)
                                        multiset-equal?
                                        ((lambda (n)
                                            (begin
                                              (unless
                                                ((lambda (x)
                                                    (if x
                                                      x
                                                      (if (integer? n)
                                                        (if (exact? n)
                                                          (positive? n)
                                                          #f)
                                                        #f)))
                                                 (boolean? n))
                                                (error 'run
                                                       "not an exact positive integer"
                                                       n))
                                              ((if (number? n)
                                                 (|take'| n)
                                                 (if n take+ take*))
                                               (list ((lambda (s sk)
                                                         (lambda ()
                                                            ((lambda (r)
                                                                ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((pairo (cons r
                                                                                     'pear))
                                                                        s
                                                                        (lambda (s)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (sk ((reify reify-name)
                                                                                              r
                                                                                              s)))
                                                                                      s
                                                                                      sk)))
                                                                               s
                                                                               sk))))))
                                                                 s
                                                                 sk))
                                                             (make-var s))))
                                                      empty-s
                                                      (lambda (a)
                                                         (_cons_31 '#t a)))))))
                                         #f)
                                        (lambda (string . irr)
                                           (apply error
                                                  '"testc12.tex-51"
                                                  string
                                                  '(run* (r)
                                                         (pairo (cons r 'pear)))
                                                  irr)))
                                      (begin
                                        (display " done")
                                        (begin (newline) (if #f #f))))
                                    (letrec ((listo (lambda (l)
                                                       (lambda (s sk)
                                                          (_list_33
                                                            '#f
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((nullo l)
                                                                       s
                                                                       (lambda (s)
                                                                          (lambda ()
                                                                             ((lambda (s sk)
                                                                                 (lambda ()
                                                                                    ((== #f
                                                                                         #f)
                                                                                     s
                                                                                     sk)))
                                                                              s
                                                                              sk))))))
                                                                s
                                                                sk))
                                                            (lambda ()
                                                               ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((pairo l)
                                                                       s
                                                                       (lambda (s)
                                                                          (lambda ()
                                                                             ((lambda (s sk)
                                                                                 (lambda ()
                                                                                    ((lambda (s sk)
                                                                                        (lambda ()
                                                                                           ((lambda (d)
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((cdro l
                                                                                                             d)
                                                                                                       s
                                                                                                       (lambda (s)
                                                                                                          (lambda ()
                                                                                                             ((lambda (s sk)
                                                                                                                 (lambda ()
                                                                                                                    ((listo d)
                                                                                                                     s
                                                                                                                     sk)))
                                                                                                              s
                                                                                                              sk))))))
                                                                                                s
                                                                                                sk))
                                                                                            (make-var
                                                                                              s))))
                                                                                     s
                                                                                     sk)))
                                                                              s
                                                                              sk))))))
                                                                s
                                                                sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-5")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '_.0)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((listo (_cons_31
                                                                                     'a
                                                                                     (_cons_31
                                                                                       'b
                                                                                       (_cons_31
                                                                                         x
                                                                                         '(d)))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-5"
                                                      string
                                                      '(run* (x)
                                                             (listo `(a b
                                                                        ,x
                                                                        d)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-6")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '())
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((listo (_cons_31
                                                                                     'a
                                                                                     (_cons_31
                                                                                       'b
                                                                                       (_cons_31
                                                                                         'c
                                                                                         x))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-6"
                                                      string
                                                      '(run 1
                                                            (x)
                                                            (listo `(a b
                                                                       c
                                                                       unquote
                                                                       x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-8")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '(()
                                              (_.0)
                                              (_.0 _.1)
                                              (_.0 _.1 _.2)
                                              (_.0 _.1 _.2 _.3))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((listo (_cons_31
                                                                                     'a
                                                                                     (_cons_31
                                                                                       'b
                                                                                       (_cons_31
                                                                                         'c
                                                                                         x))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             5)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-8"
                                                      string
                                                      '(run 5
                                                            (x)
                                                            (listo `(a b
                                                                       c
                                                                       unquote
                                                                       x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (letrec ((lolo (lambda (l)
                                                          (lambda (s sk)
                                                             (_list_33
                                                               '#f
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((nullo l)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== #f
                                                                                            #f)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (s sk)
                                                                             (lambda ()
                                                                                ((lambda (a)
                                                                                    ((lambda (s sk)
                                                                                        (lambda ()
                                                                                           ((caro l
                                                                                                  a)
                                                                                            s
                                                                                            (lambda (s)
                                                                                               (lambda ()
                                                                                                  ((lambda (s sk)
                                                                                                      (lambda ()
                                                                                                         ((listo a)
                                                                                                          s
                                                                                                          sk)))
                                                                                                   s
                                                                                                   sk))))))
                                                                                     s
                                                                                     sk))
                                                                                 (make-var
                                                                                   s))))
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((lambda (d)
                                                                                                  ((lambda (s sk)
                                                                                                      (lambda ()
                                                                                                         ((cdro l
                                                                                                                d)
                                                                                                          s
                                                                                                          (lambda (s)
                                                                                                             (lambda ()
                                                                                                                ((lambda (s sk)
                                                                                                                    (lambda ()
                                                                                                                       ((lolo d)
                                                                                                                        s
                                                                                                                        sk)))
                                                                                                                 s
                                                                                                                 sk))))))
                                                                                                   s
                                                                                                   sk))
                                                                                               (make-var
                                                                                                 s))))
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk)))))))
                                          (begin
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc14.tex-9")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '(())
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (l)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lolo l)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      l
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 1)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc14.tex-9"
                                                          string
                                                          '(run 1 (l) (lolo l))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc14.tex-10")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                (list #t)
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (q)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (x y)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lolo (_list_33
                                                                                                          '(a b)
                                                                                                          (_cons_31
                                                                                                            x
                                                                                                            '(c))
                                                                                                          (_list_33
                                                                                                            'd
                                                                                                            y)))
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((== #t
                                                                                                                    q)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s)
                                                                                       (make-var
                                                                                         s))))
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      q
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 #f)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc14.tex-10"
                                                          string
                                                          '(run* (q)
                                                                 (exist (x y)
                                                                        (lolo `((a b)
                                                                                (,x
                                                                                 c)
                                                                                (d ,y)))
                                                                        (== #t
                                                                            q)))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc14.tex-11")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                (list #t)
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (q)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (x)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lolo (_cons_31
                                                                                                          '(a b)
                                                                                                          x))
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((== #t
                                                                                                                    q)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      q
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 1)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc14.tex-11"
                                                          string
                                                          '(run 1
                                                                (q)
                                                                (exist (x)
                                                                       (lolo `((a b)
                                                                               unquote
                                                                               x))
                                                                       (== #t
                                                                           q)))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc14.tex-12")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '(())
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lolo (_cons_31
                                                                                        '(a b)
                                                                                        (_cons_31
                                                                                          '(c d)
                                                                                          x)))
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 1)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc14.tex-12"
                                                          string
                                                          '(run 1
                                                                (x)
                                                                (lolo `((a b)
                                                                        (c d)
                                                                        unquote
                                                                        x)))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc14.tex-13")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '(()
                                                  (())
                                                  ((_.0))
                                                  (() ())
                                                  ((_.0 _.1)))
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lolo (_cons_31
                                                                                        '(a b)
                                                                                        (_cons_31
                                                                                          '(c d)
                                                                                          x)))
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 5)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc14.tex-13"
                                                          string
                                                          '(run 5
                                                                (x)
                                                                (lolo `((a b)
                                                                        (c d)
                                                                        unquote
                                                                        x)))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))))
                                        ((lambda (twinso)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc14.tex-14")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  (list #t)
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (q)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((twinso
                                                                                    '(tofu tofu))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((== #t
                                                                                                    q)
                                                                                                s
                                                                                                (lambda (s)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (lambda ()
                                                                                                             ((lambda (s sk)
                                                                                                                 (sk ((reify reify-name)
                                                                                                                      q
                                                                                                                      s)))
                                                                                                              s
                                                                                                              sk)))
                                                                                                       s
                                                                                                       sk))))))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc14.tex-14"
                                                            string
                                                            '(run* (q)
                                                                   (twinso
                                                                     '(tofu tofu))
                                                                   (== #t q))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc14.tex-15")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  (list 'tofu)
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (z)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((twinso
                                                                                    (_cons_31
                                                                                      z
                                                                                      '(tofu)))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        z
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc14.tex-15"
                                                            string
                                                            '(run* (z)
                                                                   (twinso
                                                                     `(,z
                                                                       tofu)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (letrec ((loto (lambda (l)
                                                                (lambda (s sk)
                                                                   (_list_33
                                                                     '#f
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((nullo l)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((== #f
                                                                                                  #f)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (a)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((caro l
                                                                                                        a)
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((twinso
                                                                                                                  a)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (lambda ()
                                                                                                    ((lambda (d)
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((cdro l
                                                                                                                      d)
                                                                                                                s
                                                                                                                (lambda (s)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (lambda ()
                                                                                                                             ((loto d)
                                                                                                                              s
                                                                                                                              sk)))
                                                                                                                       s
                                                                                                                       sk))))))
                                                                                                         s
                                                                                                         sk))
                                                                                                     (make-var
                                                                                                       s))))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk)))))))
                                                (begin
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc14.tex-16")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-test
                                                      (list '())
                                                      multiset-equal?
                                                      ((lambda (n)
                                                          (begin
                                                            (unless
                                                              ((lambda (x)
                                                                  (if x
                                                                    x
                                                                    (if (integer?
                                                                          n)
                                                                      (if (exact?
                                                                            n)
                                                                        (positive?
                                                                          n)
                                                                        #f)
                                                                      #f)))
                                                               (boolean? n))
                                                              (error 'run
                                                                     "not an exact positive integer"
                                                                     n))
                                                            ((if (number? n)
                                                               (|take'| n)
                                                               (if n
                                                                 take+
                                                                 take*))
                                                             (list ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (z)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((loto (_cons_31
                                                                                              '(g g)
                                                                                              z))
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            z
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    empty-s
                                                                    (lambda (a)
                                                                       (_cons_31
                                                                         '#t
                                                                         a)))))))
                                                       1)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc14.tex-16"
                                                                string
                                                                '(run 1
                                                                      (z)
                                                                      (loto `((g g)
                                                                              unquote
                                                                              z)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc14.tex-17")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-test
                                                      '(()
                                                        ((_.0 _.0))
                                                        ((_.0 _.0) (_.1 _.1))
                                                        ((_.0 _.0)
                                                         (_.1 _.1)
                                                         (_.2 _.2))
                                                        ((_.0 _.0)
                                                         (_.1 _.1)
                                                         (_.2 _.2)
                                                         (_.3 _.3)))
                                                      multiset-equal?
                                                      ((lambda (n)
                                                          (begin
                                                            (unless
                                                              ((lambda (x)
                                                                  (if x
                                                                    x
                                                                    (if (integer?
                                                                          n)
                                                                      (if (exact?
                                                                            n)
                                                                        (positive?
                                                                          n)
                                                                        #f)
                                                                      #f)))
                                                               (boolean? n))
                                                              (error 'run
                                                                     "not an exact positive integer"
                                                                     n))
                                                            ((if (number? n)
                                                               (|take'| n)
                                                               (if n
                                                                 take+
                                                                 take*))
                                                             (list ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (z)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((loto (_cons_31
                                                                                              '(g g)
                                                                                              z))
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            z
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    empty-s
                                                                    (lambda (a)
                                                                       (_cons_31
                                                                         '#t
                                                                         a)))))))
                                                       5)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc14.tex-17"
                                                                string
                                                                '(run 5
                                                                      (z)
                                                                      (loto `((g g)
                                                                              unquote
                                                                              z)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc14.tex-18")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-test
                                                      '((|e| (_.0 _.0) ())
                                                        (|e| (_.0 _.0)
                                                             ((_.1 _.1)))
                                                        (|e| (_.0 _.0)
                                                             ((_.1 _.1)
                                                              (_.2 _.2)))
                                                        (|e| (_.0 _.0)
                                                             ((_.1 _.1)
                                                              (_.2 _.2)
                                                              (_.3 _.3)))
                                                        (|e| (_.0 _.0)
                                                             ((_.1 _.1)
                                                              (_.2 _.2)
                                                              (_.3 _.3)
                                                              (_.4 _.4))))
                                                      multiset-equal?
                                                      ((lambda (n)
                                                          (begin
                                                            (unless
                                                              ((lambda (x)
                                                                  (if x
                                                                    x
                                                                    (if (integer?
                                                                          n)
                                                                      (if (exact?
                                                                            n)
                                                                        (positive?
                                                                          n)
                                                                        #f)
                                                                      #f)))
                                                               (boolean? n))
                                                              (error 'run
                                                                     "not an exact positive integer"
                                                                     n))
                                                            ((if (number? n)
                                                               (|take'| n)
                                                               (if n
                                                                 take+
                                                                 take*))
                                                             (list ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (r)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (w x y z)
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((loto (_cons_31
                                                                                                                '(g g)
                                                                                                                (_cons_31
                                                                                                                  (_list_33
                                                                                                                    '|e|
                                                                                                                    w)
                                                                                                                  (_cons_31
                                                                                                                    (_list_33
                                                                                                                      x
                                                                                                                      y)
                                                                                                                    z))))
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== (_list_33
                                                                                                                            w
                                                                                                                            (_list_33
                                                                                                                              x
                                                                                                                              y)
                                                                                                                            z)
                                                                                                                          r)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s))))
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            r
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    empty-s
                                                                    (lambda (a)
                                                                       (_cons_31
                                                                         '#t
                                                                         a)))))))
                                                       5)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc14.tex-18"
                                                                string
                                                                '(run 5
                                                                      (r)
                                                                      (exist (w x
                                                                                y
                                                                                z)
                                                                             (loto `((g g)
                                                                                     (|e| ,w)
                                                                                     (,x
                                                                                      ,y)
                                                                                     unquote
                                                                                     z))
                                                                             (== `(,w
                                                                                   (,x
                                                                                    ,y)
                                                                                   ,z)
                                                                                 r)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc14.tex-19")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-test
                                                      '(((g g)
                                                         (|e| |e|)
                                                         (_.0 _.0))
                                                        ((g g)
                                                         (|e| |e|)
                                                         (_.0 _.0)
                                                         (_.1 _.1))
                                                        ((g g)
                                                         (|e| |e|)
                                                         (_.0 _.0)
                                                         (_.1 _.1)
                                                         (_.2 _.2)))
                                                      multiset-equal?
                                                      ((lambda (n)
                                                          (begin
                                                            (unless
                                                              ((lambda (x)
                                                                  (if x
                                                                    x
                                                                    (if (integer?
                                                                          n)
                                                                      (if (exact?
                                                                            n)
                                                                        (positive?
                                                                          n)
                                                                        #f)
                                                                      #f)))
                                                               (boolean? n))
                                                              (error 'run
                                                                     "not an exact positive integer"
                                                                     n))
                                                            ((if (number? n)
                                                               (|take'| n)
                                                               (if n
                                                                 take+
                                                                 take*))
                                                             (list ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (out)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (w x y z)
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== (_cons_31
                                                                                                              '(g g)
                                                                                                              (_cons_31
                                                                                                                (_list_33
                                                                                                                  '|e|
                                                                                                                  w)
                                                                                                                (_cons_31
                                                                                                                  (_list_33
                                                                                                                    x
                                                                                                                    y)
                                                                                                                  z)))
                                                                                                            out)
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((loto out)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s))))
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            out
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    empty-s
                                                                    (lambda (a)
                                                                       (_cons_31
                                                                         '#t
                                                                         a)))))))
                                                       3)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc14.tex-19"
                                                                string
                                                                '(run 3
                                                                      (out)
                                                                      (exist (w x
                                                                                y
                                                                                z)
                                                                             (== `((g g)
                                                                                   (|e| ,w)
                                                                                   (,x
                                                                                    ,y)
                                                                                   unquote
                                                                                   z)
                                                                                 out)
                                                                             (loto out)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))))
                                              (letrec ((listofo
                                                         (lambda (predo l)
                                                            (lambda (s sk)
                                                               (_list_33
                                                                 '#f
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((nullo l)
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #f
                                                                                              #f)
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (a)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((caro l
                                                                                                    a)
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((predo a)
                                                                                                            s
                                                                                                            sk)))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((lambda (d)
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((cdro l
                                                                                                                  d)
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((listofo
                                                                                                                            predo
                                                                                                                            d)
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))
                                                                                                 (make-var
                                                                                                   s))))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk)))))))
                                                (begin
                                                  (begin
                                                    (display "Testing ")
                                                    (begin
                                                      (display "testc14.tex-20")
                                                      (begin
                                                        (display "...")
                                                        (if #f #f))))
                                                  (do-test
                                                    '(((g g)
                                                       (|e| |e|)
                                                       (_.0 _.0))
                                                      ((g g)
                                                       (|e| |e|)
                                                       (_.0 _.0)
                                                       (_.1 _.1))
                                                      ((g g)
                                                       (|e| |e|)
                                                       (_.0 _.0)
                                                       (_.1 _.1)
                                                       (_.2 _.2)))
                                                    multiset-equal?
                                                    ((lambda (n)
                                                        (begin
                                                          (unless
                                                            ((lambda (x)
                                                                (if x
                                                                  x
                                                                  (if (integer?
                                                                        n)
                                                                    (if (exact?
                                                                          n)
                                                                      (positive?
                                                                        n)
                                                                      #f)
                                                                    #f)))
                                                             (boolean? n))
                                                            (error 'run
                                                                   "not an exact positive integer"
                                                                   n))
                                                          ((if (number? n)
                                                             (|take'| n)
                                                             (if n take+ take*))
                                                           (list ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (out)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (w x y z)
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== (_cons_31
                                                                                                            '(g g)
                                                                                                            (_cons_31
                                                                                                              (_list_33
                                                                                                                '|e|
                                                                                                                w)
                                                                                                              (_cons_31
                                                                                                                (_list_33
                                                                                                                  x
                                                                                                                  y)
                                                                                                                z)))
                                                                                                          out)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((listofo
                                                                                                                      twinso
                                                                                                                      out)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s)
                                                                                           (make-var
                                                                                             s))))
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (sk ((reify reify-name)
                                                                                                          out
                                                                                                          s)))
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s))))
                                                                  empty-s
                                                                  (lambda (a)
                                                                     (_cons_31
                                                                       '#t
                                                                       a)))))))
                                                     3)
                                                    (lambda (string . irr)
                                                       (apply error
                                                              '"testc14.tex-20"
                                                              string
                                                              '(run 3
                                                                    (out)
                                                                    (exist (w x
                                                                              y
                                                                              z)
                                                                           (== `((g g)
                                                                                 (|e| ,w)
                                                                                 (,x
                                                                                  ,y)
                                                                                 unquote
                                                                                 z)
                                                                               out)
                                                                           (listofo
                                                                             twinso
                                                                             out)))
                                                              irr)))
                                                  (begin
                                                    (display " done")
                                                    (begin
                                                      (newline)
                                                      (if #f #f)))))))
                                         (lambda (s)
                                            (lambda (_s_64 sk)
                                               (lambda ()
                                                  ((lambda (x y)
                                                      ((lambda (_s_68 sk)
                                                          (lambda ()
                                                             ((conso x y s)
                                                              _s_68
                                                              (lambda (s)
                                                                 (lambda ()
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((conso x
                                                                                   '()
                                                                                   y)
                                                                            s
                                                                            sk)))
                                                                     s
                                                                     sk))))))
                                                       _s_64
                                                       sk))
                                                   (make-var _s_64)
                                                   (make-var _s_64))))))))
                                    (letrec ((membero
                                               (lambda (x l)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((nullo l)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== #t
                                                                                    #f)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (a)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((caro l
                                                                                          a)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((== a
                                                                                                      x)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== #f
                                                                                    #f)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #f #f)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (d)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((cdro l
                                                                                                        d)
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((membero
                                                                                                                  x
                                                                                                                  d)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-22")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list #t)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (q)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              'olive
                                                                              '(virgin
                                                                                 olive
                                                                                 oil))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              q)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (sk ((reify reify-name)
                                                                                                                q
                                                                                                                s)))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-22"
                                                      string
                                                      '(run* (q)
                                                             (membero
                                                               'olive
                                                               `(virgin
                                                                  olive
                                                                  oil))
                                                             (== #t q))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-23")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            'ptest
                                            (lambda (|e| c)
                                               ((lambda (c)
                                                   (if (list? c)
                                                     (if (= (length c) 1)
                                                       (memq (car c)
                                                             '(hummus
                                                                with
                                                                pita))
                                                       #f)
                                                     #f))
                                                c))
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (y)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              y
                                                                              '(hummus
                                                                                 with
                                                                                 pita))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  y
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-23"
                                                      string
                                                      '(run 1
                                                            (y)
                                                            (membero
                                                              y
                                                              `(hummus
                                                                 with
                                                                 pita)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-24")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            'ptest
                                            (lambda (|e| c)
                                               ((lambda (c)
                                                   (if (list? c)
                                                     (if (= (length c) 1)
                                                       (memq (car c)
                                                             '(with pita))
                                                       #f)
                                                     #f))
                                                c))
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (y)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              y
                                                                              '(with pita))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  y
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-24"
                                                      string
                                                      '(run 1
                                                            (y)
                                                            (membero
                                                              y
                                                              `(with pita)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-25")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list 'pita)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (y)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              y
                                                                              '(pita))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  y
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-25"
                                                      string
                                                      '(run 1
                                                            (y)
                                                            (membero y `(pita)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-26")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '()
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (y)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              y
                                                                              '())
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  y
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-26"
                                                      string
                                                      '(run* (y)
                                                             (membero y `()))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-27")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '(hummus with pita)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (y)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              y
                                                                              '(hummus
                                                                                 with
                                                                                 pita))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  y
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-27"
                                                      string
                                                      '(run* (y)
                                                             (membero
                                                               y
                                                               `(hummus
                                                                  with
                                                                  pita)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-28")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '|e|)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              '|e|
                                                                              (_cons_31
                                                                                'pasta
                                                                                (_cons_31
                                                                                  x
                                                                                  '(fagioli))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-28"
                                                      string
                                                      '(run* (x)
                                                             (membero
                                                               '|e|
                                                               `(pasta ,x
                                                                       fagioli)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-29")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '_.0)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              '|e|
                                                                              (_cons_31
                                                                                'pasta
                                                                                (_cons_31
                                                                                  '|e|
                                                                                  (_cons_31
                                                                                    x
                                                                                    '(fagioli)))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-29"
                                                      string
                                                      '(run 1
                                                            (x)
                                                            (membero
                                                              '|e|
                                                              `(pasta |e|
                                                                      ,x
                                                                      fagioli)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-30")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            'ptest
                                            (lambda (|e| c)
                                               ((lambda (c)
                                                   (if (list? c)
                                                     (if (= (length c) 1)
                                                       (memq (car c) '(|e| _.0))
                                                       #f)
                                                     #f))
                                                c))
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((membero
                                                                              '|e|
                                                                              (_cons_31
                                                                                'pasta
                                                                                (_cons_31
                                                                                  x
                                                                                  '(|e| fagioli))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             1)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-30"
                                                      string
                                                      '(run 1
                                                            (x)
                                                            (membero
                                                              '|e|
                                                              `(pasta ,x
                                                                      |e|
                                                                      fagioli)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-31")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((|e| _.0) (_.0 |e|))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (r)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (x y)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((membero
                                                                                                '|e|
                                                                                                (_list_33
                                                                                                  'pasta
                                                                                                  x
                                                                                                  'fagioli
                                                                                                  y))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== (_list_33
                                                                                                                  x
                                                                                                                  y)
                                                                                                                r)
                                                                                                            s
                                                                                                            sk)))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s)
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  r
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-31"
                                                      string
                                                      '(run* (r)
                                                             (exist (x y)
                                                                    (membero
                                                                      '|e|
                                                                      `(pasta ,x
                                                                              fagioli
                                                                              ,y))
                                                                    (== `(,x ,y)
                                                                        r)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-32")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (l)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((membero
                                                                                 'tofu
                                                                                 l)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     l
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu . _.0))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-32"
                                                      string
                                                      '(run+ (l)
                                                             (membero 'tofu l))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-34")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (l)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((membero
                                                                                 'tofu
                                                                                 l)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     l
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu . _.0)
                                              (_.0 tofu . _.1)
                                              (_.0 _.1 tofu . _.2)
                                              (_.0 _.1 _.2 tofu . _.3)
                                              (_.0 _.1 _.2 _.3 tofu . _.4))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-34"
                                                      string
                                                      '(run+ (l)
                                                             (membero 'tofu l))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((pmembero
                                               (lambda (x l)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((caro l x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((cdro l
                                                                                      '())
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (d)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((cdro l
                                                                                          d)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((pmembero
                                                                                                    x
                                                                                                    d)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-35")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (l)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((pmembero
                                                                                 'tofu
                                                                                 l)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     l
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu)
                                              (_.0 tofu)
                                              (_.0 _.1 tofu)
                                              (_.0 _.1 _.2 tofu)
                                              (_.0 _.1 _.2 _.3 tofu))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-35"
                                                      string
                                                      '(run+ (l)
                                                             (pmembero 'tofu l))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-36")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '(#t)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (q)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((pmembero
                                                                              'tofu
                                                                              '(a b
                                                                                  tofu
                                                                                  d
                                                                                  tofu))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              q)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (sk ((reify reify-name)
                                                                                                                q
                                                                                                                s)))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-36"
                                                      string
                                                      '(run* (q)
                                                             (pmembero
                                                               'tofu
                                                               `(a b
                                                                   tofu
                                                                   d
                                                                   tofu))
                                                             (== #t q))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((pmembero
                                               (lambda (x l)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((caro l x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (_list_33
                                                                                     '#f
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((cdro l
                                                                                                      '())
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((== #f
                                                                                                    #f)
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (d)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((cdro l
                                                                                          d)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((pmembero
                                                                                                    x
                                                                                                    d)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (display "Testing ")
                                          (begin
                                            (display "testc14.tex-37")
                                            (begin (display "...") (if #f #f))))
                                        (do-test
                                          '(#t #t #t)
                                          multiset-equal?
                                          ((lambda (n)
                                              (begin
                                                (unless
                                                  ((lambda (x)
                                                      (if x
                                                        x
                                                        (if (integer? n)
                                                          (if (exact? n)
                                                            (positive? n)
                                                            #f)
                                                          #f)))
                                                   (boolean? n))
                                                  (error 'run
                                                         "not an exact positive integer"
                                                         n))
                                                ((if (number? n)
                                                   (|take'| n)
                                                   (if n take+ take*))
                                                 (list ((lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (q)
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((pmembero
                                                                            'tofu
                                                                            '(a b
                                                                                tofu
                                                                                d
                                                                                tofu))
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== #t
                                                                                            q)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (sk ((reify reify-name)
                                                                                                              q
                                                                                                              s)))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))
                                                               (make-var s))))
                                                        empty-s
                                                        (lambda (a)
                                                           (_cons_31
                                                             '#t
                                                             a)))))))
                                           #f)
                                          (lambda (string . irr)
                                             (apply error
                                                    '"testc14.tex-37"
                                                    string
                                                    '(run* (q)
                                                           (pmembero
                                                             'tofu
                                                             `(a b tofu d tofu))
                                                           (== #t q))
                                                    irr)))
                                        (begin
                                          (display " done")
                                          (begin (newline) (if #f #f)))))
                                    (letrec ((pmembero
                                               (lambda (x l)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((caro l x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (_list_33
                                                                                     '#f
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((cdro l
                                                                                                      '())
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((lambda (a d)
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((cdro l
                                                                                                                        (_cons_31
                                                                                                                          a
                                                                                                                          d))
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))
                                                                                                       (make-var
                                                                                                         s)
                                                                                                       (make-var
                                                                                                         s))))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (d)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((cdro l
                                                                                          d)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((pmembero
                                                                                                    x
                                                                                                    d)
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-38")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '(#t #t)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (q)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((pmembero
                                                                              'tofu
                                                                              '(a b
                                                                                  tofu
                                                                                  d
                                                                                  tofu))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              q)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (sk ((reify reify-name)
                                                                                                                q
                                                                                                                s)))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-38"
                                                      string
                                                      '(run* (q)
                                                             (pmembero
                                                               'tofu
                                                               `(a b
                                                                   tofu
                                                                   d
                                                                   tofu))
                                                             (== #t q))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc14.tex-39")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (l)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((pmembero
                                                                                 'tofu
                                                                                 l)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     l
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu)
                                              (tofu _.0 . _.1)
                                              (_.0 tofu)
                                              (_.0 tofu _.1 . _.2)
                                              (_.0 _.1 tofu)
                                              (_.0 _.1 tofu _.2 . _.3)
                                              (_.0 _.1 _.2 tofu)
                                              (_.0 _.1 _.2 tofu _.3 . _.4)
                                              (_.0 _.1 _.2 _.3 tofu)
                                              (_.0 _.1 _.2 _.3 tofu _.4 . _.5)
                                              (_.0 _.1 _.2 _.3 _.4 tofu)
                                              (_.0 _.1
                                                   _.2
                                                   _.3
                                                   _.4
                                                   tofu
                                                   _.5
                                                   .
                                                   _.6))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc14.tex-39"
                                                      string
                                                      '(run+ (l)
                                                             (pmembero 'tofu l))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((memo (lambda (x l out)
                                                      (lambda (s sk)
                                                         (_list_33
                                                           '#f
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((caro l x)
                                                                      s
                                                                      (lambda (s)
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== l
                                                                                        out)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))))
                                                               s
                                                               sk))
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (d)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((cdro l
                                                                                              d)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((memo x
                                                                                                            d
                                                                                                            out)
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-7")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (out)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((memo 'tofu
                                                                                     '(a b
                                                                                         tofu
                                                                                         d
                                                                                         tofu
                                                                                         |e|)
                                                                                     out)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     out
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu d tofu |e|))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-7"
                                                      string
                                                      '(run+ (out)
                                                             (memo 'tofu
                                                                   `(a b
                                                                       tofu
                                                                       d
                                                                       tofu
                                                                       |e|)
                                                                   out))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-8")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (out)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (x)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((memo 'tofu
                                                                                                       (_cons_31
                                                                                                         'a
                                                                                                         (_cons_31
                                                                                                           'b
                                                                                                           (_cons_31
                                                                                                             x
                                                                                                             '(d tofu
                                                                                                                 |e|))))
                                                                                                       out)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     out
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((tofu d tofu |e|))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-8"
                                                      string
                                                      '(run+ (out)
                                                             (exist (x)
                                                                    (memo 'tofu
                                                                          `(a b
                                                                              ,x
                                                                              d
                                                                              tofu
                                                                              |e|)
                                                                          out)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-9")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list 'tofu)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (r)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((memo r
                                                                                  '(a b
                                                                                      tofu
                                                                                      d
                                                                                      tofu
                                                                                      |e|)
                                                                                  '(tofu d
                                                                                         tofu
                                                                                         |e|))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  r
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-9"
                                                      string
                                                      '(run* (r)
                                                             (memo r
                                                                   `(a b
                                                                       tofu
                                                                       d
                                                                       tofu
                                                                       |e|)
                                                                   `(tofu d
                                                                          tofu
                                                                          |e|)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-10")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list #t)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (q)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((memo 'tofu
                                                                                  '(tofu |e|)
                                                                                  '(tofu |e|))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              q)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (sk ((reify reify-name)
                                                                                                                q
                                                                                                                s)))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-10"
                                                      string
                                                      '(run* (q)
                                                             (memo 'tofu
                                                                   '(tofu |e|)
                                                                   '(tofu |e|))
                                                             (== #t q))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-11")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '()
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (q)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((memo 'tofu
                                                                                  '(tofu |e|)
                                                                                  '(tofu))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== #t
                                                                                              q)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (sk ((reify reify-name)
                                                                                                                q
                                                                                                                s)))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-11"
                                                      string
                                                      '(run* (q)
                                                             (memo 'tofu
                                                                   '(tofu |e|)
                                                                   '(tofu))
                                                             (== #t q))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-12")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list 'tofu)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((memo 'tofu
                                                                                  '(tofu |e|)
                                                                                  (_cons_31
                                                                                    x
                                                                                    '(|e|)))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-12"
                                                      string
                                                      '(run* (x)
                                                             (memo 'tofu
                                                                   '(tofu |e|)
                                                                   `(,x |e|)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-13")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '()
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((memo 'tofu
                                                                                  '(tofu |e|)
                                                                                  (_list_33
                                                                                    'peas
                                                                                    x))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-13"
                                                      string
                                                      '(run* (x)
                                                             (memo 'tofu
                                                                   '(tofu |e|)
                                                                   `(peas ,x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-14")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((tofu d tofu |e|) (tofu |e|))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (out)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (x)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((memo 'tofu
                                                                                                    (_cons_31
                                                                                                      'a
                                                                                                      (_cons_31
                                                                                                        'b
                                                                                                        (_cons_31
                                                                                                          x
                                                                                                          '(d tofu
                                                                                                              |e|))))
                                                                                                    out)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  out
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-14"
                                                      string
                                                      '(run* (out)
                                                             (exist (x)
                                                                    (memo 'tofu
                                                                          `(a b
                                                                              ,x
                                                                              d
                                                                              tofu
                                                                              |e|)
                                                                          out)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-15")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (z)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (u)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((memo 'tofu
                                                                                                       (_cons_31
                                                                                                         'a
                                                                                                         (_cons_31
                                                                                                           'b
                                                                                                           (_cons_31
                                                                                                             'tofu
                                                                                                             (_cons_31
                                                                                                               'd
                                                                                                               (_cons_31
                                                                                                                 'tofu
                                                                                                                 (_cons_31
                                                                                                                   '|e|
                                                                                                                   z))))))
                                                                                                       u)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     z
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(_.0 _.0
                                                  (tofu . _.0)
                                                  (_.0 tofu . _.1)
                                                  (_.0 _.1 tofu . _.2)
                                                  (_.0 _.1 _.2 tofu . _.3)
                                                  (_.0 _.1 _.2 _.3 tofu . _.4)
                                                  (_.0 _.1
                                                       _.2
                                                       _.3
                                                       _.4
                                                       tofu
                                                       .
                                                       _.5)
                                                  (_.0 _.1
                                                       _.2
                                                       _.3
                                                       _.4
                                                       _.5
                                                       tofu
                                                       .
                                                       _.6)
                                                  (_.0 _.1
                                                       _.2
                                                       _.3
                                                       _.4
                                                       _.5
                                                       _.6
                                                       tofu
                                                       .
                                                       _.7)
                                                  (_.0 _.1
                                                       _.2
                                                       _.3
                                                       _.4
                                                       _.5
                                                       _.6
                                                       _.7
                                                       tofu
                                                       .
                                                       _.8)
                                                  (_.0 _.1
                                                       _.2
                                                       _.3
                                                       _.4
                                                       _.5
                                                       _.6
                                                       _.7
                                                       _.8
                                                       tofu
                                                       .
                                                       _.9))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-15"
                                                      string
                                                      '(run+ (z)
                                                             (exist (u)
                                                                    (memo 'tofu
                                                                          `(a b
                                                                              tofu
                                                                              d
                                                                              tofu
                                                                              |e|
                                                                              unquote
                                                                              z)
                                                                          u)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((rembero
                                               (lambda (x l out)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((nullo l)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== '()
                                                                                    out)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((caro l x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((cdro l
                                                                                      out)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (s sk)
                                                                     (lambda ()
                                                                        ((lambda (a d res)
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((conso a
                                                                                           d
                                                                                           l)
                                                                                    s
                                                                                    (lambda (s)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((rembero
                                                                                                    x
                                                                                                    d
                                                                                                    res)
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((conso a
                                                                                                                       res
                                                                                                                       out)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))))))
                                                                             s
                                                                             sk))
                                                                         (make-var
                                                                           s)
                                                                         (make-var
                                                                           s)
                                                                         (make-var
                                                                           s))))
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-17")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (out)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((rembero
                                                                                                   'peas
                                                                                                   (_cons_31
                                                                                                     'a
                                                                                                     (_cons_31
                                                                                                       'b
                                                                                                       (_cons_31
                                                                                                         y
                                                                                                         '(d peas
                                                                                                             |e|))))
                                                                                                   out)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     out
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((a b d peas |e|))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-17"
                                                      string
                                                      '(run+ (out)
                                                             (exist (y)
                                                                    (rembero
                                                                      'peas
                                                                      `(a b
                                                                          ,y
                                                                          d
                                                                          peas
                                                                          |e|)
                                                                      out)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-18")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((b a d _.0 |e|)
                                              (a b d _.0 |e|)
                                              (a b d _.0 |e|)
                                              (a b d _.0 |e|)
                                              (a b _.0 d |e|)
                                              (a b |e| d _.0)
                                              (a b _.0 d _.1 |e|))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (out)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (y z)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((rembero
                                                                                                y
                                                                                                (_cons_31
                                                                                                  'a
                                                                                                  (_cons_31
                                                                                                    'b
                                                                                                    (_cons_31
                                                                                                      y
                                                                                                      (_cons_31
                                                                                                        'd
                                                                                                        (_cons_31
                                                                                                          z
                                                                                                          '(|e|))))))
                                                                                                out)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s)
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  out
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-18"
                                                      string
                                                      '(run* (out)
                                                             (exist (y z)
                                                                    (rembero
                                                                      y
                                                                      `(a b
                                                                          ,y
                                                                          d
                                                                          ,z
                                                                          |e|)
                                                                      out)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-19")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((d d) (d d) (_.0 _.0) (|e| |e|))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (r)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (y z)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((rembero
                                                                                                y
                                                                                                (_cons_31
                                                                                                  y
                                                                                                  (_cons_31
                                                                                                    'd
                                                                                                    (_cons_31
                                                                                                      z
                                                                                                      '(|e|))))
                                                                                                (_cons_31
                                                                                                  y
                                                                                                  '(d |e|)))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== (_list_33
                                                                                                                  y
                                                                                                                  z)
                                                                                                                r)
                                                                                                            s
                                                                                                            sk)))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s)
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  r
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-19"
                                                      string
                                                      '(run* (r)
                                                             (exist (y z)
                                                                    (rembero
                                                                      y
                                                                      `(,y
                                                                        d
                                                                        ,z
                                                                        |e|)
                                                                      `(,y
                                                                        d
                                                                        |e|))
                                                                    (== `(,y ,z)
                                                                        r)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc15.tex-20")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (w)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y z out)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((rembero
                                                                                                   y
                                                                                                   (_cons_31
                                                                                                     'a
                                                                                                     (_cons_31
                                                                                                       'b
                                                                                                       (_cons_31
                                                                                                         y
                                                                                                         (_cons_31
                                                                                                           'd
                                                                                                           (_cons_31
                                                                                                             z
                                                                                                             w)))))
                                                                                                   out)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s)
                                                                                      (make-var
                                                                                        s)
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     w
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(_.0 _.0
                                                  _.0
                                                  _.0
                                                  _.0
                                                  ()
                                                  (_.0 . _.1)
                                                  (_.0)
                                                  (_.0 _.1 . _.2)
                                                  (_.0 _.1)
                                                  (_.0 _.1 _.2 . _.3)
                                                  (_.0 _.1 _.2)
                                                  (_.0 _.1 _.2 _.3 . _.4))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc15.tex-20"
                                                      string
                                                      '(run+ (w)
                                                             (exist (y z out)
                                                                    (rembero
                                                                      y
                                                                      `(a b
                                                                          ,y
                                                                          d
                                                                          ,z
                                                                          unquote
                                                                          w)
                                                                      out)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        ((lambda (surpriseo)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc15.tex-21")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  (list 'd)
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (r)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'd
                                                                                      r)
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((surpriseo
                                                                                                  r)
                                                                                                s
                                                                                                (lambda (s)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (lambda ()
                                                                                                             ((lambda (s sk)
                                                                                                                 (sk ((reify reify-name)
                                                                                                                      r
                                                                                                                      s)))
                                                                                                              s
                                                                                                              sk)))
                                                                                                       s
                                                                                                       sk))))))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc15.tex-21"
                                                            string
                                                            '(run* (r)
                                                                   (== 'd r)
                                                                   (surpriseo
                                                                     r))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc15.tex-22")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '(_.0)
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (r)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((surpriseo
                                                                                    r)
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        r
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc15.tex-22"
                                                            string
                                                            '(run* (r)
                                                                   (surpriseo
                                                                     r))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc15.tex-23")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '(b)
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (r)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== 'b
                                                                                      r)
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((surpriseo
                                                                                                  r)
                                                                                                s
                                                                                                (lambda (s)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (lambda ()
                                                                                                             ((lambda (s sk)
                                                                                                                 (sk ((reify reify-name)
                                                                                                                      r
                                                                                                                      s)))
                                                                                                              s
                                                                                                              sk)))
                                                                                                       s
                                                                                                       sk))))))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc15.tex-23"
                                                            string
                                                            '(run* (r)
                                                                   (== 'b r)
                                                                   (surpriseo
                                                                     r))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin
                                                    (newline)
                                                    (if #f #f))))))
                                         (lambda (s)
                                            (rembero s '(a b c) '(a b c))))))
                                    (letrec ((appendo
                                               (lambda (l s out)
                                                  (lambda (_s_66 sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((nullo l)
                                                                  _s_68
                                                                  (lambda (_s_70)
                                                                     (lambda ()
                                                                        ((lambda (_s_71 sk)
                                                                            (lambda ()
                                                                               ((== s
                                                                                    out)
                                                                                _s_71
                                                                                sk)))
                                                                         _s_70
                                                                         sk))))))
                                                           _s_66
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((lambda (_s_70 sk)
                                                                     (lambda ()
                                                                        ((lambda (a d res)
                                                                            ((lambda (_s_75 sk)
                                                                                (lambda ()
                                                                                   ((caro l
                                                                                          a)
                                                                                    _s_75
                                                                                    (lambda (_s_77)
                                                                                       (lambda ()
                                                                                          ((lambda (_s_78 sk)
                                                                                              (lambda ()
                                                                                                 ((cdro l
                                                                                                        d)
                                                                                                  _s_78
                                                                                                  (lambda (_s_80)
                                                                                                     (lambda ()
                                                                                                        ((lambda (_s_81 sk)
                                                                                                            (lambda ()
                                                                                                               ((appendo
                                                                                                                  d
                                                                                                                  s
                                                                                                                  res)
                                                                                                                _s_81
                                                                                                                (lambda (s)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (lambda ()
                                                                                                                             ((conso a
                                                                                                                                     res
                                                                                                                                     out)
                                                                                                                              s
                                                                                                                              sk)))
                                                                                                                       s
                                                                                                                       sk))))))
                                                                                                         _s_80
                                                                                                         sk))))))
                                                                                           _s_77
                                                                                           sk))))))
                                                                             _s_70
                                                                             sk))
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70))))
                                                                  _s_68
                                                                  sk)))
                                                           _s_66
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-5")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '(cake tastes yummy))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((appendo
                                                                              '(cake)
                                                                              '(tastes
                                                                                 yummy)
                                                                              x)
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-5"
                                                      string
                                                      '(run* (x)
                                                             (appendo
                                                               '(cake)
                                                               '(tastes yummy)
                                                               x))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-6")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '(cake with
                                                         ice
                                                         _.0
                                                         tastes
                                                         yummy))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (y)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((appendo
                                                                                                (_list_33
                                                                                                  'cake
                                                                                                  'with
                                                                                                  'ice
                                                                                                  y)
                                                                                                '(tastes
                                                                                                   yummy)
                                                                                                x)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-6"
                                                      string
                                                      '(run* (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             ,y)
                                                                      '(tastes
                                                                         yummy)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-7")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            (list '(cake with ice cream . _.0))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (y)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((appendo
                                                                                                '(cake with
                                                                                                       ice
                                                                                                       cream)
                                                                                                y
                                                                                                x)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-7"
                                                      string
                                                      '(run* (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      '(cake with
                                                                             ice
                                                                             cream)
                                                                      y
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-8")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   (_cons_31
                                                                                                     'cake
                                                                                                     (_cons_31
                                                                                                       'with
                                                                                                       (_cons_31
                                                                                                         'ice
                                                                                                         y)))
                                                                                                   '(d t)
                                                                                                   x)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            (list '(cake with ice d t))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-8"
                                                      string
                                                      '(run+ (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             unquote
                                                                             y)
                                                                      '(d t)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-9")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (y)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (x)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   (_cons_31
                                                                                                     'cake
                                                                                                     (_cons_31
                                                                                                       'with
                                                                                                       (_cons_31
                                                                                                         'ice
                                                                                                         y)))
                                                                                                   '(d t)
                                                                                                   x)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     y
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            (list '())
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-9"
                                                      string
                                                      '(run+ (y)
                                                             (exist (x)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             unquote
                                                                             y)
                                                                      '(d t)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((appendo
                                               (lambda (l s out)
                                                  (lambda (_s_66 sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((nullo l)
                                                                  _s_68
                                                                  (lambda (_s_70)
                                                                     (lambda ()
                                                                        ((lambda (_s_71 sk)
                                                                            (lambda ()
                                                                               ((== s
                                                                                    out)
                                                                                _s_71
                                                                                sk)))
                                                                         _s_70
                                                                         sk))))))
                                                           _s_66
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((lambda (_s_70 sk)
                                                                     (lambda ()
                                                                        ((lambda (a d res)
                                                                            ((lambda (_s_75 sk)
                                                                                (lambda ()
                                                                                   ((conso a
                                                                                           d
                                                                                           l)
                                                                                    _s_75
                                                                                    (lambda (_s_77)
                                                                                       (lambda ()
                                                                                          ((lambda (_s_78 sk)
                                                                                              (lambda ()
                                                                                                 ((appendo
                                                                                                    d
                                                                                                    s
                                                                                                    res)
                                                                                                  _s_78
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((conso a
                                                                                                                       res
                                                                                                                       out)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           _s_77
                                                                                           sk))))))
                                                                             _s_70
                                                                             sk))
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70))))
                                                                  _s_68
                                                                  sk)))
                                                           _s_66
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-10")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   (_cons_31
                                                                                                     'cake
                                                                                                     (_cons_31
                                                                                                       'with
                                                                                                       (_cons_31
                                                                                                         'ice
                                                                                                         y)))
                                                                                                   '(d t)
                                                                                                   x)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((cake with ice d t)
                                              (cake with ice _.0 d t)
                                              (cake with ice _.0 _.1 d t)
                                              (cake with ice _.0 _.1 _.2 d t)
                                              (cake with
                                                    ice
                                                    _.0
                                                    _.1
                                                    _.2
                                                    _.3
                                                    d
                                                    t))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-10"
                                                      string
                                                      '(run+ (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             unquote
                                                                             y)
                                                                      '(d t)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-11")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (y)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (x)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   (_cons_31
                                                                                                     'cake
                                                                                                     (_cons_31
                                                                                                       'with
                                                                                                       (_cons_31
                                                                                                         'ice
                                                                                                         y)))
                                                                                                   '(d t)
                                                                                                   x)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     y
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(()
                                              (_.0)
                                              (_.0 _.1)
                                              (_.0 _.1 _.2)
                                              (_.0 _.1 _.2 _.3))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-11"
                                                      string
                                                      '(run+ (y)
                                                             (exist (x)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             unquote
                                                                             y)
                                                                      '(d t)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-13")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   (_cons_31
                                                                                                     'cake
                                                                                                     (_cons_31
                                                                                                       'with
                                                                                                       (_cons_31
                                                                                                         'ice
                                                                                                         y)))
                                                                                                   (_cons_31
                                                                                                     'd
                                                                                                     (_cons_31
                                                                                                       't
                                                                                                       y))
                                                                                                   x)
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((cake with ice d t)
                                              (cake with ice _.0 d t _.0)
                                              (cake with
                                                    ice
                                                    _.0
                                                    _.1
                                                    d
                                                    t
                                                    _.0
                                                    _.1)
                                              (cake with
                                                    ice
                                                    _.0
                                                    _.1
                                                    _.2
                                                    d
                                                    t
                                                    _.0
                                                    _.1
                                                    _.2)
                                              (cake with
                                                    ice
                                                    _.0
                                                    _.1
                                                    _.2
                                                    _.3
                                                    d
                                                    t
                                                    _.0
                                                    _.1
                                                    _.2
                                                    _.3))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-13"
                                                      string
                                                      '(run+ (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             unquote
                                                                             y)
                                                                      `(d t
                                                                          unquote
                                                                          y)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-14")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((cake with ice cream d t . _.0))
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (z)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((appendo
                                                                                                '(cake with
                                                                                                       ice
                                                                                                       cream)
                                                                                                (_cons_31
                                                                                                  'd
                                                                                                  (_cons_31
                                                                                                    't
                                                                                                    z))
                                                                                                x)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-14"
                                                      string
                                                      '(run* (x)
                                                             (exist (z)
                                                                    (appendo
                                                                      `(cake with
                                                                             ice
                                                                             cream)
                                                                      `(d t
                                                                          unquote
                                                                          z)
                                                                      x)))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-15")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (y)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   x
                                                                                                   y
                                                                                                   '(cake with
                                                                                                          ice
                                                                                                          d
                                                                                                          t))
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(()
                                              (cake)
                                              (cake with)
                                              (cake with ice)
                                              (cake with ice d)
                                              (cake with ice d t))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-15"
                                                      string
                                                      '(run+ (x)
                                                             (exist (y)
                                                                    (appendo
                                                                      x
                                                                      y
                                                                      `(cake with
                                                                             ice
                                                                             d
                                                                             t))))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-16")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (y)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (x)
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((appendo
                                                                                                   x
                                                                                                   y
                                                                                                   '(cake with
                                                                                                          ice
                                                                                                          d
                                                                                                          t))
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))
                                                                                      (make-var
                                                                                        s))))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     y
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '((cake with ice d t)
                                              (with ice d t)
                                              (ice d t)
                                              (d t)
                                              (t)
                                              ())
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-16"
                                                      string
                                                      '(run+ (y)
                                                             (exist (x)
                                                                    (appendo
                                                                      x
                                                                      y
                                                                      `(cake with
                                                                             ice
                                                                             d
                                                                             t))))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        ((lambda (appendxyquestion appendxyanswer)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "appendxy")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-ftest
                                                  (lambda () (appendxyquestion))
                                                  appendxyanswer
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"appendxy"
                                                            string
                                                            '(appendxyquestion)
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (letrec ((appendo
                                                         (lambda (l s out)
                                                            (lambda (_s_69 sk)
                                                               (_list_33
                                                                 '#f
                                                                 (lambda ()
                                                                    ((lambda (_s_71 sk)
                                                                        (lambda ()
                                                                           ((nullo l)
                                                                            _s_71
                                                                            (lambda (_s_73)
                                                                               (lambda ()
                                                                                  ((lambda (_s_74 sk)
                                                                                      (lambda ()
                                                                                         ((== s
                                                                                              out)
                                                                                          _s_74
                                                                                          sk)))
                                                                                   _s_73
                                                                                   sk))))))
                                                                     _s_69
                                                                     sk))
                                                                 (lambda ()
                                                                    ((lambda (_s_71 sk)
                                                                        (lambda ()
                                                                           ((lambda (_s_73 sk)
                                                                               (lambda ()
                                                                                  ((lambda (a d res)
                                                                                      ((lambda (_s_78 sk)
                                                                                          (lambda ()
                                                                                             ((conso a
                                                                                                     d
                                                                                                     l)
                                                                                              _s_78
                                                                                              (lambda (_s_80)
                                                                                                 (lambda ()
                                                                                                    ((lambda (_s_81 sk)
                                                                                                        (lambda ()
                                                                                                           ((conso a
                                                                                                                   res
                                                                                                                   out)
                                                                                                            _s_81
                                                                                                            (lambda (_s_83)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (_s_84 sk)
                                                                                                                      (lambda ()
                                                                                                                         ((appendo
                                                                                                                            d
                                                                                                                            s
                                                                                                                            res)
                                                                                                                          _s_84
                                                                                                                          sk)))
                                                                                                                   _s_83
                                                                                                                   sk))))))
                                                                                                     _s_80
                                                                                                     sk))))))
                                                                                       _s_73
                                                                                       sk))
                                                                                   (make-var
                                                                                     _s_73)
                                                                                   (make-var
                                                                                     _s_73)
                                                                                   (make-var
                                                                                     _s_73))))
                                                                            _s_71
                                                                            sk)))
                                                                     _s_69
                                                                     sk)))))))
                                                (begin
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc16.tex-18")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-test
                                                      appendxyanswer
                                                      multiset-equal?
                                                      ((lambda (n)
                                                          (begin
                                                            (unless
                                                              ((lambda (x)
                                                                  (if x
                                                                    x
                                                                    (if (integer?
                                                                          n)
                                                                      (if (exact?
                                                                            n)
                                                                        (positive?
                                                                          n)
                                                                        #f)
                                                                      #f)))
                                                               (boolean? n))
                                                              (error 'run
                                                                     "not an exact positive integer"
                                                                     n))
                                                            ((if (number? n)
                                                               (|take'| n)
                                                               (if n
                                                                 take+
                                                                 take*))
                                                             (list ((lambda (s sk)
                                                                       (lambda ()
                                                                          ((lambda (r)
                                                                              ((lambda (s sk)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (x y)
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((appendo
                                                                                                          x
                                                                                                          y
                                                                                                          '(cake with
                                                                                                                 ice
                                                                                                                 d
                                                                                                                 t))
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== (_list_33
                                                                                                                            x
                                                                                                                            y)
                                                                                                                          r)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))
                                                                                             (make-var
                                                                                               s)
                                                                                             (make-var
                                                                                               s))))
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (sk ((reify reify-name)
                                                                                                            r
                                                                                                            s)))
                                                                                                    s
                                                                                                    sk)))
                                                                                             s
                                                                                             sk))))))
                                                                               s
                                                                               sk))
                                                                           (make-var
                                                                             s))))
                                                                    empty-s
                                                                    (lambda (a)
                                                                       (_cons_31
                                                                         '#t
                                                                         a)))))))
                                                       7)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc16.tex-18"
                                                                string
                                                                '(run 7
                                                                      (r)
                                                                      (exist (x y)
                                                                             (appendo
                                                                               x
                                                                               y
                                                                               `(cake with
                                                                                      ice
                                                                                      d
                                                                                      t))
                                                                             (== `(,x
                                                                                   ,y)
                                                                                 r)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc16.tex-19")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-ftest
                                                      (lambda ()
                                                         ((lambda (n)
                                                             (begin
                                                               (unless
                                                                 ((lambda (x)
                                                                     (if x
                                                                       x
                                                                       (if (integer?
                                                                             n)
                                                                         (if (exact?
                                                                               n)
                                                                           (positive?
                                                                             n)
                                                                           #f)
                                                                         #f)))
                                                                  (boolean? n))
                                                                 (error 'run
                                                                        "not an exact positive integer"
                                                                        n))
                                                               ((if (number? n)
                                                                  (|take'| n)
                                                                  (if n
                                                                    take+
                                                                    take*))
                                                                (list ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (x)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (y z)
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((appendo
                                                                                                             x
                                                                                                             y
                                                                                                             z)
                                                                                                           s
                                                                                                           sk)))
                                                                                                    s
                                                                                                    sk))
                                                                                                (make-var
                                                                                                  s)
                                                                                                (make-var
                                                                                                  s))))
                                                                                         s
                                                                                         (lambda (s)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (sk ((reify reify-name)
                                                                                                               x
                                                                                                               s)))
                                                                                                       s
                                                                                                       sk)))
                                                                                                s
                                                                                                sk))))))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       empty-s
                                                                       (lambda (a)
                                                                          (_cons_31
                                                                            '#t
                                                                            a)))))))
                                                          #t))
                                                      '(()
                                                        (_.0)
                                                        (_.0 _.1)
                                                        (_.0 _.1 _.2)
                                                        (_.0 _.1 _.2 _.3)
                                                        (_.0 _.1 _.2 _.3 _.4)
                                                        (_.0 _.1
                                                             _.2
                                                             _.3
                                                             _.4
                                                             _.5))
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc16.tex-19"
                                                                string
                                                                '(run+ (x)
                                                                       (exist (y z)
                                                                              (appendo
                                                                                x
                                                                                y
                                                                                z)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc16.tex-20")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-ftest
                                                      (lambda ()
                                                         ((lambda (n)
                                                             (begin
                                                               (unless
                                                                 ((lambda (x)
                                                                     (if x
                                                                       x
                                                                       (if (integer?
                                                                             n)
                                                                         (if (exact?
                                                                               n)
                                                                           (positive?
                                                                             n)
                                                                           #f)
                                                                         #f)))
                                                                  (boolean? n))
                                                                 (error 'run
                                                                        "not an exact positive integer"
                                                                        n))
                                                               ((if (number? n)
                                                                  (|take'| n)
                                                                  (if n
                                                                    take+
                                                                    take*))
                                                                (list ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (y)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (x z)
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((appendo
                                                                                                             x
                                                                                                             y
                                                                                                             z)
                                                                                                           s
                                                                                                           sk)))
                                                                                                    s
                                                                                                    sk))
                                                                                                (make-var
                                                                                                  s)
                                                                                                (make-var
                                                                                                  s))))
                                                                                         s
                                                                                         (lambda (s)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (sk ((reify reify-name)
                                                                                                               y
                                                                                                               s)))
                                                                                                       s
                                                                                                       sk)))
                                                                                                s
                                                                                                sk))))))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       empty-s
                                                                       (lambda (a)
                                                                          (_cons_31
                                                                            '#t
                                                                            a)))))))
                                                          #t))
                                                      '(_.0 _.0
                                                            _.0
                                                            _.0
                                                            _.0
                                                            _.0
                                                            _.0)
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc16.tex-20"
                                                                string
                                                                '(run+ (y)
                                                                       (exist (x z)
                                                                              (appendo
                                                                                x
                                                                                y
                                                                                z)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc16.tex-21")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-ftest
                                                      (lambda ()
                                                         ((lambda (n)
                                                             (begin
                                                               (unless
                                                                 ((lambda (x)
                                                                     (if x
                                                                       x
                                                                       (if (integer?
                                                                             n)
                                                                         (if (exact?
                                                                               n)
                                                                           (positive?
                                                                             n)
                                                                           #f)
                                                                         #f)))
                                                                  (boolean? n))
                                                                 (error 'run
                                                                        "not an exact positive integer"
                                                                        n))
                                                               ((if (number? n)
                                                                  (|take'| n)
                                                                  (if n
                                                                    take+
                                                                    take*))
                                                                (list ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (z)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (x y)
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((appendo
                                                                                                             x
                                                                                                             y
                                                                                                             z)
                                                                                                           s
                                                                                                           sk)))
                                                                                                    s
                                                                                                    sk))
                                                                                                (make-var
                                                                                                  s)
                                                                                                (make-var
                                                                                                  s))))
                                                                                         s
                                                                                         (lambda (s)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (sk ((reify reify-name)
                                                                                                               z
                                                                                                               s)))
                                                                                                       s
                                                                                                       sk)))
                                                                                                s
                                                                                                sk))))))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       empty-s
                                                                       (lambda (a)
                                                                          (_cons_31
                                                                            '#t
                                                                            a)))))))
                                                          #t))
                                                      '(_.0 (_.0 . _.1)
                                                            (_.0 _.1 . _.2)
                                                            (_.0 _.1 _.2 . _.3)
                                                            (_.0 _.1
                                                                 _.2
                                                                 _.3
                                                                 .
                                                                 _.4)
                                                            (_.0 _.1
                                                                 _.2
                                                                 _.3
                                                                 _.4
                                                                 .
                                                                 _.5)
                                                            (_.0 _.1
                                                                 _.2
                                                                 _.3
                                                                 _.4
                                                                 _.5
                                                                 .
                                                                 _.6))
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc16.tex-21"
                                                                string
                                                                '(run+ (z)
                                                                       (exist (x y)
                                                                              (appendo
                                                                                x
                                                                                y
                                                                                z)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))
                                                  (begin
                                                    (begin
                                                      (display "Testing ")
                                                      (begin
                                                        (display
                                                          "testc16.tex-22")
                                                        (begin
                                                          (display "...")
                                                          (if #f #f))))
                                                    (do-ftest
                                                      (lambda ()
                                                         ((lambda (n)
                                                             (begin
                                                               (unless
                                                                 ((lambda (x)
                                                                     (if x
                                                                       x
                                                                       (if (integer?
                                                                             n)
                                                                         (if (exact?
                                                                               n)
                                                                           (positive?
                                                                             n)
                                                                           #f)
                                                                         #f)))
                                                                  (boolean? n))
                                                                 (error 'run
                                                                        "not an exact positive integer"
                                                                        n))
                                                               ((if (number? n)
                                                                  (|take'| n)
                                                                  (if n
                                                                    take+
                                                                    take*))
                                                                (list ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (r)
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (x y z)
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((appendo
                                                                                                             x
                                                                                                             y
                                                                                                             z)
                                                                                                           s
                                                                                                           (lambda (s)
                                                                                                              (lambda ()
                                                                                                                 ((lambda (s sk)
                                                                                                                     (lambda ()
                                                                                                                        ((== (_list_33
                                                                                                                               x
                                                                                                                               y
                                                                                                                               z)
                                                                                                                             r)
                                                                                                                         s
                                                                                                                         sk)))
                                                                                                                  s
                                                                                                                  sk))))))
                                                                                                    s
                                                                                                    sk))
                                                                                                (make-var
                                                                                                  s)
                                                                                                (make-var
                                                                                                  s)
                                                                                                (make-var
                                                                                                  s))))
                                                                                         s
                                                                                         (lambda (s)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (lambda ()
                                                                                                      ((lambda (s sk)
                                                                                                          (sk ((reify reify-name)
                                                                                                               r
                                                                                                               s)))
                                                                                                       s
                                                                                                       sk)))
                                                                                                s
                                                                                                sk))))))
                                                                                  s
                                                                                  sk))
                                                                              (make-var
                                                                                s))))
                                                                       empty-s
                                                                       (lambda (a)
                                                                          (_cons_31
                                                                            '#t
                                                                            a)))))))
                                                          #t))
                                                      '((() _.0 _.0)
                                                        ((_.0) _.1 (_.0 . _.1))
                                                        ((_.0 _.1)
                                                         _.2
                                                         (_.0 _.1 . _.2))
                                                        ((_.0 _.1 _.2)
                                                         _.3
                                                         (_.0 _.1 _.2 . _.3))
                                                        ((_.0 _.1 _.2 _.3)
                                                         _.4
                                                         (_.0 _.1
                                                              _.2
                                                              _.3
                                                              .
                                                              _.4))
                                                        ((_.0 _.1 _.2 _.3 _.4)
                                                         _.5
                                                         (_.0 _.1
                                                              _.2
                                                              _.3
                                                              _.4
                                                              .
                                                              _.5))
                                                        ((_.0 _.1
                                                              _.2
                                                              _.3
                                                              _.4
                                                              _.5)
                                                         _.6
                                                         (_.0 _.1
                                                              _.2
                                                              _.3
                                                              _.4
                                                              _.5
                                                              .
                                                              _.6)))
                                                      (lambda (string . irr)
                                                         (apply error
                                                                '"testc16.tex-22"
                                                                string
                                                                '(run+ (r)
                                                                       (exist (x y
                                                                                 z)
                                                                              (appendo
                                                                                x
                                                                                y
                                                                                z)
                                                                              (== `(,x
                                                                                    ,y
                                                                                    ,z)
                                                                                  r)))
                                                                irr)))
                                                    (begin
                                                      (display " done")
                                                      (begin
                                                        (newline)
                                                        (if #f #f))))))))
                                         (lambda ()
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (r)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (x y)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((appendo
                                                                                                x
                                                                                                y
                                                                                                '(cake with
                                                                                                       ice
                                                                                                       d
                                                                                                       t))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== (_list_33
                                                                                                                  x
                                                                                                                  y)
                                                                                                                r)
                                                                                                            s
                                                                                                            sk)))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s)
                                                                                   (make-var
                                                                                     s))))
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  r
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #t))
                                         '((() (cake with ice d t))
                                           ((cake) (with ice d t))
                                           ((cake with) (ice d t))
                                           ((cake with ice) (d t))
                                           ((cake with ice d) (t))
                                           ((cake with ice d t) ())))
                                        (letrec ((flatteno
                                                   (lambda (s out)
                                                      (lambda (_s_66 sk)
                                                         (_list_33
                                                           '#f
                                                           (lambda ()
                                                              ((lambda (_s_68 sk)
                                                                  (lambda ()
                                                                     ((nullo s)
                                                                      _s_68
                                                                      (lambda (s)
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((== '()
                                                                                        out)
                                                                                    s
                                                                                    sk)))
                                                                             s
                                                                             sk))))))
                                                               _s_66
                                                               sk))
                                                           (lambda ()
                                                              ((lambda (_s_68 sk)
                                                                  (lambda ()
                                                                     ((pairo s)
                                                                      _s_68
                                                                      (lambda (_s_70)
                                                                         (lambda ()
                                                                            ((lambda (_s_71 sk)
                                                                                (lambda ()
                                                                                   ((lambda (_s_73 sk)
                                                                                       (lambda ()
                                                                                          ((lambda (a d res-a res-d)
                                                                                              ((lambda (_s_79 sk)
                                                                                                  (lambda ()
                                                                                                     ((conso a
                                                                                                             d
                                                                                                             s)
                                                                                                      _s_79
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((flatteno
                                                                                                                      a
                                                                                                                      res-a)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((flatteno
                                                                                                                                    d
                                                                                                                                    res-d)
                                                                                                                                  s
                                                                                                                                  (lambda (s)
                                                                                                                                     (lambda ()
                                                                                                                                        ((lambda (s sk)
                                                                                                                                            (lambda ()
                                                                                                                                               ((appendo
                                                                                                                                                  res-a
                                                                                                                                                  res-d
                                                                                                                                                  out)
                                                                                                                                                s
                                                                                                                                                sk)))
                                                                                                                                         s
                                                                                                                                         sk))))))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               _s_73
                                                                                               sk))
                                                                                           (make-var
                                                                                             _s_73)
                                                                                           (make-var
                                                                                             _s_73)
                                                                                           (make-var
                                                                                             _s_73)
                                                                                           (make-var
                                                                                             _s_73))))
                                                                                    _s_71
                                                                                    sk)))
                                                                             _s_70
                                                                             sk))))))
                                                               _s_66
                                                               sk))
                                                           (lambda ()
                                                              ((lambda (_s_68 sk)
                                                                  (lambda ()
                                                                     ((conso s
                                                                             '()
                                                                             out)
                                                                      _s_68
                                                                      sk)))
                                                               _s_66
                                                               sk)))))))
                                          (begin
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-33")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-ftest
                                                (lambda ()
                                                   ((lambda (n)
                                                       (begin
                                                         (unless
                                                           ((lambda (x)
                                                               (if x
                                                                 x
                                                                 (if (integer?
                                                                       n)
                                                                   (if (exact?
                                                                         n)
                                                                     (positive?
                                                                       n)
                                                                     #f)
                                                                   #f)))
                                                            (boolean? n))
                                                           (error 'run
                                                                  "not an exact positive integer"
                                                                  n))
                                                         ((if (number? n)
                                                            (|take'| n)
                                                            (if n take+ take*))
                                                          (list ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((lambda (x)
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((flatteno
                                                                                     '((a b)
                                                                                       c)
                                                                                     x)
                                                                                   s
                                                                                   (lambda (s)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (sk ((reify reify-name)
                                                                                                         x
                                                                                                         s)))
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))))))
                                                                            s
                                                                            sk))
                                                                        (make-var
                                                                          s))))
                                                                 empty-s
                                                                 (lambda (a)
                                                                    (_cons_31
                                                                      '#t
                                                                      a)))))))
                                                    #t))
                                                '((((a b) c))
                                                  ((a b) (c))
                                                  ((a b) c)
                                                  (a (b) (c))
                                                  ((a b) c ())
                                                  (a (b) c)
                                                  (a (b) c ())
                                                  (a b (c))
                                                  (a b () (c))
                                                  (a b c))
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-33"
                                                          string
                                                          '(run+ (x)
                                                                 (flatteno
                                                                   '((a b) c)
                                                                   x))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-34")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-ftest
                                                (lambda ()
                                                   ((lambda (n)
                                                       (begin
                                                         (unless
                                                           ((lambda (x)
                                                               (if x
                                                                 x
                                                                 (if (integer?
                                                                       n)
                                                                   (if (exact?
                                                                         n)
                                                                     (positive?
                                                                       n)
                                                                     #f)
                                                                   #f)))
                                                            (boolean? n))
                                                           (error 'run
                                                                  "not an exact positive integer"
                                                                  n))
                                                         ((if (number? n)
                                                            (|take'| n)
                                                            (if n take+ take*))
                                                          (list ((lambda (s sk)
                                                                    (lambda ()
                                                                       ((lambda (x)
                                                                           ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((flatteno
                                                                                     '(a (b c))
                                                                                     x)
                                                                                   s
                                                                                   (lambda (s)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (sk ((reify reify-name)
                                                                                                         x
                                                                                                         s)))
                                                                                                 s
                                                                                                 sk)))
                                                                                          s
                                                                                          sk))))))
                                                                            s
                                                                            sk))
                                                                        (make-var
                                                                          s))))
                                                                 empty-s
                                                                 (lambda (a)
                                                                    (_cons_31
                                                                      '#t
                                                                      a)))))))
                                                    #t))
                                                '(((a (b c)))
                                                  (a ((b c)))
                                                  (a (b c))
                                                  (a (b c) ())
                                                  (a b (c))
                                                  (a b (c) ())
                                                  (a b c)
                                                  (a b c ())
                                                  (a b c ())
                                                  (a b c () ()))
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-34"
                                                          string
                                                          '(run+ (x)
                                                                 (flatteno
                                                                   '(a (b c))
                                                                   x))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-35")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '(((a)) (a) (a ()))
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((flatteno
                                                                                  '(a)
                                                                                  x)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 #f)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-35"
                                                          string
                                                          '(run* (x)
                                                                 (flatteno
                                                                   '(a)
                                                                   x))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-36")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '((((a)))
                                                  ((a))
                                                  ((a) ())
                                                  (a)
                                                  (a ())
                                                  (a ())
                                                  (a () ()))
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((flatteno
                                                                                  '((a))
                                                                                  x)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 #f)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-36"
                                                          string
                                                          '(run* (x)
                                                                 (flatteno
                                                                   '((a))
                                                                   x))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-37")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                '(((((a))))
                                                  (((a)))
                                                  (((a)) ())
                                                  ((a))
                                                  ((a) ())
                                                  ((a) ())
                                                  ((a) () ())
                                                  (a)
                                                  (a ())
                                                  (a ())
                                                  (a () ())
                                                  (a ())
                                                  (a () ())
                                                  (a () ())
                                                  (a () () ()))
                                                multiset-equal?
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((flatteno
                                                                                  '(((a)))
                                                                                  x)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 #f)
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-37"
                                                          string
                                                          '(run* (x)
                                                                 (flatteno
                                                                   '(((a)))
                                                                   x))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin (newline) (if #f #f))))
                                            ((lambda (flattenogrumblequestion flattenogrumbleanswer)
                                                (begin
                                                  (begin
                                                    (display "Testing ")
                                                    (begin
                                                      (display
                                                        "flattenogrumble")
                                                      (begin
                                                        (display "...")
                                                        (if #f #f))))
                                                  (do-test
                                                    flattenogrumbleanswer
                                                    multiset-equal?
                                                    (flattenogrumblequestion)
                                                    (lambda (string . irr)
                                                       (apply error
                                                              '"flattenogrumble"
                                                              string
                                                              '(flattenogrumblequestion)
                                                              irr)))
                                                  (begin
                                                    (display " done")
                                                    (begin
                                                      (newline)
                                                      (if #f #f)))))
                                             (lambda ()
                                                ((lambda (n)
                                                    (begin
                                                      (unless
                                                        ((lambda (x)
                                                            (if x
                                                              x
                                                              (if (integer? n)
                                                                (if (exact? n)
                                                                  (positive? n)
                                                                  #f)
                                                                #f)))
                                                         (boolean? n))
                                                        (error 'run
                                                               "not an exact positive integer"
                                                               n))
                                                      ((if (number? n)
                                                         (|take'| n)
                                                         (if n take+ take*))
                                                       (list ((lambda (s sk)
                                                                 (lambda ()
                                                                    ((lambda (x)
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((flatteno
                                                                                  '((a b)
                                                                                    c)
                                                                                  x)
                                                                                s
                                                                                (lambda (s)
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((lambda (s sk)
                                                                                                 (sk ((reify reify-name)
                                                                                                      x
                                                                                                      s)))
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))))
                                                                         s
                                                                         sk))
                                                                     (make-var
                                                                       s))))
                                                              empty-s
                                                              (lambda (a)
                                                                 (_cons_31
                                                                   '#t
                                                                   a)))))))
                                                 #f))
                                             '((((a b) c))
                                               ((a b) (c))
                                               ((a b) c)
                                               (a (b) (c))
                                               ((a b) c ())
                                               (a (b) c)
                                               (a (b) c ())
                                               (a b (c))
                                               (a b () (c))
                                               (a b c)
                                               (a b c ())
                                               (a b () c)
                                               (a b () c ())))
                                            (begin
                                              (begin
                                                (display "Testing ")
                                                (begin
                                                  (display "testc16.tex-39")
                                                  (begin
                                                    (display "...")
                                                    (if #f #f))))
                                              (do-test
                                                574
                                                equal?
                                                (length
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (x)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((flatteno
                                                                                    '((((a (((b)))
                                                                                           c)))
                                                                                      d)
                                                                                    x)
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        x
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f))
                                                (lambda (string . irr)
                                                   (apply error
                                                          '"testc16.tex-39"
                                                          string
                                                          '(length
                                                             (run* (x)
                                                                   (flatteno
                                                                     '((((a (((b)))
                                                                            c)))
                                                                       d)
                                                                     x)))
                                                          irr)))
                                              (begin
                                                (display " done")
                                                (begin
                                                  (newline)
                                                  (if #f #f))))))))
                                    (letrec ((swappendo
                                               (lambda (l s out)
                                                  (lambda (_s_66 sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((lambda (_s_70 sk)
                                                                     (lambda ()
                                                                        ((lambda (a d res)
                                                                            ((lambda (_s_75 sk)
                                                                                (lambda ()
                                                                                   ((conso a
                                                                                           d
                                                                                           l)
                                                                                    _s_75
                                                                                    (lambda (_s_77)
                                                                                       (lambda ()
                                                                                          ((lambda (_s_78 sk)
                                                                                              (lambda ()
                                                                                                 ((conso a
                                                                                                         res
                                                                                                         out)
                                                                                                  _s_78
                                                                                                  (lambda (_s_80)
                                                                                                     (lambda ()
                                                                                                        ((lambda (_s_81 sk)
                                                                                                            (lambda ()
                                                                                                               ((swappendo
                                                                                                                  d
                                                                                                                  s
                                                                                                                  res)
                                                                                                                _s_81
                                                                                                                sk)))
                                                                                                         _s_80
                                                                                                         sk))))))
                                                                                           _s_77
                                                                                           sk))))))
                                                                             _s_70
                                                                             sk))
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70)
                                                                         (make-var
                                                                           _s_70))))
                                                                  _s_68
                                                                  sk)))
                                                           _s_66
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (_s_68 sk)
                                                              (lambda ()
                                                                 ((nullo l)
                                                                  _s_68
                                                                  (lambda (_s_70)
                                                                     (lambda ()
                                                                        ((lambda (_s_71 sk)
                                                                            (lambda ()
                                                                               ((== s
                                                                                    out)
                                                                                _s_71
                                                                                sk)))
                                                                         _s_70
                                                                         sk))))))
                                                           _s_66
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (display "Testing ")
                                          (begin
                                            (display "testc16.tex-23")
                                            (begin (display "...") (if #f #f))))
                                        (do-ftest
                                          (lambda ()
                                             ((lambda (n)
                                                 (begin
                                                   (unless
                                                     ((lambda (x)
                                                         (if x
                                                           x
                                                           (if (integer? n)
                                                             (if (exact? n)
                                                               (positive? n)
                                                               #f)
                                                             #f)))
                                                      (boolean? n))
                                                     (error 'run
                                                            "not an exact positive integer"
                                                            n))
                                                   ((if (number? n)
                                                      (|take'| n)
                                                      (if n take+ take*))
                                                    (list ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (r)
                                                                     ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (x y z)
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((swappendo
                                                                                                 x
                                                                                                 y
                                                                                                 z)
                                                                                               s
                                                                                               (lambda (s)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (lambda ()
                                                                                                            ((== (_list_33
                                                                                                                   x
                                                                                                                   y
                                                                                                                   z)
                                                                                                                 r)
                                                                                                             s
                                                                                                             sk)))
                                                                                                      s
                                                                                                      sk))))))
                                                                                        s
                                                                                        sk))
                                                                                    (make-var
                                                                                      s)
                                                                                    (make-var
                                                                                      s)
                                                                                    (make-var
                                                                                      s))))
                                                                             s
                                                                             (lambda (s)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (sk ((reify reify-name)
                                                                                                   r
                                                                                                   s)))
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))))))
                                                                      s
                                                                      sk))
                                                                  (make-var
                                                                    s))))
                                                           empty-s
                                                           (lambda (a)
                                                              (_cons_31
                                                                '#t
                                                                a)))))))
                                              #t))
                                          '((() _.0 _.0)
                                            ((_.0) _.1 (_.0 . _.1))
                                            ((_.0 _.1) _.2 (_.0 _.1 . _.2))
                                            ((_.0 _.1 _.2)
                                             _.3
                                             (_.0 _.1 _.2 . _.3))
                                            ((_.0 _.1 _.2 _.3)
                                             _.4
                                             (_.0 _.1 _.2 _.3 . _.4))
                                            ((_.0 _.1 _.2 _.3 _.4)
                                             _.5
                                             (_.0 _.1 _.2 _.3 _.4 . _.5))
                                            ((_.0 _.1 _.2 _.3 _.4 _.5)
                                             _.6
                                             (_.0 _.1 _.2 _.3 _.4 _.5 . _.6)))
                                          (lambda (string . irr)
                                             (apply error
                                                    '"testc16.tex-23"
                                                    string
                                                    '(run+ (r)
                                                           (exist (x y z)
                                                                  (swappendo
                                                                    x
                                                                    y
                                                                    z)
                                                                  (== `(,x
                                                                        ,y
                                                                        ,z)
                                                                      r)))
                                                    irr)))
                                        (begin
                                          (display " done")
                                          (begin (newline) (if #f #f)))))
                                    (letrec ((unwrapo
                                               (lambda (x out)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((pairo x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (a)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((caro x
                                                                                                        a)
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((unwrapo
                                                                                                                  a
                                                                                                                  out)
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== x out)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-26")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-test
                                            '((((pizza)))
                                              ((pizza))
                                              (pizza)
                                              pizza)
                                            multiset-equal?
                                            ((lambda (n)
                                                (begin
                                                  (unless
                                                    ((lambda (x)
                                                        (if x
                                                          x
                                                          (if (integer? n)
                                                            (if (exact? n)
                                                              (positive? n)
                                                              #f)
                                                            #f)))
                                                     (boolean? n))
                                                    (error 'run
                                                           "not an exact positive integer"
                                                           n))
                                                  ((if (number? n)
                                                     (|take'| n)
                                                     (if n take+ take*))
                                                   (list ((lambda (s sk)
                                                             (lambda ()
                                                                ((lambda (x)
                                                                    ((lambda (s sk)
                                                                        (lambda ()
                                                                           ((unwrapo
                                                                              '(((pizza)))
                                                                              x)
                                                                            s
                                                                            (lambda (s)
                                                                               (lambda ()
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (sk ((reify reify-name)
                                                                                                  x
                                                                                                  s)))
                                                                                          s
                                                                                          sk)))
                                                                                   s
                                                                                   sk))))))
                                                                     s
                                                                     sk))
                                                                 (make-var s))))
                                                          empty-s
                                                          (lambda (a)
                                                             (_cons_31
                                                               '#t
                                                               a)))))))
                                             #f)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-26"
                                                      string
                                                      '(run* (x)
                                                             (unwrapo
                                                               '(((pizza)))
                                                               x))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-27")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((unwrapo
                                                                                 x
                                                                                 'pizza)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(pizza)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-27"
                                                      string
                                                      '(run+ (x)
                                                             (unwrapo x 'pizza))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-28")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((unwrapo
                                                                                 (_list_33
                                                                                   (_list_33
                                                                                     x))
                                                                                 'pizza)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(pizza)
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-28"
                                                      string
                                                      '(run+ (x)
                                                             (unwrapo
                                                               `((,x))
                                                               'pizza))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-29")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((unwrapo
                                                                                 x
                                                                                 'pizza)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(pizza (pizza . _.0)
                                                    ((pizza . _.0) . _.1)
                                                    (((pizza . _.0) . _.1)
                                                     .
                                                     _.2)
                                                    ((((pizza . _.0) . _.1)
                                                      .
                                                      _.2)
                                                     .
                                                     _.3))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-29"
                                                      string
                                                      '(run+ (x)
                                                             (unwrapo x 'pizza))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-30")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((unwrapo
                                                                                 x
                                                                                 '((pizza)))
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(((pizza))
                                              (((pizza)) . _.0)
                                              ((((pizza)) . _.0) . _.1)
                                              (((((pizza)) . _.0) . _.1) . _.2)
                                              ((((((pizza)) . _.0) . _.1) . _.2)
                                               .
                                               _.3))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-30"
                                                      string
                                                      '(run+ (x)
                                                             (unwrapo
                                                               x
                                                               '((pizza))))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))
                                        (begin
                                          (begin
                                            (display "Testing ")
                                            (begin
                                              (display "testc16.tex-31")
                                              (begin
                                                (display "...")
                                                (if #f #f))))
                                          (do-ftest
                                            (lambda ()
                                               ((lambda (n)
                                                   (begin
                                                     (unless
                                                       ((lambda (x)
                                                           (if x
                                                             x
                                                             (if (integer? n)
                                                               (if (exact? n)
                                                                 (positive? n)
                                                                 #f)
                                                               #f)))
                                                        (boolean? n))
                                                       (error 'run
                                                              "not an exact positive integer"
                                                              n))
                                                     ((if (number? n)
                                                        (|take'| n)
                                                        (if n take+ take*))
                                                      (list ((lambda (s sk)
                                                                (lambda ()
                                                                   ((lambda (x)
                                                                       ((lambda (s sk)
                                                                           (lambda ()
                                                                              ((unwrapo
                                                                                 (_list_33
                                                                                   (_list_33
                                                                                     x))
                                                                                 'pizza)
                                                                               s
                                                                               (lambda (s)
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (sk ((reify reify-name)
                                                                                                     x
                                                                                                     s)))
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))))
                                                                        s
                                                                        sk))
                                                                    (make-var
                                                                      s))))
                                                             empty-s
                                                             (lambda (a)
                                                                (_cons_31
                                                                  '#t
                                                                  a)))))))
                                                #t))
                                            '(pizza (pizza . _.0)
                                                    ((pizza . _.0) . _.1)
                                                    (((pizza . _.0) . _.1)
                                                     .
                                                     _.2)
                                                    ((((pizza . _.0) . _.1)
                                                      .
                                                      _.2)
                                                     .
                                                     _.3))
                                            (lambda (string . irr)
                                               (apply error
                                                      '"testc16.tex-31"
                                                      string
                                                      '(run+ (x)
                                                             (unwrapo
                                                               `((,x))
                                                               'pizza))
                                                      irr)))
                                          (begin
                                            (display " done")
                                            (begin (newline) (if #f #f))))))
                                    (letrec ((strangeo
                                               (lambda (s sk)
                                                  (lambda ()
                                                     ((lambda (s sk)
                                                         (lambda ()
                                                            (strangeo s sk)))
                                                      s
                                                      sk)))))
                                      (begin
                                        (begin
                                          (display "Testing ")
                                          (begin
                                            (display "testc17.tex-2")
                                            (begin (display "...") (if #f #f))))
                                        (do-ftest
                                          (lambda ()
                                             ((lambda (n)
                                                 (begin
                                                   (unless
                                                     ((lambda (x)
                                                         (if x
                                                           x
                                                           (if (integer? n)
                                                             (if (exact? n)
                                                               (positive? n)
                                                               #f)
                                                             #f)))
                                                      (boolean? n))
                                                     (error 'run
                                                            "not an exact positive integer"
                                                            n))
                                                   ((if (number? n)
                                                      (|take'| n)
                                                      (if n take+ take*))
                                                    (list ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (q)
                                                                     ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (_list_33
                                                                                  '#f
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            (strangeo
                                                                                              s
                                                                                              sk)))
                                                                                      s
                                                                                      sk))
                                                                                  (lambda ()
                                                                                     ((lambda (s sk)
                                                                                         (lambda ()
                                                                                            ((== #f
                                                                                                 #f)
                                                                                             s
                                                                                             sk)))
                                                                                      s
                                                                                      sk))))
                                                                             s
                                                                             (lambda (s)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (sk ((reify reify-name)
                                                                                                   q
                                                                                                   s)))
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))))))
                                                                      s
                                                                      sk))
                                                                  (make-var
                                                                    s))))
                                                           empty-s
                                                           (lambda (a)
                                                              (_cons_31
                                                                '#t
                                                                a)))))))
                                              #t))
                                          '(_.0)
                                          (lambda (string . irr)
                                             (apply error
                                                    '"testc17.tex-2"
                                                    string
                                                    '(run+ (q)
                                                           (conde (strangeo)
                                                                  ((== #f #f))))
                                                    irr)))
                                        (begin
                                          (display " done")
                                          (begin (newline) (if #f #f)))))
                                    (letrec ((strangero
                                               (lambda (s sk)
                                                  (_list_33
                                                    '#f
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (lambda ()
                                                              (strangero
                                                                s
                                                                (lambda (s)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((lambda (s sk)
                                                                                 (_list_33
                                                                                   '#f
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             (strangero
                                                                                               s
                                                                                               sk)))
                                                                                       s
                                                                                       sk))
                                                                                   (lambda ()
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((== #f
                                                                                                  #f)
                                                                                              s
                                                                                              sk)))
                                                                                       s
                                                                                       sk))))
                                                                              s
                                                                              sk)))
                                                                       s
                                                                       sk))))))
                                                        s
                                                        sk))
                                                    (lambda ()
                                                       ((lambda (s sk)
                                                           (lambda ()
                                                              ((== #f #f)
                                                               s
                                                               sk)))
                                                        s
                                                        sk))))))
                                      (begin
                                        (begin
                                          (display "Testing ")
                                          (begin
                                            (display "testc17.tex-3")
                                            (begin (display "...") (if #f #f))))
                                        (do-ftest
                                          (lambda ()
                                             ((lambda (n)
                                                 (begin
                                                   (unless
                                                     ((lambda (x)
                                                         (if x
                                                           x
                                                           (if (integer? n)
                                                             (if (exact? n)
                                                               (positive? n)
                                                               #f)
                                                             #f)))
                                                      (boolean? n))
                                                     (error 'run
                                                            "not an exact positive integer"
                                                            n))
                                                   ((if (number? n)
                                                      (|take'| n)
                                                      (if n take+ take*))
                                                    (list ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (q)
                                                                     ((lambda (s sk)
                                                                         (lambda ()
                                                                            (strangero
                                                                              s
                                                                              (lambda (s)
                                                                                 (lambda ()
                                                                                    ((lambda (s sk)
                                                                                        (lambda ()
                                                                                           ((lambda (s sk)
                                                                                               (sk ((reify reify-name)
                                                                                                    q
                                                                                                    s)))
                                                                                            s
                                                                                            sk)))
                                                                                     s
                                                                                     sk))))))
                                                                      s
                                                                      sk))
                                                                  (make-var
                                                                    s))))
                                                           empty-s
                                                           (lambda (a)
                                                              (_cons_31
                                                                '#t
                                                                a)))))))
                                              #t))
                                          '(_.0 _.0 _.0 _.0 _.0)
                                          (lambda (string . irr)
                                             (apply error
                                                    '"testc17.tex-3"
                                                    string
                                                    '(run+ (q) strangero)
                                                    irr)))
                                        (begin
                                          (display " done")
                                          (begin (newline) (if #f #f)))))
                                    (letrec ((strangesto
                                               (lambda (x y)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((strangesto
                                                                    y
                                                                    x)
                                                                  s
                                                                  (lambda (s)
                                                                     (lambda ()
                                                                        ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((== #f
                                                                                    y)
                                                                                s
                                                                                sk)))
                                                                         s
                                                                         sk))))))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #f x)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk)))))))
                                      (begin
                                        (begin
                                          (display "Testing ")
                                          (begin
                                            (display "testc17.tex-4")
                                            (begin (display "...") (if #f #f))))
                                        (do-ftest
                                          (lambda ()
                                             ((lambda (n)
                                                 (begin
                                                   (unless
                                                     ((lambda (x)
                                                         (if x
                                                           x
                                                           (if (integer? n)
                                                             (if (exact? n)
                                                               (positive? n)
                                                               #f)
                                                             #f)))
                                                      (boolean? n))
                                                     (error 'run
                                                            "not an exact positive integer"
                                                            n))
                                                   ((if (number? n)
                                                      (|take'| n)
                                                      (if n take+ take*))
                                                    (list ((lambda (s sk)
                                                              (lambda ()
                                                                 ((lambda (q)
                                                                     ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (s sk)
                                                                                (lambda ()
                                                                                   ((lambda (x y)
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((strangesto
                                                                                                 x
                                                                                                 y)
                                                                                               s
                                                                                               (lambda (s)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (lambda ()
                                                                                                            ((== (_list_33
                                                                                                                   x
                                                                                                                   y)
                                                                                                                 q)
                                                                                                             s
                                                                                                             sk)))
                                                                                                      s
                                                                                                      sk))))))
                                                                                        s
                                                                                        sk))
                                                                                    (make-var
                                                                                      s)
                                                                                    (make-var
                                                                                      s))))
                                                                             s
                                                                             (lambda (s)
                                                                                (lambda ()
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (sk ((reify reify-name)
                                                                                                   q
                                                                                                   s)))
                                                                                           s
                                                                                           sk)))
                                                                                    s
                                                                                    sk))))))
                                                                      s
                                                                      sk))
                                                                  (make-var
                                                                    s))))
                                                           empty-s
                                                           (lambda (a)
                                                              (_cons_31
                                                                '#t
                                                                a)))))))
                                              #t))
                                          '((#f _.0)
                                            (_.0 #f)
                                            (#f #f)
                                            (#f #f)
                                            (#f #f))
                                          (lambda (string . irr)
                                             (apply error
                                                    '"testc17.tex-4"
                                                    string
                                                    '(run+ (q)
                                                           (exist (x y)
                                                                  (strangesto
                                                                    x
                                                                    y)
                                                                  (== `(,x ,y)
                                                                      q)))
                                                    irr)))
                                        (begin
                                          (display " done")
                                          (begin (newline) (if #f #f)))))
                                    (letrec ((any* (lambda (g)
                                                      (lambda (s sk)
                                                         (_list_33
                                                           '#f
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     (g s sk)))
                                                               s
                                                               sk))
                                                           (lambda ()
                                                              ((lambda (s sk)
                                                                  (lambda ()
                                                                     ((any* g)
                                                                      s
                                                                      sk)))
                                                               s
                                                               sk)))))))
                                      (begin
                                        ((lambda (never always)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc17.tex-6")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-ftest
                                                  (lambda ()
                                                     ((lambda (n)
                                                         (begin
                                                           (unless
                                                             ((lambda (x)
                                                                 (if x
                                                                   x
                                                                   (if (integer?
                                                                         n)
                                                                     (if (exact?
                                                                           n)
                                                                       (positive?
                                                                         n)
                                                                       #f)
                                                                     #f)))
                                                              (boolean? n))
                                                             (error 'run
                                                                    "not an exact positive integer"
                                                                    n))
                                                           ((if (number? n)
                                                              (|take'| n)
                                                              (if n
                                                                take+
                                                                take*))
                                                            (list ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((lambda (q)
                                                                             ((lambda (s sk)
                                                                                 (lambda ()
                                                                                    (always
                                                                                      s
                                                                                      (lambda (s)
                                                                                         (lambda ()
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((== #t
                                                                                                        q)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((lambda (s sk)
                                                                                                                     (sk ((reify reify-name)
                                                                                                                          q
                                                                                                                          s)))
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))))))
                                                                              s
                                                                              sk))
                                                                          (make-var
                                                                            s))))
                                                                   empty-s
                                                                   (lambda (a)
                                                                      (_cons_31
                                                                        '#t
                                                                        a)))))))
                                                      #t))
                                                  (list #t)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc17.tex-6"
                                                            string
                                                            '(run+ (q)
                                                                   always
                                                                   (== #t q))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc17.tex-8")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '(#t #t #t #t #t)
                                                  equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (q)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 (always
                                                                                   s
                                                                                   (lambda (s)
                                                                                      (lambda ()
                                                                                         ((lambda (s sk)
                                                                                             (lambda ()
                                                                                                ((== #t
                                                                                                     q)
                                                                                                 s
                                                                                                 (lambda (s)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (sk ((reify reify-name)
                                                                                                                       q
                                                                                                                       s)))
                                                                                                               s
                                                                                                               sk)))
                                                                                                        s
                                                                                                        sk))))))
                                                                                          s
                                                                                          sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   5)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc17.tex-8"
                                                            string
                                                            '(run 5
                                                                  (q)
                                                                  always
                                                                  (== #t q))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc17.tex-9")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '(#t #t #t #t #t)
                                                  equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (q)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((== #t
                                                                                      q)
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               (always
                                                                                                 s
                                                                                                 (lambda (s)
                                                                                                    (lambda ()
                                                                                                       ((lambda (s sk)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (sk ((reify reify-name)
                                                                                                                       q
                                                                                                                       s)))
                                                                                                               s
                                                                                                               sk)))
                                                                                                        s
                                                                                                        sk))))))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   5)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc17.tex-9"
                                                            string
                                                            '(run 5
                                                                  (q)
                                                                  (== #t q)
                                                                  always)
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              ((lambda (salo)
                                                  (begin
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-10")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-ftest
                                                        (lambda ()
                                                           ((lambda (n)
                                                               (begin
                                                                 (unless
                                                                   ((lambda (x)
                                                                       (if x
                                                                         x
                                                                         (if (integer?
                                                                               n)
                                                                           (if (exact?
                                                                                 n)
                                                                             (positive?
                                                                               n)
                                                                             #f)
                                                                           #f)))
                                                                    (boolean?
                                                                      n))
                                                                   (error 'run
                                                                          "not an exact positive integer"
                                                                          n))
                                                                 ((if (number?
                                                                        n)
                                                                    (|take'| n)
                                                                    (if n
                                                                      take+
                                                                      take*))
                                                                  (list ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (q)
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((salo always)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== #t
                                                                                                             q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (sk ((reify reify-name)
                                                                                                                               q
                                                                                                                               s)))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (make-var
                                                                                  s))))
                                                                         empty-s
                                                                         (lambda (a)
                                                                            (_cons_31
                                                                              '#t
                                                                              a)))))))
                                                            #t))
                                                        '(#t)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-10"
                                                                  string
                                                                  '(run+ (q)
                                                                         (salo always)
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-11")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-ftest
                                                        (lambda ()
                                                           ((lambda (n)
                                                               (begin
                                                                 (unless
                                                                   ((lambda (x)
                                                                       (if x
                                                                         x
                                                                         (if (integer?
                                                                               n)
                                                                           (if (exact?
                                                                                 n)
                                                                             (positive?
                                                                               n)
                                                                             #f)
                                                                           #f)))
                                                                    (boolean?
                                                                      n))
                                                                   (error 'run
                                                                          "not an exact positive integer"
                                                                          n))
                                                                 ((if (number?
                                                                        n)
                                                                    (|take'| n)
                                                                    (if n
                                                                      take+
                                                                      take*))
                                                                  (list ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (q)
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((salo never)
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== #t
                                                                                                             q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (sk ((reify reify-name)
                                                                                                                               q
                                                                                                                               s)))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (make-var
                                                                                  s))))
                                                                         empty-s
                                                                         (lambda (a)
                                                                            (_cons_31
                                                                              '#t
                                                                              a)))))))
                                                            #t))
                                                        '(#t)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-11"
                                                                  string
                                                                  '(run+ (q)
                                                                         (salo never)
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-15")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-ftest
                                                        (lambda ()
                                                           ((lambda (n)
                                                               (begin
                                                                 (unless
                                                                   ((lambda (x)
                                                                       (if x
                                                                         x
                                                                         (if (integer?
                                                                               n)
                                                                           (if (exact?
                                                                                 n)
                                                                             (positive?
                                                                               n)
                                                                             #f)
                                                                           #f)))
                                                                    (boolean?
                                                                      n))
                                                                   (error 'run
                                                                          "not an exact positive integer"
                                                                          n))
                                                                 ((if (number?
                                                                        n)
                                                                    (|take'| n)
                                                                    (if n
                                                                      take+
                                                                      take*))
                                                                  (list ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (q)
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (_list_33
                                                                                                '#f
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((== #f
                                                                                                               q)
                                                                                                           s
                                                                                                           (lambda (s)
                                                                                                              (lambda ()
                                                                                                                 ((lambda (s sk)
                                                                                                                     (lambda ()
                                                                                                                        (always
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                  s
                                                                                                                  sk))))))
                                                                                                    s
                                                                                                    sk))
                                                                                                (lambda ()
                                                                                                   ((lambda (s sk)
                                                                                                       (lambda ()
                                                                                                          ((== #t
                                                                                                               q)
                                                                                                           s
                                                                                                           sk)))
                                                                                                    s
                                                                                                    sk))))
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== #t
                                                                                                             q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (sk ((reify reify-name)
                                                                                                                               q
                                                                                                                               s)))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (make-var
                                                                                  s))))
                                                                         empty-s
                                                                         (lambda (a)
                                                                            (_cons_31
                                                                              '#t
                                                                              a)))))))
                                                            #t))
                                                        '(#t)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-15"
                                                                  string
                                                                  '(run+ (q)
                                                                         (conde ((== #f
                                                                                     q)
                                                                                 always)
                                                                                ((== #t
                                                                                     q)))
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-17")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '(#t #t #t #t #t)
                                                        equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (_list_33
                                                                                             '#f
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== #f
                                                                                                            q)
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     (always
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((any* (== #t
                                                                                                                  q))
                                                                                                        s
                                                                                                        sk)))
                                                                                                 s
                                                                                                 sk))))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         5)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-17"
                                                                  string
                                                                  '(run 5
                                                                        (q)
                                                                        (conde ((== #f
                                                                                    q)
                                                                                always)
                                                                               ((any* (== #t
                                                                                          q))))
                                                                        (== #t
                                                                            q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-18")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '(#t #t #t #t #t)
                                                        equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (_list_33
                                                                                             '#f
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       (always
                                                                                                         s
                                                                                                         sk)))
                                                                                                 s
                                                                                                 sk))
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       (never s
                                                                                                              sk)))
                                                                                                 s
                                                                                                 sk))))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         5)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-18"
                                                                  string
                                                                  '(run 5
                                                                        (q)
                                                                        (conde (always)
                                                                               (never))
                                                                        (== #t
                                                                            q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-19")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-ftest
                                                        (lambda ()
                                                           ((lambda (n)
                                                               (begin
                                                                 (unless
                                                                   ((lambda (x)
                                                                       (if x
                                                                         x
                                                                         (if (integer?
                                                                               n)
                                                                           (if (exact?
                                                                                 n)
                                                                             (positive?
                                                                               n)
                                                                             #f)
                                                                           #f)))
                                                                    (boolean?
                                                                      n))
                                                                   (error 'run
                                                                          "not an exact positive integer"
                                                                          n))
                                                                 ((if (number?
                                                                        n)
                                                                    (|take'| n)
                                                                    (if n
                                                                      take+
                                                                      take*))
                                                                  (list ((lambda (s sk)
                                                                            (lambda ()
                                                                               ((lambda (q)
                                                                                   ((lambda (s sk)
                                                                                       (lambda ()
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (_list_33
                                                                                                              '#f
                                                                                                              (lambda ()
                                                                                                                 ((lambda (s sk)
                                                                                                                     (lambda ()
                                                                                                                        ((== #f
                                                                                                                             q)
                                                                                                                         s
                                                                                                                         sk)))
                                                                                                                  s
                                                                                                                  sk))
                                                                                                              (lambda ()
                                                                                                                 ((lambda (s sk)
                                                                                                                     (lambda ()
                                                                                                                        ((== #t
                                                                                                                             q)
                                                                                                                         s
                                                                                                                         sk)))
                                                                                                                  s
                                                                                                                  sk))))
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      (always
                                                                                                                        s
                                                                                                                        sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk)))
                                                                                           s
                                                                                           (lambda (s)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((== #t
                                                                                                             q)
                                                                                                         s
                                                                                                         (lambda (s)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((lambda (s sk)
                                                                                                                          (sk ((reify reify-name)
                                                                                                                               q
                                                                                                                               s)))
                                                                                                                       s
                                                                                                                       sk)))
                                                                                                                s
                                                                                                                sk))))))
                                                                                                  s
                                                                                                  sk))))))
                                                                                    s
                                                                                    sk))
                                                                                (make-var
                                                                                  s))))
                                                                         empty-s
                                                                         (lambda (a)
                                                                            (_cons_31
                                                                              '#t
                                                                              a)))))))
                                                            #t))
                                                        '(#t)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-19"
                                                                  string
                                                                  '(run+ (q)
                                                                         (exist ()
                                                                                (conde ((== #f
                                                                                            q))
                                                                                       ((== #t
                                                                                            q)))
                                                                                always)
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-20")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '(#t #t #t #t #t)
                                                        equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (_list_33
                                                                                                           '#f
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== #f
                                                                                                                          q)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== #t
                                                                                                                          q)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   (always
                                                                                                                     s
                                                                                                                     sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk)))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         5)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-20"
                                                                  string
                                                                  '(run 5
                                                                        (q)
                                                                        (exist ()
                                                                               (conde ((== #f
                                                                                           q))
                                                                                      ((== #t
                                                                                           q)))
                                                                               always)
                                                                        (== #t
                                                                            q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc17.tex-21")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '(#t #t #t #t #t)
                                                        equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (_list_33
                                                                                                           '#f
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== #t
                                                                                                                          q)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((== #f
                                                                                                                          q)
                                                                                                                      s
                                                                                                                      sk)))
                                                                                                               s
                                                                                                               sk))))
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   (always
                                                                                                                     s
                                                                                                                     sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk)))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         5)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc17.tex-21"
                                                                  string
                                                                  '(run 5
                                                                        (q)
                                                                        (exist ()
                                                                               (conde ((== #t
                                                                                           q))
                                                                                      ((== #f
                                                                                           q)))
                                                                               always)
                                                                        (== #t
                                                                            q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))))
                                               (lambda (g)
                                                  (lambda (s sk)
                                                     (_list_33
                                                       '#f
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 ((== #f #f)
                                                                  s
                                                                  sk)))
                                                           s
                                                           sk))
                                                       (lambda ()
                                                          ((lambda (s sk)
                                                              (lambda ()
                                                                 (g s sk)))
                                                           s
                                                           sk))))))))
                                         (any* (== #t #f))
                                         (any* (== #f #f)))
                                        ((lambda (bit-xoro bit-ando)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-1")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '((0 0) (1 1))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_68)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x y)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((bit-xoro
                                                                                                      x
                                                                                                      y
                                                                                                      0)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        x
                                                                                                                        y)
                                                                                                                      _s_68)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_68
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-1"
                                                            string
                                                            '(run* (s)
                                                                   (exist (x y)
                                                                          (bit-xoro
                                                                            x
                                                                            y
                                                                            0)
                                                                          (== `(,x
                                                                                ,y)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-2")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '((0 1) (1 0))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_68)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x y)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((bit-xoro
                                                                                                      x
                                                                                                      y
                                                                                                      1)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        x
                                                                                                                        y)
                                                                                                                      _s_68)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_68
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-2"
                                                            string
                                                            '(run* (s)
                                                                   (exist (x y)
                                                                          (bit-xoro
                                                                            x
                                                                            y
                                                                            1)
                                                                          (== `(,x
                                                                                ,y)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-3")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '((0 0 0)
                                                    (0 1 1)
                                                    (1 0 1)
                                                    (1 1 0))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_68)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x y r)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((bit-xoro
                                                                                                      x
                                                                                                      y
                                                                                                      r)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        x
                                                                                                                        y
                                                                                                                        r)
                                                                                                                      _s_68)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_68
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-3"
                                                            string
                                                            '(run* (s)
                                                                   (exist (x y
                                                                             r)
                                                                          (bit-xoro
                                                                            x
                                                                            y
                                                                            r)
                                                                          (== `(,x
                                                                                ,y
                                                                                ,r)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-4")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '((1 1))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_68)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (x y)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((bit-ando
                                                                                                      x
                                                                                                      y
                                                                                                      1)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        x
                                                                                                                        y)
                                                                                                                      _s_68)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_68
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-4"
                                                            string
                                                            '(run* (s)
                                                                   (exist (x y)
                                                                          (bit-ando
                                                                            x
                                                                            y
                                                                            1)
                                                                          (== `(,x
                                                                                ,y)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              ((lambda (half-addero)
                                                  (begin
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-5")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        (list 0)
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (r)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((half-addero
                                                                                          1
                                                                                          1
                                                                                          r
                                                                                          1)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (sk ((reify reify-name)
                                                                                                              r
                                                                                                              s)))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-5"
                                                                  string
                                                                  '(run* (r)
                                                                         (half-addero
                                                                           1
                                                                           1
                                                                           r
                                                                           1))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-6")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '((0 0 0 0)
                                                          (0 1 1 0)
                                                          (1 0 1 0)
                                                          (1 1 0 1))
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (_s_69)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((lambda (s sk)
                                                                                           (lambda ()
                                                                                              ((lambda (x y r c)
                                                                                                  ((lambda (s sk)
                                                                                                      (lambda ()
                                                                                                         ((half-addero
                                                                                                            x
                                                                                                            y
                                                                                                            r
                                                                                                            c)
                                                                                                          s
                                                                                                          (lambda (s)
                                                                                                             (lambda ()
                                                                                                                ((lambda (s sk)
                                                                                                                    (lambda ()
                                                                                                                       ((== (_list_33
                                                                                                                              x
                                                                                                                              y
                                                                                                                              r
                                                                                                                              c)
                                                                                                                            _s_69)
                                                                                                                        s
                                                                                                                        sk)))
                                                                                                                 s
                                                                                                                 sk))))))
                                                                                                   s
                                                                                                   sk))
                                                                                               (make-var
                                                                                                 s)
                                                                                               (make-var
                                                                                                 s)
                                                                                               (make-var
                                                                                                 s)
                                                                                               (make-var
                                                                                                 s))))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (sk ((reify reify-name)
                                                                                                              _s_69
                                                                                                              s)))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-6"
                                                                  string
                                                                  '(run* (s)
                                                                         (exist (x y
                                                                                   r
                                                                                   c)
                                                                                (half-addero
                                                                                  x
                                                                                  y
                                                                                  r
                                                                                  c)
                                                                                (== `(,x
                                                                                      ,y
                                                                                      ,r
                                                                                      ,c)
                                                                                    s)))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    ((lambda (full-addero)
                                                        (begin
                                                          (begin
                                                            (display "Testing ")
                                                            (begin
                                                              (display
                                                                "testc20.tex-7")
                                                              (begin
                                                                (display "...")
                                                                (if #f #f))))
                                                          (do-test
                                                            (list '(0 1))
                                                            multiset-equal?
                                                            ((lambda (n)
                                                                (begin
                                                                  (unless
                                                                    ((lambda (x)
                                                                        (if x
                                                                          x
                                                                          (if (integer?
                                                                                n)
                                                                            (if (exact?
                                                                                  n)
                                                                              (positive?
                                                                                n)
                                                                              #f)
                                                                            #f)))
                                                                     (boolean?
                                                                       n))
                                                                    (error 'run
                                                                           "not an exact positive integer"
                                                                           n))
                                                                  ((if (number?
                                                                         n)
                                                                     (|take'| n)
                                                                     (if n
                                                                       take+
                                                                       take*))
                                                                   (list ((lambda (s sk)
                                                                             (lambda ()
                                                                                ((lambda (_s_70)
                                                                                    ((lambda (s sk)
                                                                                        (lambda ()
                                                                                           ((lambda (s sk)
                                                                                               (lambda ()
                                                                                                  ((lambda (r c)
                                                                                                      ((lambda (s sk)
                                                                                                          (lambda ()
                                                                                                             ((full-addero
                                                                                                                0
                                                                                                                1
                                                                                                                1
                                                                                                                r
                                                                                                                c)
                                                                                                              s
                                                                                                              (lambda (s)
                                                                                                                 (lambda ()
                                                                                                                    ((lambda (s sk)
                                                                                                                        (lambda ()
                                                                                                                           ((== (_list_33
                                                                                                                                  r
                                                                                                                                  c)
                                                                                                                                _s_70)
                                                                                                                            s
                                                                                                                            sk)))
                                                                                                                     s
                                                                                                                     sk))))))
                                                                                                       s
                                                                                                       sk))
                                                                                                   (make-var
                                                                                                     s)
                                                                                                   (make-var
                                                                                                     s))))
                                                                                            s
                                                                                            (lambda (s)
                                                                                               (lambda ()
                                                                                                  ((lambda (s sk)
                                                                                                      (lambda ()
                                                                                                         ((lambda (s sk)
                                                                                                             (sk ((reify reify-name)
                                                                                                                  _s_70
                                                                                                                  s)))
                                                                                                          s
                                                                                                          sk)))
                                                                                                   s
                                                                                                   sk))))))
                                                                                     s
                                                                                     sk))
                                                                                 (make-var
                                                                                   s))))
                                                                          empty-s
                                                                          (lambda (a)
                                                                             (_cons_31
                                                                               '#t
                                                                               a)))))))
                                                             #f)
                                                            (lambda (string . irr)
                                                               (apply error
                                                                      '"testc20.tex-7"
                                                                      string
                                                                      '(run* (s)
                                                                             (exist (r c)
                                                                                    (full-addero
                                                                                      0
                                                                                      1
                                                                                      1
                                                                                      r
                                                                                      c)
                                                                                    (== `(,r
                                                                                          ,c)
                                                                                        s)))
                                                                      irr)))
                                                          (begin
                                                            (display " done")
                                                            (begin
                                                              (newline)
                                                              (if #f #f)))))
                                                     (lambda (b x y r c)
                                                        (lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (w xy wz)
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((half-addero
                                                                            x
                                                                            y
                                                                            w
                                                                            xy)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((half-addero
                                                                                          w
                                                                                          b
                                                                                          r
                                                                                          wz)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((bit-xoro
                                                                                                        xy
                                                                                                        wz
                                                                                                        c)
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))
                                                               (make-var s)
                                                               (make-var s)
                                                               (make-var
                                                                 s))))))))
                                               (lambda (x y r c)
                                                  (lambda (s sk)
                                                     (lambda ()
                                                        ((lambda (s sk)
                                                            (lambda ()
                                                               ((bit-xoro x y r)
                                                                s
                                                                (lambda (s)
                                                                   (lambda ()
                                                                      ((lambda (s sk)
                                                                          (lambda ()
                                                                             ((bit-ando
                                                                                x
                                                                                y
                                                                                c)
                                                                              s
                                                                              sk)))
                                                                       s
                                                                       sk))))))
                                                         s
                                                         sk)))))))
                                         (lambda (x y r)
                                            (lambda (s sk)
                                               (_list_33
                                                 '#f
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk)))))
                                         (lambda (x y r)
                                            (lambda (s sk)
                                               (_list_33
                                                 '#f
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 x)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              y)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            r)
                                                                                        s
                                                                                        sk)))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))))))
                                        ((lambda (full-addero)
                                            (begin
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-8")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  (list '(1 1))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_67)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (r c)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((full-addero
                                                                                                      1
                                                                                                      1
                                                                                                      1
                                                                                                      r
                                                                                                      c)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        r
                                                                                                                        c)
                                                                                                                      _s_67)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_67
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-8"
                                                            string
                                                            '(run* (s)
                                                                   (exist (r c)
                                                                          (full-addero
                                                                            1
                                                                            1
                                                                            1
                                                                            r
                                                                            c)
                                                                          (== `(,r
                                                                                ,c)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              (begin
                                                (begin
                                                  (display "Testing ")
                                                  (begin
                                                    (display "testc20.tex-9")
                                                    (begin
                                                      (display "...")
                                                      (if #f #f))))
                                                (do-test
                                                  '((0 0 0 0 0)
                                                    (1 0 0 1 0)
                                                    (0 1 0 1 0)
                                                    (1 1 0 0 1)
                                                    (0 0 1 1 0)
                                                    (1 0 1 0 1)
                                                    (0 1 1 0 1)
                                                    (1 1 1 1 1))
                                                  multiset-equal?
                                                  ((lambda (n)
                                                      (begin
                                                        (unless
                                                          ((lambda (x)
                                                              (if x
                                                                x
                                                                (if (integer? n)
                                                                  (if (exact? n)
                                                                    (positive?
                                                                      n)
                                                                    #f)
                                                                  #f)))
                                                           (boolean? n))
                                                          (error 'run
                                                                 "not an exact positive integer"
                                                                 n))
                                                        ((if (number? n)
                                                           (|take'| n)
                                                           (if n take+ take*))
                                                         (list ((lambda (s sk)
                                                                   (lambda ()
                                                                      ((lambda (_s_67)
                                                                          ((lambda (s sk)
                                                                              (lambda ()
                                                                                 ((lambda (s sk)
                                                                                     (lambda ()
                                                                                        ((lambda (b x y r c)
                                                                                            ((lambda (s sk)
                                                                                                (lambda ()
                                                                                                   ((full-addero
                                                                                                      b
                                                                                                      x
                                                                                                      y
                                                                                                      r
                                                                                                      c)
                                                                                                    s
                                                                                                    (lambda (s)
                                                                                                       (lambda ()
                                                                                                          ((lambda (s sk)
                                                                                                              (lambda ()
                                                                                                                 ((== (_list_33
                                                                                                                        b
                                                                                                                        x
                                                                                                                        y
                                                                                                                        r
                                                                                                                        c)
                                                                                                                      _s_67)
                                                                                                                  s
                                                                                                                  sk)))
                                                                                                           s
                                                                                                           sk))))))
                                                                                             s
                                                                                             sk))
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s)
                                                                                         (make-var
                                                                                           s))))
                                                                                  s
                                                                                  (lambda (s)
                                                                                     (lambda ()
                                                                                        ((lambda (s sk)
                                                                                            (lambda ()
                                                                                               ((lambda (s sk)
                                                                                                   (sk ((reify reify-name)
                                                                                                        _s_67
                                                                                                        s)))
                                                                                                s
                                                                                                sk)))
                                                                                         s
                                                                                         sk))))))
                                                                           s
                                                                           sk))
                                                                       (make-var
                                                                         s))))
                                                                empty-s
                                                                (lambda (a)
                                                                   (_cons_31
                                                                     '#t
                                                                     a)))))))
                                                   #f)
                                                  (lambda (string . irr)
                                                     (apply error
                                                            '"testc20.tex-9"
                                                            string
                                                            '(run* (s)
                                                                   (exist (b x
                                                                             y
                                                                             r
                                                                             c)
                                                                          (full-addero
                                                                            b
                                                                            x
                                                                            y
                                                                            r
                                                                            c)
                                                                          (== `(,b
                                                                                ,x
                                                                                ,y
                                                                                ,r
                                                                                ,c)
                                                                              s)))
                                                            irr)))
                                                (begin
                                                  (display " done")
                                                  (begin (newline) (if #f #f))))
                                              ((lambda (poso)
                                                  (begin
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-15")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        (list #t)
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((poso '(0
                                                                                                1
                                                                                                1))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-15"
                                                                  string
                                                                  '(run* (q)
                                                                         (poso '(0
                                                                                 1
                                                                                 1))
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-16")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        (list #t)
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((poso '(1))
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-16"
                                                                  string
                                                                  '(run* (q)
                                                                         (poso '(1))
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-17")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        '()
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (q)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((poso '())
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== #t
                                                                                                          q)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (sk ((reify reify-name)
                                                                                                                            q
                                                                                                                            s)))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-17"
                                                                  string
                                                                  '(run* (q)
                                                                         (poso '())
                                                                         (== #t
                                                                             q))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    (begin
                                                      (begin
                                                        (display "Testing ")
                                                        (begin
                                                          (display
                                                            "testc20.tex-18")
                                                          (begin
                                                            (display "...")
                                                            (if #f #f))))
                                                      (do-test
                                                        (list '(_.0 . _.1))
                                                        multiset-equal?
                                                        ((lambda (n)
                                                            (begin
                                                              (unless
                                                                ((lambda (x)
                                                                    (if x
                                                                      x
                                                                      (if (integer?
                                                                            n)
                                                                        (if (exact?
                                                                              n)
                                                                          (positive?
                                                                            n)
                                                                          #f)
                                                                        #f)))
                                                                 (boolean? n))
                                                                (error 'run
                                                                       "not an exact positive integer"
                                                                       n))
                                                              ((if (number? n)
                                                                 (|take'| n)
                                                                 (if n
                                                                   take+
                                                                   take*))
                                                               (list ((lambda (s sk)
                                                                         (lambda ()
                                                                            ((lambda (r)
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((poso r)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((lambda (s sk)
                                                                                                         (sk ((reify reify-name)
                                                                                                              r
                                                                                                              s)))
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (make-var
                                                                               s))))
                                                                      empty-s
                                                                      (lambda (a)
                                                                         (_cons_31
                                                                           '#t
                                                                           a)))))))
                                                         #f)
                                                        (lambda (string . irr)
                                                           (apply error
                                                                  '"testc20.tex-18"
                                                                  string
                                                                  '(run* (r)
                                                                         (poso r))
                                                                  irr)))
                                                      (begin
                                                        (display " done")
                                                        (begin
                                                          (newline)
                                                          (if #f #f))))
                                                    ((lambda (>1o)
                                                        (begin
                                                          (begin
                                                            (begin
                                                              (display
                                                                "Testing ")
                                                              (begin
                                                                (display
                                                                  "testc20.tex-19")
                                                                (begin
                                                                  (display
                                                                    "...")
                                                                  (if #f #f))))
                                                            (do-test
                                                              (list #t)
                                                              multiset-equal?
                                                              ((lambda (n)
                                                                  (begin
                                                                    (unless
                                                                      ((lambda (x)
                                                                          (if x
                                                                            x
                                                                            (if (integer?
                                                                                  n)
                                                                              (if (exact?
                                                                                    n)
                                                                                (positive?
                                                                                  n)
                                                                                #f)
                                                                              #f)))
                                                                       (boolean?
                                                                         n))
                                                                      (error 'run
                                                                             "not an exact positive integer"
                                                                             n))
                                                                    ((if (number?
                                                                           n)
                                                                       (|take'| n)
                                                                       (if n
                                                                         take+
                                                                         take*))
                                                                     (list ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (q)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((>1o '(0
                                                                                                     1
                                                                                                     1))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== #t
                                                                                                                q)
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((lambda (s sk)
                                                                                                                             (sk ((reify reify-name)
                                                                                                                                  q
                                                                                                                                  s)))
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            empty-s
                                                                            (lambda (a)
                                                                               (_cons_31
                                                                                 '#t
                                                                                 a)))))))
                                                               #f)
                                                              (lambda (string . irr)
                                                                 (apply error
                                                                        '"testc20.tex-19"
                                                                        string
                                                                        '(run* (q)
                                                                               (>1o '(0
                                                                                      1
                                                                                      1))
                                                                               (== #t
                                                                                   q))
                                                                        irr)))
                                                            (begin
                                                              (display " done")
                                                              (begin
                                                                (newline)
                                                                (if #f #f))))
                                                          (begin
                                                            (begin
                                                              (display
                                                                "Testing ")
                                                              (begin
                                                                (display
                                                                  "testc20.tex-20")
                                                                (begin
                                                                  (display
                                                                    "...")
                                                                  (if #f #f))))
                                                            (do-test
                                                              '(#t)
                                                              multiset-equal?
                                                              ((lambda (n)
                                                                  (begin
                                                                    (unless
                                                                      ((lambda (x)
                                                                          (if x
                                                                            x
                                                                            (if (integer?
                                                                                  n)
                                                                              (if (exact?
                                                                                    n)
                                                                                (positive?
                                                                                  n)
                                                                                #f)
                                                                              #f)))
                                                                       (boolean?
                                                                         n))
                                                                      (error 'run
                                                                             "not an exact positive integer"
                                                                             n))
                                                                    ((if (number?
                                                                           n)
                                                                       (|take'| n)
                                                                       (if n
                                                                         take+
                                                                         take*))
                                                                     (list ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (q)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((>1o '(0
                                                                                                     1))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== #t
                                                                                                                q)
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((lambda (s sk)
                                                                                                                             (sk ((reify reify-name)
                                                                                                                                  q
                                                                                                                                  s)))
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            empty-s
                                                                            (lambda (a)
                                                                               (_cons_31
                                                                                 '#t
                                                                                 a)))))))
                                                               #f)
                                                              (lambda (string . irr)
                                                                 (apply error
                                                                        '"testc20.tex-20"
                                                                        string
                                                                        '(run* (q)
                                                                               (>1o '(0
                                                                                      1))
                                                                               (== #t
                                                                                   q))
                                                                        irr)))
                                                            (begin
                                                              (display " done")
                                                              (begin
                                                                (newline)
                                                                (if #f #f))))
                                                          (begin
                                                            (begin
                                                              (display
                                                                "Testing ")
                                                              (begin
                                                                (display
                                                                  "testc20.tex-21")
                                                                (begin
                                                                  (display
                                                                    "...")
                                                                  (if #f #f))))
                                                            (do-test
                                                              '()
                                                              multiset-equal?
                                                              ((lambda (n)
                                                                  (begin
                                                                    (unless
                                                                      ((lambda (x)
                                                                          (if x
                                                                            x
                                                                            (if (integer?
                                                                                  n)
                                                                              (if (exact?
                                                                                    n)
                                                                                (positive?
                                                                                  n)
                                                                                #f)
                                                                              #f)))
                                                                       (boolean?
                                                                         n))
                                                                      (error 'run
                                                                             "not an exact positive integer"
                                                                             n))
                                                                    ((if (number?
                                                                           n)
                                                                       (|take'| n)
                                                                       (if n
                                                                         take+
                                                                         take*))
                                                                     (list ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (q)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((>1o '(1))
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== #t
                                                                                                                q)
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((lambda (s sk)
                                                                                                                             (sk ((reify reify-name)
                                                                                                                                  q
                                                                                                                                  s)))
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            empty-s
                                                                            (lambda (a)
                                                                               (_cons_31
                                                                                 '#t
                                                                                 a)))))))
                                                               #f)
                                                              (lambda (string . irr)
                                                                 (apply error
                                                                        '"testc20.tex-21"
                                                                        string
                                                                        '(run* (q)
                                                                               (>1o '(1))
                                                                               (== #t
                                                                                   q))
                                                                        irr)))
                                                            (begin
                                                              (display " done")
                                                              (begin
                                                                (newline)
                                                                (if #f #f))))
                                                          (begin
                                                            (begin
                                                              (display
                                                                "Testing ")
                                                              (begin
                                                                (display
                                                                  "testc20.tex-22")
                                                                (begin
                                                                  (display
                                                                    "...")
                                                                  (if #f #f))))
                                                            (do-test
                                                              '()
                                                              multiset-equal?
                                                              ((lambda (n)
                                                                  (begin
                                                                    (unless
                                                                      ((lambda (x)
                                                                          (if x
                                                                            x
                                                                            (if (integer?
                                                                                  n)
                                                                              (if (exact?
                                                                                    n)
                                                                                (positive?
                                                                                  n)
                                                                                #f)
                                                                              #f)))
                                                                       (boolean?
                                                                         n))
                                                                      (error 'run
                                                                             "not an exact positive integer"
                                                                             n))
                                                                    ((if (number?
                                                                           n)
                                                                       (|take'| n)
                                                                       (if n
                                                                         take+
                                                                         take*))
                                                                     (list ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (q)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((>1o '())
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((== #t
                                                                                                                q)
                                                                                                            s
                                                                                                            (lambda (s)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (lambda ()
                                                                                                                         ((lambda (s sk)
                                                                                                                             (sk ((reify reify-name)
                                                                                                                                  q
                                                                                                                                  s)))
                                                                                                                          s
                                                                                                                          sk)))
                                                                                                                   s
                                                                                                                   sk))))))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            empty-s
                                                                            (lambda (a)
                                                                               (_cons_31
                                                                                 '#t
                                                                                 a)))))))
                                                               #f)
                                                              (lambda (string . irr)
                                                                 (apply error
                                                                        '"testc20.tex-22"
                                                                        string
                                                                        '(run* (q)
                                                                               (>1o '())
                                                                               (== #t
                                                                                   q))
                                                                        irr)))
                                                            (begin
                                                              (display " done")
                                                              (begin
                                                                (newline)
                                                                (if #f #f))))
                                                          (begin
                                                            (begin
                                                              (display
                                                                "Testing ")
                                                              (begin
                                                                (display
                                                                  "testc20.tex-23")
                                                                (begin
                                                                  (display
                                                                    "...")
                                                                  (if #f #f))))
                                                            (do-test
                                                              (list '(_.0 _.1
                                                                          .
                                                                          _.2))
                                                              multiset-equal?
                                                              ((lambda (n)
                                                                  (begin
                                                                    (unless
                                                                      ((lambda (x)
                                                                          (if x
                                                                            x
                                                                            (if (integer?
                                                                                  n)
                                                                              (if (exact?
                                                                                    n)
                                                                                (positive?
                                                                                  n)
                                                                                #f)
                                                                              #f)))
                                                                       (boolean?
                                                                         n))
                                                                      (error 'run
                                                                             "not an exact positive integer"
                                                                             n))
                                                                    ((if (number?
                                                                           n)
                                                                       (|take'| n)
                                                                       (if n
                                                                         take+
                                                                         take*))
                                                                     (list ((lambda (s sk)
                                                                               (lambda ()
                                                                                  ((lambda (r)
                                                                                      ((lambda (s sk)
                                                                                          (lambda ()
                                                                                             ((>1o r)
                                                                                              s
                                                                                              (lambda (s)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((lambda (s sk)
                                                                                                               (sk ((reify reify-name)
                                                                                                                    r
                                                                                                                    s)))
                                                                                                            s
                                                                                                            sk)))
                                                                                                     s
                                                                                                     sk))))))
                                                                                       s
                                                                                       sk))
                                                                                   (make-var
                                                                                     s))))
                                                                            empty-s
                                                                            (lambda (a)
                                                                               (_cons_31
                                                                                 '#t
                                                                                 a)))))))
                                                               #f)
                                                              (lambda (string . irr)
                                                                 (apply error
                                                                        '"testc20.tex-23"
                                                                        string
                                                                        '(run* (r)
                                                                               (>1o r))
                                                                        irr)))
                                                            (begin
                                                              (display " done")
                                                              (begin
                                                                (newline)
                                                                (if #f #f))))
                                                          (letrec ((addero
                                                                     (lambda (d n m r)
                                                                        (lambda (s sk)
                                                                           (_list_33
                                                                             '#f
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            d)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== '()
                                                                                                          m)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== n
                                                                                                                        r)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            d)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== '()
                                                                                                          n)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== m
                                                                                                                        r)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((poso m)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            d)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== '()
                                                                                                          m)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((addero
                                                                                                                      0
                                                                                                                      n
                                                                                                                      '(1)
                                                                                                                      r)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            d)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== '()
                                                                                                          n)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((poso m)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((addero
                                                                                                                                    0
                                                                                                                                    '(1)
                                                                                                                                    m
                                                                                                                                    r)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== '(1)
                                                                                            n)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== '(1)
                                                                                                          m)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((lambda (s sk)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (a c)
                                                                                                                              ((lambda (s sk)
                                                                                                                                  (lambda ()
                                                                                                                                     ((== (_list_33
                                                                                                                                            a
                                                                                                                                            c)
                                                                                                                                          r)
                                                                                                                                      s
                                                                                                                                      (lambda (s)
                                                                                                                                         (lambda ()
                                                                                                                                            ((lambda (s sk)
                                                                                                                                                (lambda ()
                                                                                                                                                   ((full-addero
                                                                                                                                                      d
                                                                                                                                                      1
                                                                                                                                                      1
                                                                                                                                                      a
                                                                                                                                                      c)
                                                                                                                                                    s
                                                                                                                                                    sk)))
                                                                                                                                             s
                                                                                                                                             sk))))))
                                                                                                                               s
                                                                                                                               sk))
                                                                                                                           (make-var
                                                                                                                             s)
                                                                                                                           (make-var
                                                                                                                             s))))
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== '(1)
                                                                                            n)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((gen-addero
                                                                                                        d
                                                                                                        n
                                                                                                        m
                                                                                                        r)
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== '(1)
                                                                                            m)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((>1o n)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((>1o r)
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((addero
                                                                                                                                    d
                                                                                                                                    '(1)
                                                                                                                                    n
                                                                                                                                    r)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((>1o n)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((gen-addero
                                                                                                        d
                                                                                                        n
                                                                                                        m
                                                                                                        r)
                                                                                                      s
                                                                                                      sk)))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   (gen-addero
                                                                     (lambda (d n m r)
                                                                        (lambda (s sk)
                                                                           (lambda ()
                                                                              ((lambda (a b c |e| x y z)
                                                                                  ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((== (_cons_31
                                                                                                a
                                                                                                x)
                                                                                              n)
                                                                                          s
                                                                                          (lambda (s)
                                                                                             (lambda ()
                                                                                                ((lambda (s sk)
                                                                                                    (lambda ()
                                                                                                       ((== (_cons_31
                                                                                                              b
                                                                                                              y)
                                                                                                            m)
                                                                                                        s
                                                                                                        (lambda (s)
                                                                                                           (lambda ()
                                                                                                              ((lambda (s sk)
                                                                                                                  (lambda ()
                                                                                                                     ((poso y)
                                                                                                                      s
                                                                                                                      (lambda (s)
                                                                                                                         (lambda ()
                                                                                                                            ((lambda (s sk)
                                                                                                                                (lambda ()
                                                                                                                                   ((== (_cons_31
                                                                                                                                          c
                                                                                                                                          z)
                                                                                                                                        r)
                                                                                                                                    s
                                                                                                                                    (lambda (s)
                                                                                                                                       (lambda ()
                                                                                                                                          ((lambda (s sk)
                                                                                                                                              (lambda ()
                                                                                                                                                 ((poso z)
                                                                                                                                                  s
                                                                                                                                                  (lambda (s)
                                                                                                                                                     (lambda ()
                                                                                                                                                        ((lambda (s sk)
                                                                                                                                                            (lambda ()
                                                                                                                                                               ((full-addero
                                                                                                                                                                  d
                                                                                                                                                                  a
                                                                                                                                                                  b
                                                                                                                                                                  c
                                                                                                                                                                  |e|)
                                                                                                                                                                s
                                                                                                                                                                (lambda (s)
                                                                                                                                                                   (lambda ()
                                                                                                                                                                      ((lambda (s sk)
                                                                                                                                                                          (lambda ()
                                                                                                                                                                             ((addero
                                                                                                                                                                                |e|
                                                                                                                                                                                x
                                                                                                                                                                                y
                                                                                                                                                                                z)
                                                                                                                                                                              s
                                                                                                                                                                              sk)))
                                                                                                                                                                       s
                                                                                                                                                                       sk))))))
                                                                                                                                                         s
                                                                                                                                                         sk))))))
                                                                                                                                           s
                                                                                                                                           sk))))))
                                                                                                                             s
                                                                                                                             sk))))))
                                                                                                               s
                                                                                                               sk))))))
                                                                                                 s
                                                                                                 sk))))))
                                                                                   s
                                                                                   sk))
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)
                                                                               (make-var
                                                                                 s)))))))
                                                            (begin
                                                              (begin
                                                                (begin
                                                                  (display
                                                                    "Testing ")
                                                                  (begin
                                                                    (display
                                                                      "testc20.tex-24")
                                                                    (begin
                                                                      (display
                                                                        "...")
                                                                      (if #f
                                                                        #f))))
                                                                (do-ftest
                                                                  (lambda ()
                                                                     ((lambda (n)
                                                                         (begin
                                                                           (unless
                                                                             ((lambda (x)
                                                                                 (if x
                                                                                   x
                                                                                   (if (integer?
                                                                                         n)
                                                                                     (if (exact?
                                                                                           n)
                                                                                       (positive?
                                                                                         n)
                                                                                       #f)
                                                                                     #f)))
                                                                              (boolean?
                                                                                n))
                                                                             (error 'run
                                                                                    "not an exact positive integer"
                                                                                    n))
                                                                           ((if (number?
                                                                                  n)
                                                                              (|take'| n)
                                                                              (if n
                                                                                take+
                                                                                take*))
                                                                            (list ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (_s_71)
                                                                                             ((lambda (s sk)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((lambda (x y r)
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((addero
                                                                                                                         0
                                                                                                                         x
                                                                                                                         y
                                                                                                                         r)
                                                                                                                       s
                                                                                                                       (lambda (s)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (s sk)
                                                                                                                                 (lambda ()
                                                                                                                                    ((== (_list_33
                                                                                                                                           x
                                                                                                                                           y
                                                                                                                                           r)
                                                                                                                                         _s_71)
                                                                                                                                     s
                                                                                                                                     sk)))
                                                                                                                              s
                                                                                                                              sk))))))
                                                                                                                s
                                                                                                                sk))
                                                                                                            (make-var
                                                                                                              s)
                                                                                                            (make-var
                                                                                                              s)
                                                                                                            (make-var
                                                                                                              s))))
                                                                                                     s
                                                                                                     (lambda (s)
                                                                                                        (lambda ()
                                                                                                           ((lambda (s sk)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (sk ((reify reify-name)
                                                                                                                           _s_71
                                                                                                                           s)))
                                                                                                                   s
                                                                                                                   sk)))
                                                                                                            s
                                                                                                            sk))))))
                                                                                              s
                                                                                              sk))
                                                                                          (make-var
                                                                                            s))))
                                                                                   empty-s
                                                                                   (lambda (a)
                                                                                      (_cons_31
                                                                                        '#t
                                                                                        a)))))))
                                                                      #t))
                                                                  '((_.0 () _.0)
                                                                    (()
                                                                     (_.0 . _.1)
                                                                     (_.0 .
                                                                          _.1))
                                                                    ((1)
                                                                     (1)
                                                                     (0 1)))
                                                                  (lambda (string . irr)
                                                                     (apply error
                                                                            '"testc20.tex-24"
                                                                            string
                                                                            '(run+ (s)
                                                                                   (exist (x y
                                                                                             r)
                                                                                          (addero
                                                                                            0
                                                                                            x
                                                                                            y
                                                                                            r)
                                                                                          (== `(,x
                                                                                                ,y
                                                                                                ,r)
                                                                                              s)))
                                                                            irr)))
                                                                (begin
                                                                  (display
                                                                    " done")
                                                                  (begin
                                                                    (newline)
                                                                    (if #f
                                                                      #f))))
                                                              (begin
                                                                (begin
                                                                  (display
                                                                    "Testing ")
                                                                  (begin
                                                                    (display
                                                                      "testc20.tex-25")
                                                                    (begin
                                                                      (display
                                                                        "...")
                                                                      (if #f
                                                                        #f))))
                                                                (do-ftest
                                                                  (lambda ()
                                                                     ((lambda (n)
                                                                         (begin
                                                                           (unless
                                                                             ((lambda (x)
                                                                                 (if x
                                                                                   x
                                                                                   (if (integer?
                                                                                         n)
                                                                                     (if (exact?
                                                                                           n)
                                                                                       (positive?
                                                                                         n)
                                                                                       #f)
                                                                                     #f)))
                                                                              (boolean?
                                                                                n))
                                                                             (error 'run
                                                                                    "not an exact positive integer"
                                                                                    n))
                                                                           ((if (number?
                                                                                  n)
                                                                              (|take'| n)
                                                                              (if n
                                                                                take+
                                                                                take*))
                                                                            (list ((lambda (s sk)
                                                                                      (lambda ()
                                                                                         ((lambda (_s_71)
                                                                                             ((lambda (s sk)
                                                                                                 (lambda ()
                                                                                                    ((lambda (s sk)
                                                                                                        (lambda ()
                                                                                                           ((lambda (x y r)
                                                                                                               ((lambda (s sk)
                                                                                                                   (lambda ()
                                                                                                                      ((addero
                                                                                                                         0
                                                                                                                         x
                                                                                                                         y
                                                                                                                         r)
                                                                                                                       s
                                                                                                                       (lambda (s)
                                                                                                                          (lambda ()
                                                                                                                             ((lambda (s sk)
                                                                                                                                 (lambda ()
                                                                                                                                    ((== (_list_33
                                                                                                                                           x
                                                                                                                                           y
                                                                                                                                           r)
                                                                                                                                         _s_71)
                                                                                                                                     s
                                                                                                                                     sk)))
                                                                                                                              s
                                                                                                                              sk))))))
                                                                                                                s
                                                                                                                sk))
                                                                                                            (make-var
                                                                                                              s)
                                                                                                            (make-var
                                                                                                              s)
                                                                                                            (make-var
                                                                                                              s))))
                                                                                                     s
                                                                                                     (lambda (s)
                                                                                                        (lambda ()
                                                                                                           ((lambda (s sk)
                                                                                                               (lambda ()
                                                                                                                  ((lambda (s sk)
                                                                                                                      (sk ((reify reify-name)
                                                                                                                           _s_71
                                                                                                                           s)))
                                                                                                                   s
                                                                                                                   sk)))
                                                                                                            s
                                                                                                            sk))))))
                                                                                              s
                                                                                              sk))
                                                                                          (make-var
                                                                                            s))))
                                                                                   empty-s
                                                                                   (lambda (a)
                                                                                      (_cons_31
                                                                                        '#t
                                                                                        a)))))))
                                                                      #t))
                                                                  '((_.0 () _.0)
                                                                    (()
                                                                     (_.0 . _.1)
                                                                     (_.0 .
                                                                          _.1))
                                                                    ((1)
                                                                     (1)
                                                                     (0 1))
                                                                    ((1)
                                                                     (0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1 1)
                                                                     (0 0 1))
                                                                    ((0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (1)
                                                                     (1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((0 1)
                                                                     (0 1)
                                                                     (0 0 1))
                                                                    ((1)
                                                                     (1 1 1)
                                                                     (0 0 0 1))
                                                                    ((1 1)
                                                                     (1)
                                                                     (0 0 1))
                                                                    ((1)
                                                                     (1
                                                                      1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (0
                                                                      0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1 1)
                                                                     (0 1)
                                                                     (1 0 1))
                                                                    ((1)
                                                                     (1 1 1 1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      0
                                                                      1))
                                                                    ((1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (1)
                                                                     (0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1
                                                                      1
                                                                      1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1 1 1 1 1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      0
                                                                      0
                                                                      1))
                                                                    ((1 1 1)
                                                                     (1)
                                                                     (0 0 0 1))
                                                                    ((1)
                                                                     (1
                                                                      1
                                                                      1
                                                                      1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1
                                                                      1
                                                                      1
                                                                      1
                                                                      1
                                                                      1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      0
                                                                      0
                                                                      0
                                                                      1))
                                                                    ((0 1)
                                                                     (1 1)
                                                                     (1 0 1))
                                                                    ((1
                                                                      1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (1)
                                                                     (0
                                                                      0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1))
                                                                    ((1)
                                                                     (1
                                                                      1
                                                                      1
                                                                      1
                                                                      1
                                                                      0
                                                                      _.0
                                                                      .
                                                                      _.1)
                                                                     (0
                                                                      0
                                                                      0
                                                                      0
                                                                      0
                                                                      1
                                                                      _.0
                                                                      .
                                                                      _.1)))
                                                                  (lambda (string . irr)
                                                                     (apply error
                                                                            '"testc20.tex-25"
                                                                            string
                                                                            '(run+ (s)
                                                                                   (exist (x y
                                                                                             r)
                                                                                          (addero
                                                                                            0
                                                                                            x
                                                                                            y
                                                                                            r)
                                                                                          (== `(,x
                                                                                                ,y
                                                                                                ,r)
                                                                                              s)))
                                                                            irr)))
                                                                (begin
                                                                  (display
                                                                    " done")
                                                                  (begin
                                                                    (newline)
                                                                    (if #f
                                                                      #f))))
                                                              (begin
                                                                (begin
                                                                  (display
                                                                    "Testing ")
                                                                  (begin
                                                                    (display
                                                                      "testc20.tex-26")
                                                                    (begin
                                                                      (display
                                                                        "...")
                                                                      (if #f
                                                                        #f))))
                                                                (do-test
                                                                  (list '(0
                                                                          1
                                                                          0
                                                                          1))
                                                                  multiset-equal?
                                                                  ((lambda (n)
                                                                      (begin
                                                                        (unless
                                                                          ((lambda (x)
                                                                              (if x
                                                                                x
                                                                                (if (integer?
                                                                                      n)
                                                                                  (if (exact?
                                                                                        n)
                                                                                    (positive?
                                                                                      n)
                                                                                    #f)
                                                                                  #f)))
                                                                           (boolean?
                                                                             n))
                                                                          (error 'run
                                                                                 "not an exact positive integer"
                                                                                 n))
                                                                        ((if (number?
                                                                               n)
                                                                           (|take'| n)
                                                                           (if n
                                                                             take+
                                                                             take*))
                                                                         (list ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (_s_71)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((gen-addero
                                                                                                    1
                                                                                                    '(0
                                                                                                      1
                                                                                                      1)
                                                                                                    '(1
                                                                                                      1)
                                                                                                    _s_71)
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (sk ((reify reify-name)
                                                                                                                        _s_71
                                                                                                                        s)))
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                empty-s
                                                                                (lambda (a)
                                                                                   (_cons_31
                                                                                     '#t
                                                                                     a)))))))
                                                                   #f)
                                                                  (lambda (string . irr)
                                                                     (apply error
                                                                            '"testc20.tex-26"
                                                                            string
                                                                            '(run* (s)
                                                                                   (gen-addero
                                                                                     1
                                                                                     '(0
                                                                                       1
                                                                                       1)
                                                                                     '(1
                                                                                       1)
                                                                                     s))
                                                                            irr)))
                                                                (begin
                                                                  (display
                                                                    " done")
                                                                  (begin
                                                                    (newline)
                                                                    (if #f
                                                                      #f))))
                                                              (begin
                                                                (begin
                                                                  (display
                                                                    "Testing ")
                                                                  (begin
                                                                    (display
                                                                      "testc20.tex-27")
                                                                    (begin
                                                                      (display
                                                                        "...")
                                                                      (if #f
                                                                        #f))))
                                                                (do-test
                                                                  '(((1 0 1) ())
                                                                    (() (1 0 1))
                                                                    ((1)
                                                                     (0 0 1))
                                                                    ((0 0 1)
                                                                     (1))
                                                                    ((1 1)
                                                                     (0 1))
                                                                    ((0 1)
                                                                     (1 1)))
                                                                  multiset-equal?
                                                                  ((lambda (n)
                                                                      (begin
                                                                        (unless
                                                                          ((lambda (x)
                                                                              (if x
                                                                                x
                                                                                (if (integer?
                                                                                      n)
                                                                                  (if (exact?
                                                                                        n)
                                                                                    (positive?
                                                                                      n)
                                                                                    #f)
                                                                                  #f)))
                                                                           (boolean?
                                                                             n))
                                                                          (error 'run
                                                                                 "not an exact positive integer"
                                                                                 n))
                                                                        ((if (number?
                                                                               n)
                                                                           (|take'| n)
                                                                           (if n
                                                                             take+
                                                                             take*))
                                                                         (list ((lambda (s sk)
                                                                                   (lambda ()
                                                                                      ((lambda (_s_71)
                                                                                          ((lambda (s sk)
                                                                                              (lambda ()
                                                                                                 ((lambda (s sk)
                                                                                                     (lambda ()
                                                                                                        ((lambda (x y)
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((addero
                                                                                                                      0
                                                                                                                      x
                                                                                                                      y
                                                                                                                      '(1
                                                                                                                        0
                                                                                                                        1))
                                                                                                                    s
                                                                                                                    (lambda (s)
                                                                                                                       (lambda ()
                                                                                                                          ((lambda (s sk)
                                                                                                                              (lambda ()
                                                                                                                                 ((== (_list_33
                                                                                                                                        x
                                                                                                                                        y)
                                                                                                                                      _s_71)
                                                                                                                                  s
                                                                                                                                  sk)))
                                                                                                                           s
                                                                                                                           sk))))))
                                                                                                             s
                                                                                                             sk))
                                                                                                         (make-var
                                                                                                           s)
                                                                                                         (make-var
                                                                                                           s))))
                                                                                                  s
                                                                                                  (lambda (s)
                                                                                                     (lambda ()
                                                                                                        ((lambda (s sk)
                                                                                                            (lambda ()
                                                                                                               ((lambda (s sk)
                                                                                                                   (sk ((reify reify-name)
                                                                                                                        _s_71
                                                                                                                        s)))
                                                                                                                s
                                                                                                                sk)))
                                                                                                         s
                                                                                                         sk))))))
                                                                                           s
                                                                                           sk))
                                                                                       (make-var
                                                                                         s))))
                                                                                empty-s
                                                                                (lambda (a)
                                                                                   (_cons_31
                                                                                     '#t
                                                                                     a)))))))
                                                                   #f)
                                                                  (lambda (string . irr)
                                                                     (apply error
                                                                            '"testc20.tex-27"
                                                                            string
                                                                            '(run* (s)
                                                                                   (exist (x y)
                                                                                          (addero
                                                                                            0
                                                                                            x
                                                                                            y
                                                                                            '(1
                                                                                              0
                                                                                              1))
                                                                                          (== `(,x
                                                                                                ,y)
                                                                                              s)))
                                                                            irr)))
                                                                (begin
                                                                  (display
                                                                    " done")
                                                                  (begin
                                                                    (newline)
                                                                    (if #f
                                                                      #f))))))))
                                                     (lambda (n)
                                                        (lambda (s sk)
                                                           (lambda ()
                                                              ((lambda (a ad dd)
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== (_cons_31
                                                                                a
                                                                                (_cons_31
                                                                                  ad
                                                                                  dd))
                                                                              n)
                                                                          s
                                                                          sk)))
                                                                   s
                                                                   sk))
                                                               (make-var s)
                                                               (make-var s)
                                                               (make-var
                                                                 s))))))))
                                               (lambda (n)
                                                  (lambda (s sk)
                                                     (lambda ()
                                                        ((lambda (a d)
                                                            ((lambda (s sk)
                                                                (lambda ()
                                                                   ((== (_cons_31
                                                                          a
                                                                          d)
                                                                        n)
                                                                    s
                                                                    sk)))
                                                             s
                                                             sk))
                                                         (make-var s)
                                                         (make-var s))))))))
                                         (lambda (b x y r c)
                                            (lambda (s sk)
                                               (_list_33
                                                 '#f
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 0
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 0
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 1
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 0
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 1
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 0
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 0
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 0
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 1
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 1
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 0
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 0
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 0
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 1
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 0 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 0
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 1
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))
                                                 (lambda ()
                                                    ((lambda (s sk)
                                                        (lambda ()
                                                           ((== 1 b)
                                                            s
                                                            (lambda (s)
                                                               (lambda ()
                                                                  ((lambda (s sk)
                                                                      (lambda ()
                                                                         ((== 1
                                                                              x)
                                                                          s
                                                                          (lambda (s)
                                                                             (lambda ()
                                                                                ((lambda (s sk)
                                                                                    (lambda ()
                                                                                       ((== 1
                                                                                            y)
                                                                                        s
                                                                                        (lambda (s)
                                                                                           (lambda ()
                                                                                              ((lambda (s sk)
                                                                                                  (lambda ()
                                                                                                     ((== 1
                                                                                                          r)
                                                                                                      s
                                                                                                      (lambda (s)
                                                                                                         (lambda ()
                                                                                                            ((lambda (s sk)
                                                                                                                (lambda ()
                                                                                                                   ((== 1
                                                                                                                        c)
                                                                                                                    s
                                                                                                                    sk)))
                                                                                                             s
                                                                                                             sk))))))
                                                                                               s
                                                                                               sk))))))
                                                                                 s
                                                                                 sk))))))
                                                                   s
                                                                   sk))))))
                                                     s
                                                     sk))))))))))
                               (lambda (p)
                                  (lambda (s sk)
                                     (lambda ()
                                        ((lambda (a d)
                                            ((lambda (s sk)
                                                (lambda ()
                                                   ((conso a d p) s sk)))
                                             s
                                             sk))
                                         (make-var s)
                                         (make-var s))))))))
                         (lambda (x y) (== x y)))))
                   (lambda (x) (== '() x)))))
             (lambda (a d p) (== (cons a d) p)))))
       (lambda (p d)
          (lambda (s sk)
             (lambda ()
                ((lambda (a)
                    ((lambda (s sk)
                        (lambda () ((== (cons a d) p) s sk)))
                     s
                     sk))
                 (make-var s))))))))
 (lambda (p a)
    (lambda (s sk)
       (lambda ()
          ((lambda (d)
              ((lambda (s sk)
                  (lambda () ((== (cons a d) p) s sk)))
               s
               sk))
           (make-var s))))))
(display "DONE")
(newline)
(display "SKIPPED: ")
(display (skipped-tests))
(newline)
(if #f #f)
